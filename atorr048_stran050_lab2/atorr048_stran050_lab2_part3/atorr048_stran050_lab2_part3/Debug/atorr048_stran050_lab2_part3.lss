
atorr048_stran050_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000836  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078b  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	53 c0       	rjmp	.+166    	; 0x142 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 */

#include <avr/io.h>


int main(void) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x00; // Configure port A's 8 pins as inputs
  a8:	81 e2       	ldi	r24, 0x21	; 33
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	10 82       	st	Z, r1
  b0:	82 e2       	ldi	r24, 0x22	; 34
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // Configure port C's 8 pins as outputs, initialize to 0s
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	unsigned char tmpA = 0x00; // Temporary variable to hold the value of A
  ca:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char count = 0x00;
  cc:	19 82       	std	Y+1, r1	; 0x01
	/* Replace with your application code */
	while (1) {
		tmpA = PORTA;
  ce:	82 e2       	ldi	r24, 0x22	; 34
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	8a 83       	std	Y+2, r24	; 0x02
		count = 0;
  d8:	19 82       	std	Y+1, r1	; 0x01
		if ((tmpA & 0x01) == 0x00) { count++; }
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	99 27       	eor	r25, r25
  e4:	89 2b       	or	r24, r25
  e6:	19 f4       	brne	.+6      	; 0xee <main+0x50>
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	89 83       	std	Y+1, r24	; 0x01
		if ((tmpA & 0x02) == 0x00) { count++; }
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	82 70       	andi	r24, 0x02	; 2
  f6:	99 27       	eor	r25, r25
  f8:	89 2b       	or	r24, r25
  fa:	19 f4       	brne	.+6      	; 0x102 <main+0x64>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	89 83       	std	Y+1, r24	; 0x01
		if ((tmpA & 0x04) == 0x00) { count++; }
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	84 70       	andi	r24, 0x04	; 4
 10a:	99 27       	eor	r25, r25
 10c:	89 2b       	or	r24, r25
 10e:	19 f4       	brne	.+6      	; 0x116 <main+0x78>
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	89 83       	std	Y+1, r24	; 0x01
		if ((tmpA & 0x08) == 0x00) { count++; }
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	88 70       	andi	r24, 0x08	; 8
 11e:	99 27       	eor	r25, r25
 120:	89 2b       	or	r24, r25
 122:	19 f4       	brne	.+6      	; 0x12a <main+0x8c>
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	89 83       	std	Y+1, r24	; 0x01
		if (count == 0) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 23       	and	r24, r24
 12e:	19 f4       	brne	.+6      	; 0x136 <main+0x98>
			count = count | 0x80;
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	80 68       	ori	r24, 0x80	; 128
 134:	89 83       	std	Y+1, r24	; 0x01
		}
		PORTC = count;
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	29 81       	ldd	r18, Y+1	; 0x01
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	}
 140:	c6 cf       	rjmp	.-116    	; 0xce <main+0x30>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
