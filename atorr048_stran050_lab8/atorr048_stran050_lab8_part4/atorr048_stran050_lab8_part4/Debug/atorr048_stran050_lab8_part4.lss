
atorr048_stran050_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000873  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  00000adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030d  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	08 d0       	rcall	.+16     	; 0xba <main>
  aa:	55 c0       	rjmp	.+170    	; 0x156 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_init>:
unsigned short number;
unsigned char tmpB;
//unsigned char tmpD;

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 6e       	ori	r24, 0xE0	; 224
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <main>:
	//        the previous conversion completes.
}

int main(void)
{
	DDRA = 0x00; PORTA = 0x00;
  ba:	11 b8       	out	0x01, r1	; 1
  bc:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
  c2:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x03; PORTD = 0;
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	1b b8       	out	0x0b, r1	; 11
    ADC_init();
  ca:	f1 df       	rcall	.-30     	; 0xae <ADC_init>

    while (1) 
    {
		number = ADC;
  cc:	e8 e7       	ldi	r30, 0x78	; 120
  ce:	f0 e0       	ldi	r31, 0x00	; 0
		else if (number >= 132) {tmpB = 0x3F;}
		else if (number >= 110) {tmpB = 0x1F;}
		else if (number >= 88) {tmpB = 0x0F;}
		else if (number >= 66) {tmpB = 0x07;}
		else if (number >= 44) {tmpB = 0x03;}
		else if (number >= 22) {tmpB = 0x01;}
  d0:	b1 e0       	ldi	r27, 0x01	; 1
		else if (number >= 154) {tmpB = 0x7F;}
		else if (number >= 132) {tmpB = 0x3F;}
		else if (number >= 110) {tmpB = 0x1F;}
		else if (number >= 88) {tmpB = 0x0F;}
		else if (number >= 66) {tmpB = 0x07;}
		else if (number >= 44) {tmpB = 0x03;}
  d2:	a3 e0       	ldi	r26, 0x03	; 3
		if (number >= 176) {tmpB = 0xFF;}
		else if (number >= 154) {tmpB = 0x7F;}
		else if (number >= 132) {tmpB = 0x3F;}
		else if (number >= 110) {tmpB = 0x1F;}
		else if (number >= 88) {tmpB = 0x0F;}
		else if (number >= 66) {tmpB = 0x07;}
  d4:	77 e0       	ldi	r23, 0x07	; 7
		
		if (number >= 176) {tmpB = 0xFF;}
		else if (number >= 154) {tmpB = 0x7F;}
		else if (number >= 132) {tmpB = 0x3F;}
		else if (number >= 110) {tmpB = 0x1F;}
		else if (number >= 88) {tmpB = 0x0F;}
  d6:	6f e0       	ldi	r22, 0x0F	; 15
		number = ADC;
		
		if (number >= 176) {tmpB = 0xFF;}
		else if (number >= 154) {tmpB = 0x7F;}
		else if (number >= 132) {tmpB = 0x3F;}
		else if (number >= 110) {tmpB = 0x1F;}
  d8:	5f e1       	ldi	r21, 0x1F	; 31
    {
		number = ADC;
		
		if (number >= 176) {tmpB = 0xFF;}
		else if (number >= 154) {tmpB = 0x7F;}
		else if (number >= 132) {tmpB = 0x3F;}
  da:	4f e3       	ldi	r20, 0x3F	; 63
    while (1) 
    {
		number = ADC;
		
		if (number >= 176) {tmpB = 0xFF;}
		else if (number >= 154) {tmpB = 0x7F;}
  dc:	3f e7       	ldi	r19, 0x7F	; 127

    while (1) 
    {
		number = ADC;
		
		if (number >= 176) {tmpB = 0xFF;}
  de:	2f ef       	ldi	r18, 0xFF	; 255
	DDRD = 0x03; PORTD = 0;
    ADC_init();

    while (1) 
    {
		number = ADC;
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if (number >= 176) {tmpB = 0xFF;}
  ec:	80 3b       	cpi	r24, 0xB0	; 176
  ee:	91 05       	cpc	r25, r1
  f0:	18 f0       	brcs	.+6      	; 0xf8 <main+0x3e>
  f2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <tmpB>
  f6:	2b c0       	rjmp	.+86     	; 0x14e <main+0x94>
		else if (number >= 154) {tmpB = 0x7F;}
  f8:	8a 39       	cpi	r24, 0x9A	; 154
  fa:	91 05       	cpc	r25, r1
  fc:	18 f0       	brcs	.+6      	; 0x104 <main+0x4a>
  fe:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <tmpB>
 102:	25 c0       	rjmp	.+74     	; 0x14e <main+0x94>
		else if (number >= 132) {tmpB = 0x3F;}
 104:	84 38       	cpi	r24, 0x84	; 132
 106:	91 05       	cpc	r25, r1
 108:	18 f0       	brcs	.+6      	; 0x110 <main+0x56>
 10a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <tmpB>
 10e:	1f c0       	rjmp	.+62     	; 0x14e <main+0x94>
		else if (number >= 110) {tmpB = 0x1F;}
 110:	8e 36       	cpi	r24, 0x6E	; 110
 112:	91 05       	cpc	r25, r1
 114:	18 f0       	brcs	.+6      	; 0x11c <main+0x62>
 116:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <tmpB>
 11a:	19 c0       	rjmp	.+50     	; 0x14e <main+0x94>
		else if (number >= 88) {tmpB = 0x0F;}
 11c:	88 35       	cpi	r24, 0x58	; 88
 11e:	91 05       	cpc	r25, r1
 120:	18 f0       	brcs	.+6      	; 0x128 <main+0x6e>
 122:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <tmpB>
 126:	13 c0       	rjmp	.+38     	; 0x14e <main+0x94>
		else if (number >= 66) {tmpB = 0x07;}
 128:	82 34       	cpi	r24, 0x42	; 66
 12a:	91 05       	cpc	r25, r1
 12c:	18 f0       	brcs	.+6      	; 0x134 <main+0x7a>
 12e:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <tmpB>
 132:	0d c0       	rjmp	.+26     	; 0x14e <main+0x94>
		else if (number >= 44) {tmpB = 0x03;}
 134:	8c 32       	cpi	r24, 0x2C	; 44
 136:	91 05       	cpc	r25, r1
 138:	18 f0       	brcs	.+6      	; 0x140 <main+0x86>
 13a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <tmpB>
 13e:	07 c0       	rjmp	.+14     	; 0x14e <main+0x94>
		else if (number >= 22) {tmpB = 0x01;}
 140:	46 97       	sbiw	r24, 0x16	; 22
 142:	18 f0       	brcs	.+6      	; 0x14a <main+0x90>
 144:	b0 93 02 01 	sts	0x0102, r27	; 0x800102 <tmpB>
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0x94>
		else if (number >= 0) {tmpB = 0x00;}
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tmpB>
		else {tmpB = 0x00;} 
	
		PORTB = tmpB;
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tmpB>
 152:	85 b9       	out	0x05, r24	; 5
    }
 154:	c5 cf       	rjmp	.-118    	; 0xe0 <main+0x26>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
