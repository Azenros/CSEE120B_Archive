
atorr048_stran050_lab6_part_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093d  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00001f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000219d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	35 d1       	rcall	.+618    	; 0x32e <main>
  c4:	50 c1       	rjmp	.+672    	; 0x366 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  fe:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 102:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 106:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 10a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 10e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 112:	8f e5       	ldi	r24, 0x5F	; 95
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2f e5       	ldi	r18, 0x5F	; 95
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	20 68       	ori	r18, 0x80	; 128
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <TimerISR>:
void TimerISR() {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 13a:	00 00       	nop
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 174:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 178:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 17c:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 180:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 18e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 192:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 196:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 19e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a2:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a6:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1aa:	89 2b       	or	r24, r25
 1ac:	8a 2b       	or	r24, r26
 1ae:	8b 2b       	or	r24, r27
 1b0:	89 f4       	brne	.+34     	; 0x1d4 <__vector_13+0x92>
		TimerISR();
 1b2:	bc df       	rcall	.-136    	; 0x12c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1bc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1c8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1cc:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1d0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1d4:	00 00       	nop
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1f8:	0f 90       	pop	r0
 1fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <TimerSet>:
void TimerSet(unsigned long M) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	00 d0       	rcall	.+0      	; 0x20a <TimerSet+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <TimerSet+0x8>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	69 83       	std	Y+1, r22	; 0x01
 212:	7a 83       	std	Y+2, r23	; 0x02
 214:	8b 83       	std	Y+3, r24	; 0x03
 216:	9c 83       	std	Y+4, r25	; 0x04
	//Set TimerISR() to tick every M ms
	_avr_timer_M = M;
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	ab 81       	ldd	r26, Y+3	; 0x03
 21e:	bc 81       	ldd	r27, Y+4	; 0x04
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 228:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 22c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 238:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 23c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 240:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 244:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 248:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 24c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
}
 250:	00 00       	nop
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <Tick>:

void Tick() {
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
 268:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 26c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <state+0x1>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	81 f0       	breq	.+32     	; 0x296 <Tick+0x36>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	30 f0       	brcs	.+12     	; 0x288 <Tick+0x28>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	91 05       	cpc	r25, r1
 280:	a1 f0       	breq	.+40     	; 0x2aa <Tick+0x4a>
 282:	03 97       	sbiw	r24, 0x03	; 3
 284:	01 f1       	breq	.+64     	; 0x2c6 <Tick+0x66>
 286:	28 c0       	rjmp	.+80     	; 0x2d8 <Tick+0x78>
		case Start: state = one; break;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 290:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 294:	21 c0       	rjmp	.+66     	; 0x2d8 <Tick+0x78>
		case one: state = two; direction = 1; break;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 29e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <Tick+0x78>
		case two: state = direction ? four : one; break;
 2aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <direction>
 2ae:	88 23       	and	r24, r24
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <Tick+0x58>
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <Tick+0x5c>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 2c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <Tick+0x78>
		case four: state = two; direction = 0; break;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 2ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction>
 2d6:	00 00       	nop
	}
	switch(state) {
 2d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 2dc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <state+0x1>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 05       	cpc	r25, r1
 2e4:	71 f0       	breq	.+28     	; 0x302 <Tick+0xa2>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	30 f0       	brcs	.+12     	; 0x2f8 <Tick+0x98>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	91 05       	cpc	r25, r1
 2f0:	71 f0       	breq	.+28     	; 0x30e <Tick+0xae>
 2f2:	03 97       	sbiw	r24, 0x03	; 3
 2f4:	91 f0       	breq	.+36     	; 0x31a <Tick+0xba>
		case Start: PORTB = 0x00; break;
		case one: PORTB = 0x01; break;
		case two: PORTB = 0x02; break;
		case four: PORTB = 0x04; break;
	}
}
 2f6:	17 c0       	rjmp	.+46     	; 0x326 <Tick+0xc6>
		case one: state = two; direction = 1; break;
		case two: state = direction ? four : one; break;
		case four: state = two; direction = 0; break;
	}
	switch(state) {
		case Start: PORTB = 0x00; break;
 2f8:	85 e2       	ldi	r24, 0x25	; 37
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	fc 01       	movw	r30, r24
 2fe:	10 82       	st	Z, r1
 300:	12 c0       	rjmp	.+36     	; 0x326 <Tick+0xc6>
		case one: PORTB = 0x01; break;
 302:	85 e2       	ldi	r24, 0x25	; 37
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
 30c:	0c c0       	rjmp	.+24     	; 0x326 <Tick+0xc6>
		case two: PORTB = 0x02; break;
 30e:	85 e2       	ldi	r24, 0x25	; 37
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
 318:	06 c0       	rjmp	.+12     	; 0x326 <Tick+0xc6>
		case four: PORTB = 0x04; break;
 31a:	85 e2       	ldi	r24, 0x25	; 37
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	24 e0       	ldi	r18, 0x04	; 4
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
 324:	00 00       	nop
	}
}
 326:	00 00       	nop
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <main>:

int main(void) {
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
 
	 DDRB = 0xFF; PORTB = 0x00;
 336:	84 e2       	ldi	r24, 0x24	; 36
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
 340:	85 e2       	ldi	r24, 0x25	; 37
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	10 82       	st	Z, r1
	 TimerSet(1000);
 348:	68 ee       	ldi	r22, 0xE8	; 232
 34a:	73 e0       	ldi	r23, 0x03	; 3
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	59 df       	rcall	.-334    	; 0x204 <TimerSet>
	 TimerOn();
 352:	ba de       	rcall	.-652    	; 0xc8 <TimerOn>
	 while(1) {
		 Tick();
 354:	85 df       	rcall	.-246    	; 0x260 <Tick>
 356:	00 00       	nop
		 while (!TimerFlag) {};	// Wait 1 sec
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 35c:	88 23       	and	r24, r24
 35e:	e1 f3       	breq	.-8      	; 0x358 <main+0x2a>
 360:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		 TimerFlag = 0;
 364:	f7 cf       	rjmp	.-18     	; 0x354 <main+0x26>

00000366 <_exit>:
		 // Note: For the above a better style would use a synchSM with TickSM()
		 // This example just illustrates the use of the ISR and flag
	 }
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
