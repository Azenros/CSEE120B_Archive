
atorr048_stran050_lab6_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096c  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081f  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a9  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6a d1       	rcall	.+724    	; 0x398 <main>
  c4:	9d c1       	rjmp	.+826    	; 0x400 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  fe:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 102:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 106:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 10a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 10e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 112:	8f e5       	ldi	r24, 0x5F	; 95
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2f e5       	ldi	r18, 0x5F	; 95
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	20 68       	ori	r18, 0x80	; 128
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <TimerISR>:
void TimerISR() {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 13a:	00 00       	nop
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 174:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 178:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 17c:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 180:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	a1 09       	sbc	r26, r1
 188:	b1 09       	sbc	r27, r1
 18a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 18e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 192:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 196:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 19e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a2:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a6:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1aa:	89 2b       	or	r24, r25
 1ac:	8a 2b       	or	r24, r26
 1ae:	8b 2b       	or	r24, r27
 1b0:	89 f4       	brne	.+34     	; 0x1d4 <__vector_13+0x92>
		TimerISR();
 1b2:	bc df       	rcall	.-136    	; 0x12c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1bc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1c8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1cc:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1d0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1d4:	00 00       	nop
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1f8:	0f 90       	pop	r0
 1fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <TimerSet>:
void TimerSet(unsigned long M) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	00 d0       	rcall	.+0      	; 0x20a <TimerSet+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <TimerSet+0x8>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	69 83       	std	Y+1, r22	; 0x01
 212:	7a 83       	std	Y+2, r23	; 0x02
 214:	8b 83       	std	Y+3, r24	; 0x03
 216:	9c 83       	std	Y+4, r25	; 0x04
	//Set TimerISR() to tick every M ms
	_avr_timer_M = M;
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	ab 81       	ldd	r26, Y+3	; 0x03
 21e:	bc 81       	ldd	r27, Y+4	; 0x04
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 228:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 22c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 238:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 23c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 240:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 244:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 248:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 24c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
}
 250:	00 00       	nop
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <Tick>:

void Tick() {
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	
	switch(state) {
 268:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 26c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state+0x1>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	91 05       	cpc	r25, r1
 274:	39 f1       	breq	.+78     	; 0x2c4 <Tick+0x64>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	91 05       	cpc	r25, r1
 27a:	28 f4       	brcc	.+10     	; 0x286 <Tick+0x26>
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	49 f0       	breq	.+18     	; 0x292 <Tick+0x32>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	71 f0       	breq	.+28     	; 0x2a0 <Tick+0x40>
 284:	50 c0       	rjmp	.+160    	; 0x326 <Tick+0xc6>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	91 05       	cpc	r25, r1
 28a:	89 f1       	breq	.+98     	; 0x2ee <Tick+0x8e>
 28c:	04 97       	sbiw	r24, 0x04	; 4
 28e:	e9 f1       	breq	.+122    	; 0x30a <Tick+0xaa>
 290:	4a c0       	rjmp	.+148    	; 0x326 <Tick+0xc6>
		case Start: state = one; break;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 29a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 29e:	43 c0       	rjmp	.+134    	; 0x326 <Tick+0xc6>
		case one: state = (tmpA == 0x01) ? press : two; i = 0; break;
 2a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpA>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	19 f4       	brne	.+6      	; 0x2ae <Tick+0x4e>
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <Tick+0x52>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 2b6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 2ba:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <i+0x1>
 2be:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i>
 2c2:	31 c0       	rjmp	.+98     	; 0x326 <Tick+0xc6>
		case two: state = (tmpA == 0x01) ? press : direction ? four : one; break;
 2c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpA>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <Tick+0x80>
 2cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <direction>
 2d0:	88 23       	and	r24, r24
 2d2:	19 f0       	breq	.+6      	; 0x2da <Tick+0x7a>
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <Tick+0x84>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Tick+0x84>
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 2e8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 2ec:	1c c0       	rjmp	.+56     	; 0x326 <Tick+0xc6>
		case four: state = (tmpA == 0x01) ? press : two; break;
 2ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpA>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	19 f4       	brne	.+6      	; 0x2fc <Tick+0x9c>
 2f6:	84 e0       	ldi	r24, 0x04	; 4
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <Tick+0xa0>
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 304:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 308:	0e c0       	rjmp	.+28     	; 0x326 <Tick+0xc6>
		case press: 
			state = (tmpA == 0x01) ? one : press;
 30a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpA>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	19 f4       	brne	.+6      	; 0x318 <Tick+0xb8>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <Tick+0xbc>
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 320:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			break;
 324:	00 00       	nop
	}
	switch(state) {
 326:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 32a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state+0x1>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	e1 f0       	breq	.+56     	; 0x36c <Tick+0x10c>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	91 05       	cpc	r25, r1
 338:	28 f4       	brcc	.+10     	; 0x344 <Tick+0xe4>
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	49 f0       	breq	.+18     	; 0x350 <Tick+0xf0>
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	61 f0       	breq	.+24     	; 0x35a <Tick+0xfa>
		case two: PORTB = 0x02; break;
		case four: PORTB = 0x04; direction = 0; break;
		case press: direction = 1; break;
			
	}
}
 342:	26 c0       	rjmp	.+76     	; 0x390 <Tick+0x130>
		case four: state = (tmpA == 0x01) ? press : two; break;
		case press: 
			state = (tmpA == 0x01) ? one : press;
			break;
	}
	switch(state) {
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	91 05       	cpc	r25, r1
 348:	b9 f0       	breq	.+46     	; 0x378 <Tick+0x118>
 34a:	04 97       	sbiw	r24, 0x04	; 4
 34c:	e9 f0       	breq	.+58     	; 0x388 <Tick+0x128>
		case two: PORTB = 0x02; break;
		case four: PORTB = 0x04; direction = 0; break;
		case press: direction = 1; break;
			
	}
}
 34e:	20 c0       	rjmp	.+64     	; 0x390 <Tick+0x130>
		case press: 
			state = (tmpA == 0x01) ? one : press;
			break;
	}
	switch(state) {
		case Start: PORTB = 0x00; break;
 350:	85 e2       	ldi	r24, 0x25	; 37
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fc 01       	movw	r30, r24
 356:	10 82       	st	Z, r1
 358:	1b c0       	rjmp	.+54     	; 0x390 <Tick+0x130>
		case one: PORTB = 0x01; direction = 1; break;
 35a:	85 e2       	ldi	r24, 0x25	; 37
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 36a:	12 c0       	rjmp	.+36     	; 0x390 <Tick+0x130>
		case two: PORTB = 0x02; break;
 36c:	85 e2       	ldi	r24, 0x25	; 37
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	22 e0       	ldi	r18, 0x02	; 2
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
 376:	0c c0       	rjmp	.+24     	; 0x390 <Tick+0x130>
		case four: PORTB = 0x04; direction = 0; break;
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	24 e0       	ldi	r18, 0x04	; 4
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
 382:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction>
 386:	04 c0       	rjmp	.+8      	; 0x390 <Tick+0x130>
		case press: direction = 1; break;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 38e:	00 00       	nop
			
	}
}
 390:	00 00       	nop
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <main>:

int main(void) {
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 3a0:	81 e2       	ldi	r24, 0x21	; 33
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	10 82       	st	Z, r1
 3a8:	82 e2       	ldi	r24, 0x22	; 34
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 3b2:	84 e2       	ldi	r24, 0x24	; 36
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
 3bc:	85 e2       	ldi	r24, 0x25	; 37
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	10 82       	st	Z, r1
	TimerSet(300);
 3c4:	6c e2       	ldi	r22, 0x2C	; 44
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	1b df       	rcall	.-458    	; 0x204 <TimerSet>
	TimerOn();
 3ce:	7c de       	rcall	.-776    	; 0xc8 <TimerOn>
 3d0:	80 e2       	ldi	r24, 0x20	; 32
	while(1) {
		tmpA = ~PINA & 0x01;
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	81 70       	andi	r24, 0x01	; 1
 3de:	99 27       	eor	r25, r25
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	89 2b       	or	r24, r25
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <main+0x50>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	82 2f       	mov	r24, r18
 3ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpA>
		Tick();
 3ee:	38 df       	rcall	.-400    	; 0x260 <Tick>
 3f0:	00 00       	nop
		while (!TimerFlag) {};	// Wait 1 sec
 3f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3f6:	88 23       	and	r24, r24
 3f8:	e1 f3       	breq	.-8      	; 0x3f2 <main+0x5a>
 3fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		TimerFlag = 0;
 3fe:	e8 cf       	rjmp	.-48     	; 0x3d0 <main+0x38>

00000400 <_exit>:
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
