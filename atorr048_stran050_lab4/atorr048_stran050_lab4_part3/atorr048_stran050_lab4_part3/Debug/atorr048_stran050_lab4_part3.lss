
atorr048_stran050_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031b  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	88 d0       	rcall	.+272    	; 0x1ba <main>
  aa:	a2 c0       	rjmp	.+324    	; 0x1f0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
 */

#include <avr/io.h>
enum States{Start, Wait, Push_1, R_1, Push_Y, Open} state;

void Tick() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	71 f1       	breq	.+92     	; 0x120 <Tick+0x72>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	28 f4       	brcc	.+10     	; 0xd4 <Tick+0x26>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	51 f0       	breq	.+20     	; 0xe2 <Tick+0x34>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	79 f0       	breq	.+30     	; 0xf0 <Tick+0x42>
			break;
		case Push_Y:
			state = Wait;
			break;
		default:
			break;
  d2:	62 c0       	rjmp	.+196    	; 0x198 <Tick+0xea>

#include <avr/io.h>
enum States{Start, Wait, Push_1, R_1, Push_Y, Open} state;

void Tick() {
	switch(state) {
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	b9 f1       	breq	.+110    	; 0x148 <Tick+0x9a>
  da:	04 97       	sbiw	r24, 0x04	; 4
  dc:	09 f4       	brne	.+2      	; 0xe0 <Tick+0x32>
  de:	55 c0       	rjmp	.+170    	; 0x18a <Tick+0xdc>
			break;
		case Push_Y:
			state = Wait;
			break;
		default:
			break;
  e0:	5b c0       	rjmp	.+182    	; 0x198 <Tick+0xea>
enum States{Start, Wait, Push_1, R_1, Push_Y, Open} state;

void Tick() {
	switch(state) {
		case Start:
			state = Wait;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  ee:	54 c0       	rjmp	.+168    	; 0x198 <Tick+0xea>
		case Wait:
			PORTB = 0;
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	10 82       	st	Z, r1
			if (PORTA == 0x04) {state = Push_1;}
  f8:	82 e2       	ldi	r24, 0x22	; 34
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	80 81       	ld	r24, Z
 100:	84 30       	cpi	r24, 0x04	; 4
 102:	39 f4       	brne	.+14     	; 0x112 <Tick+0x64>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 110:	43 c0       	rjmp	.+134    	; 0x198 <Tick+0xea>
			state = Wait;
			break;
		case Wait:
			PORTB = 0;
			if (PORTA == 0x04) {state = Push_1;}
			else {state = Wait;}
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 11e:	3c c0       	rjmp	.+120    	; 0x198 <Tick+0xea>
		case Push_1:
			if (PORTA == 0x00) {state = R_1;}
 120:	82 e2       	ldi	r24, 0x22	; 34
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	39 f4       	brne	.+14     	; 0x13a <Tick+0x8c>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Push_1;}
			break;
 138:	2f c0       	rjmp	.+94     	; 0x198 <Tick+0xea>
			if (PORTA == 0x04) {state = Push_1;}
			else {state = Wait;}
			break;
		case Push_1:
			if (PORTA == 0x00) {state = R_1;}
			else {state = Push_1;}
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 146:	28 c0       	rjmp	.+80     	; 0x198 <Tick+0xea>
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
 148:	82 e2       	ldi	r24, 0x22	; 34
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	39 f4       	brne	.+14     	; 0x162 <Tick+0xb4>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x00) {state = R_1;}
			else {state = Wait;}
			break;
 160:	1b c0       	rjmp	.+54     	; 0x198 <Tick+0xea>
			if (PORTA == 0x00) {state = R_1;}
			else {state = Push_1;}
			break;
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
			else if (PORTA == 0x00) {state = R_1;}
 162:	82 e2       	ldi	r24, 0x22	; 34
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	88 23       	and	r24, r24
 16c:	39 f4       	brne	.+14     	; 0x17c <Tick+0xce>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 17a:	0e c0       	rjmp	.+28     	; 0x198 <Tick+0xea>
			else {state = Push_1;}
			break;
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
			else if (PORTA == 0x00) {state = R_1;}
			else {state = Wait;}
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 188:	07 c0       	rjmp	.+14     	; 0x198 <Tick+0xea>
		case Push_Y:
			state = Wait;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 196:	00 00       	nop
		default:
			break;
		}
	
	switch (state) {			
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a0:	04 97       	sbiw	r24, 0x04	; 4
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <Tick+0xf8>
		case Push_Y:
			PORTB = 0x01;
			break;
		default:
			break;
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <Tick+0x104>
			break;
		}
	
	switch (state) {			
		case Push_Y:
			PORTB = 0x01;
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
			break;
 1b0:	00 00       	nop
		default:
			break;
		
	}
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <main>:

int main(void) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0; PORTA = 0;
 1c2:	81 e2       	ldi	r24, 0x21	; 33
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	10 82       	st	Z, r1
 1ca:	82 e2       	ldi	r24, 0x22	; 34
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 1d2:	84 e2       	ldi	r24, 0x24	; 36
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
 1dc:	85 e2       	ldi	r24, 0x25	; 37
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	10 82       	st	Z, r1
	
	state = Start;
 1e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    while (1) {
		Tick();
 1ec:	60 df       	rcall	.-320    	; 0xae <Tick>
    }
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <main+0x32>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
