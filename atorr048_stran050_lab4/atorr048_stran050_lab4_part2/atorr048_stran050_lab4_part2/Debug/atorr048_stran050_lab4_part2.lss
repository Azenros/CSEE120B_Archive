
atorr048_stran050_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 00       	.word	0x0077	; ????
  8e:	7e 00       	.word	0x007e	; ????
  90:	02 01       	movw	r0, r4
  92:	e1 00       	.word	0x00e1	; ????
  94:	cd 00       	.word	0x00cd	; ????
  96:	ac 00       	.word	0x00ac	; ????
  98:	16 01       	movw	r2, r12

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a2 30       	cpi	r26, 0x02	; 2
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	16 d1       	rcall	.+556    	; 0x2e4 <main>
  b8:	3a c1       	rjmp	.+628    	; 0x32e <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <Tick>:
 */

#include <avr/io.h>
enum States{Start, Wait, Plus_on, Plus_off, Minus_on, Minus_off, Reset} state;

void Tick() {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	cc 01       	movw	r24, r24
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	84 1b       	sub	r24, r20
  dc:	95 0b       	sbc	r25, r21
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	08 f4       	brcc	.+2      	; 0xe6 <Tick+0x2a>
  e4:	b7 c0       	rjmp	.+366    	; 0x254 <Tick+0x198>
  e6:	8a 5b       	subi	r24, 0xBA	; 186
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	17 c1       	rjmp	.+558    	; 0x31c <__tablejump2__>
		case Start:
			state = Wait;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  fa:	ad c0       	rjmp	.+346    	; 0x256 <Tick+0x19a>
		case Wait:
			if (PORTA == 0x03) {state = Reset;}
  fc:	82 e2       	ldi	r24, 0x22	; 34
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	39 f4       	brne	.+14     	; 0x116 <Tick+0x5a>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x02) {state = Minus_on;}
			else if (PORTA == 0x01) {state = Plus_on;}
			else {state = Wait;}
			break;
 114:	a0 c0       	rjmp	.+320    	; 0x256 <Tick+0x19a>
		case Start:
			state = Wait;
			break;
		case Wait:
			if (PORTA == 0x03) {state = Reset;}
			else if (PORTA == 0x02) {state = Minus_on;}
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	39 f4       	brne	.+14     	; 0x130 <Tick+0x74>
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x01) {state = Plus_on;}
			else {state = Wait;}
			break;
 12e:	93 c0       	rjmp	.+294    	; 0x256 <Tick+0x19a>
			state = Wait;
			break;
		case Wait:
			if (PORTA == 0x03) {state = Reset;}
			else if (PORTA == 0x02) {state = Minus_on;}
			else if (PORTA == 0x01) {state = Plus_on;}
 130:	82 e2       	ldi	r24, 0x22	; 34
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <Tick+0x8e>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 148:	86 c0       	rjmp	.+268    	; 0x256 <Tick+0x19a>
			break;
		case Wait:
			if (PORTA == 0x03) {state = Reset;}
			else if (PORTA == 0x02) {state = Minus_on;}
			else if (PORTA == 0x01) {state = Plus_on;}
			else {state = Wait;}
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 156:	7f c0       	rjmp	.+254    	; 0x256 <Tick+0x19a>
		case Minus_off:
			if (PORTA == 0x00) {state = Wait;}
 158:	82 e2       	ldi	r24, 0x22	; 34
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	39 f4       	brne	.+14     	; 0x172 <Tick+0xb6>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Minus_off;}
			break;
 170:	72 c0       	rjmp	.+228    	; 0x256 <Tick+0x19a>
			else if (PORTA == 0x01) {state = Plus_on;}
			else {state = Wait;}
			break;
		case Minus_off:
			if (PORTA == 0x00) {state = Wait;}
			else if (PORTA == 0x03) {state = Reset;}
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	39 f4       	brne	.+14     	; 0x18c <Tick+0xd0>
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Minus_off;}
			break;
 18a:	65 c0       	rjmp	.+202    	; 0x256 <Tick+0x19a>
			else {state = Wait;}
			break;
		case Minus_off:
			if (PORTA == 0x00) {state = Wait;}
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Minus_off;}
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 198:	5e c0       	rjmp	.+188    	; 0x256 <Tick+0x19a>
		case Minus_on:
			if (PORTA == 0x03) {state = Reset;}
 19a:	82 e2       	ldi	r24, 0x22	; 34
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <Tick+0xf8>
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Minus_off;}
			break;
 1b2:	51 c0       	rjmp	.+162    	; 0x256 <Tick+0x19a>
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Minus_off;}
			break;
		case Minus_on:
			if (PORTA == 0x03) {state = Reset;}
			else {state = Minus_off;}
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1c0:	4a c0       	rjmp	.+148    	; 0x256 <Tick+0x19a>
		case Plus_off:
			if (PORTA == 0x00) {state = Wait;}
 1c2:	82 e2       	ldi	r24, 0x22	; 34
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	39 f4       	brne	.+14     	; 0x1dc <Tick+0x120>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Plus_off;}
			break;
 1da:	3d c0       	rjmp	.+122    	; 0x256 <Tick+0x19a>
			if (PORTA == 0x03) {state = Reset;}
			else {state = Minus_off;}
			break;
		case Plus_off:
			if (PORTA == 0x00) {state = Wait;}
			else if (PORTA == 0x03) {state = Reset;}
 1dc:	82 e2       	ldi	r24, 0x22	; 34
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <Tick+0x13a>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Plus_off;}
			break;
 1f4:	30 c0       	rjmp	.+96     	; 0x256 <Tick+0x19a>
			else {state = Minus_off;}
			break;
		case Plus_off:
			if (PORTA == 0x00) {state = Wait;}
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Plus_off;}
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 202:	29 c0       	rjmp	.+82     	; 0x256 <Tick+0x19a>
		case Plus_on:
			if (PORTA == 0x03) {state = Reset;}
 204:	82 e2       	ldi	r24, 0x22	; 34
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	39 f4       	brne	.+14     	; 0x21e <Tick+0x162>
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 218:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Plus_off;}
			break;
 21c:	1c c0       	rjmp	.+56     	; 0x256 <Tick+0x19a>
			else if (PORTA == 0x03) {state = Reset;}
			else {state = Plus_off;}
			break;
		case Plus_on:
			if (PORTA == 0x03) {state = Reset;}
			else {state = Plus_off;}
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 226:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 22a:	15 c0       	rjmp	.+42     	; 0x256 <Tick+0x19a>
			
		case Reset:
			if (PORTA == 0x03) {state = Reset;}
 22c:	82 e2       	ldi	r24, 0x22	; 34
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	39 f4       	brne	.+14     	; 0x246 <Tick+0x18a>
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 244:	08 c0       	rjmp	.+16     	; 0x256 <Tick+0x19a>
			else {state = Plus_off;}
			break;
			
		case Reset:
			if (PORTA == 0x03) {state = Reset;}
			else {state = Wait;}
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 252:	01 c0       	rjmp	.+2      	; 0x256 <Tick+0x19a>
		default:
			break;
 254:	00 00       	nop
		}
	
	switch (state) {			
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	91 05       	cpc	r25, r1
 262:	99 f1       	breq	.+102    	; 0x2ca <Tick+0x20e>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	91 05       	cpc	r25, r1
 268:	30 f4       	brcc	.+12     	; 0x276 <Tick+0x1ba>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	79 f1       	breq	.+94     	; 0x2ce <Tick+0x212>
 270:	02 97       	sbiw	r24, 0x02	; 2
 272:	c1 f0       	breq	.+48     	; 0x2a4 <Tick+0x1e8>
			break;
		case Reset:
			PORTC = 0;
			break;
		default:
			break;
 274:	33 c0       	rjmp	.+102    	; 0x2dc <Tick+0x220>
			break;
		default:
			break;
		}
	
	switch (state) {			
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	91 05       	cpc	r25, r1
 27a:	59 f1       	breq	.+86     	; 0x2d2 <Tick+0x216>
 27c:	85 30       	cpi	r24, 0x05	; 5
 27e:	91 05       	cpc	r25, r1
 280:	18 f0       	brcs	.+6      	; 0x288 <Tick+0x1cc>
 282:	06 97       	sbiw	r24, 0x06	; 6
 284:	e9 f0       	breq	.+58     	; 0x2c0 <Tick+0x204>
			break;
		case Reset:
			PORTC = 0;
			break;
		default:
			break;
 286:	2a c0       	rjmp	.+84     	; 0x2dc <Tick+0x220>
	
	switch (state) {			
		case Wait:
			break;
		case Minus_on:
			if (PORTC > 0) { PORTC--;}
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	80 81       	ld	r24, Z
 290:	88 23       	and	r24, r24
 292:	09 f1       	breq	.+66     	; 0x2d6 <Tick+0x21a>
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	20 81       	ld	r18, Z
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
			break;
 2a2:	19 c0       	rjmp	.+50     	; 0x2d6 <Tick+0x21a>
		case Minus_off:
			break;
		case Plus_on:
			if (PORTC < 9) { PORTC++;}
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	89 30       	cpi	r24, 0x09	; 9
 2ae:	a8 f4       	brcc	.+42     	; 0x2da <Tick+0x21e>
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 81       	ld	r18, Z
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
			break;
 2be:	0d c0       	rjmp	.+26     	; 0x2da <Tick+0x21e>
		case Plus_off:
			break;
		case Reset:
			PORTC = 0;
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	10 82       	st	Z, r1
			break;
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <Tick+0x220>
			break;
		case Plus_on:
			if (PORTC < 9) { PORTC++;}
			break;
		case Plus_off:
			break;
 2ca:	00 00       	nop
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <Tick+0x220>
			break;
		}
	
	switch (state) {			
		case Wait:
			break;
 2ce:	00 00       	nop
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <Tick+0x220>
		case Minus_on:
			if (PORTC > 0) { PORTC--;}
			break;
		case Minus_off:
			break;
 2d2:	00 00       	nop
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <Tick+0x220>
	switch (state) {			
		case Wait:
			break;
		case Minus_on:
			if (PORTC > 0) { PORTC--;}
			break;
 2d6:	00 00       	nop
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <Tick+0x220>
		case Minus_off:
			break;
		case Plus_on:
			if (PORTC < 9) { PORTC++;}
			break;
 2da:	00 00       	nop
			break;
		default:
			break;
		
	}
}
 2dc:	00 00       	nop
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <main>:

int main(void) {
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0; PORTA = 0;
 2ec:	81 e2       	ldi	r24, 0x21	; 33
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	10 82       	st	Z, r1
 2f4:	82 e2       	ldi	r24, 0x22	; 34
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x07;
 2fc:	87 e2       	ldi	r24, 0x27	; 39
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
 306:	88 e2       	ldi	r24, 0x28	; 40
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	27 e0       	ldi	r18, 0x07	; 7
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
	
	state = Start;
 310:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 314:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
    while (1) {
		Tick();
 318:	d1 de       	rcall	.-606    	; 0xbc <Tick>
    }
 31a:	fe cf       	rjmp	.-4      	; 0x318 <main+0x34>

0000031c <__tablejump2__>:
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	00 24       	eor	r0, r0
 322:	00 1c       	adc	r0, r0
 324:	0b be       	out	0x3b, r0	; 59
 326:	07 90       	elpm	r0, Z+
 328:	f6 91       	elpm	r31, Z
 32a:	e0 2d       	mov	r30, r0
 32c:	09 94       	ijmp

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
