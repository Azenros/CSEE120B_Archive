
atorr048_stran050_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034b  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 00       	.word	0x0077	; ????
  8e:	7e 00       	.word	0x007e	; ????
  90:	92 00       	.word	0x0092	; ????
  92:	a6 00       	.word	0x00a6	; ????
  94:	c7 00       	.word	0x00c7	; ????
  96:	d7 00       	.word	0x00d7	; ????
  98:	de 00       	.word	0x00de	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a2 30       	cpi	r26, 0x02	; 2
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	a2 d0       	rcall	.+324    	; 0x1fc <main>
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <Tick>:


#include <avr/io.h>
enum States{Start, Wait, Push_1, R_1, Push_Y, Open, Close} state;

void Tick() {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	cc 01       	movw	r24, r24
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	84 1b       	sub	r24, r20
  dc:	95 0b       	sbc	r25, r21
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	08 f4       	brcc	.+2      	; 0xe6 <Tick+0x2a>
  e4:	71 c0       	rjmp	.+226    	; 0x1c8 <Tick+0x10c>
  e6:	8a 5b       	subi	r24, 0xBA	; 186
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	fc 01       	movw	r30, r24
  ec:	a2 c0       	rjmp	.+324    	; 0x232 <__tablejump2__>
		case Start:
			state = Wait;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  fa:	67 c0       	rjmp	.+206    	; 0x1ca <Tick+0x10e>
		case Wait:
			if (PORTA == 0x04) {state = Push_1;}
  fc:	82 e2       	ldi	r24, 0x22	; 34
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	80 81       	ld	r24, Z
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	39 f4       	brne	.+14     	; 0x116 <Tick+0x5a>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 114:	5a c0       	rjmp	.+180    	; 0x1ca <Tick+0x10e>
		case Start:
			state = Wait;
			break;
		case Wait:
			if (PORTA == 0x04) {state = Push_1;}
			else {state = Wait;}
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 122:	53 c0       	rjmp	.+166    	; 0x1ca <Tick+0x10e>
		case Push_1:
			if (PORTA == 0x00) {state = R_1;}
 124:	82 e2       	ldi	r24, 0x22	; 34
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	39 f4       	brne	.+14     	; 0x13e <Tick+0x82>
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Push_1;}
			break;
 13c:	46 c0       	rjmp	.+140    	; 0x1ca <Tick+0x10e>
			if (PORTA == 0x04) {state = Push_1;}
			else {state = Wait;}
			break;
		case Push_1:
			if (PORTA == 0x00) {state = R_1;}
			else {state = Push_1;}
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 14a:	3f c0       	rjmp	.+126    	; 0x1ca <Tick+0x10e>
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	39 f4       	brne	.+14     	; 0x166 <Tick+0xaa>
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else if (PORTA == 0x00) {state = R_1;}
			else {state = Wait;}
			break;
 164:	32 c0       	rjmp	.+100    	; 0x1ca <Tick+0x10e>
			if (PORTA == 0x00) {state = R_1;}
			else {state = Push_1;}
			break;
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
			else if (PORTA == 0x00) {state = R_1;}
 166:	82 e2       	ldi	r24, 0x22	; 34
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
 170:	39 f4       	brne	.+14     	; 0x180 <Tick+0xc4>
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Wait;}
			break;
 17e:	25 c0       	rjmp	.+74     	; 0x1ca <Tick+0x10e>
			else {state = Push_1;}
			break;
		case R_1:
			if (PORTA == 0x02) {state = Push_Y;}
			else if (PORTA == 0x00) {state = R_1;}
			else {state = Wait;}
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 18c:	1e c0       	rjmp	.+60     	; 0x1ca <Tick+0x10e>
		case Push_Y:
			state = (PORTB == 1) ? Close : Open;
 18e:	85 e2       	ldi	r24, 0x25	; 37
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	19 f4       	brne	.+6      	; 0x1a0 <Tick+0xe4>
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Tick+0xe8>
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1ac:	0e c0       	rjmp	.+28     	; 0x1ca <Tick+0x10e>
		case Open:
			state = Wait;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <Tick+0x10e>
		case Close:
			state = Wait;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		default:
			break;
 1c8:	00 00       	nop
	}
	
	switch (state) {
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	91 05       	cpc	r25, r1
 1d6:	19 f0       	breq	.+6      	; 0x1de <Tick+0x122>
 1d8:	06 97       	sbiw	r24, 0x06	; 6
 1da:	39 f0       	breq	.+14     	; 0x1ea <Tick+0x12e>
			PORTB = 1;
			break;
		case Close:
			PORTB = 0;
		default:
			break;
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <Tick+0x136>
			break;
	}
	
	switch (state) {
		case Open:
			PORTB = 1;
 1de:	85 e2       	ldi	r24, 0x25	; 37
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
			break;
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <Tick+0x138>
		case Close:
			PORTB = 0;
 1ea:	85 e2       	ldi	r24, 0x25	; 37
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	10 82       	st	Z, r1
		default:
			break;
 1f2:	00 00       	nop
		
	}
}
 1f4:	00 00       	nop
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <main>:

int main(void) {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0; PORTA = 0;
 204:	81 e2       	ldi	r24, 0x21	; 33
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	10 82       	st	Z, r1
 20c:	82 e2       	ldi	r24, 0x22	; 34
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 214:	84 e2       	ldi	r24, 0x24	; 36
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	10 82       	st	Z, r1
	
	state = Start;
 226:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 22a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while (1) {
		Tick();
 22e:	46 df       	rcall	.-372    	; 0xbc <Tick>
	}
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x32>

00000232 <__tablejump2__>:
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	00 24       	eor	r0, r0
 238:	00 1c       	adc	r0, r0
 23a:	0b be       	out	0x3b, r0	; 59
 23c:	07 90       	elpm	r0, Z+
 23e:	f6 91       	elpm	r31, Z
 240:	e0 2d       	mov	r30, r0
 242:	09 94       	ijmp

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
