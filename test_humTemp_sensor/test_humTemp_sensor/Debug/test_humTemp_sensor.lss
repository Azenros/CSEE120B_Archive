
test_humTemp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800110  00800110  00001050  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3b  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bc  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  0000279b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fc  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000613  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c1       	rjmp	.+844    	; 0x382 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 35       	cpi	r26, 0x56	; 86
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e8 d2       	rcall	.+1488   	; 0x694 <main>
  c4:	71 c7       	rjmp	.+3810   	; 0xfa8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac d0       	rcall	.+344    	; 0x242 <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a1 d0       	rcall	.+322    	; 0x242 <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	73 d0       	rcall	.+230    	; 0x242 <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	44 d0       	rcall	.+136    	; 0x242 <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_DisplayString>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_DisplayString+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <LCD_DisplayString+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
 1d6:	78 df       	rcall	.-272    	; 0xc8 <LCD_ClearScreen>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <LCD_DisplayString+0x38>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	18 d0       	rcall	.+48     	; 0x218 <LCD_Cursor>
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	9c 01       	movw	r18, r24
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	3c 83       	std	Y+4, r19	; 0x04
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	b5 df       	rcall	.-150    	; 0x166 <LCD_WriteData>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f7       	brne	.-42     	; 0x1de <LCD_DisplayString+0x1a>
 208:	00 00       	nop
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_Cursor>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	20 f4       	brcc	.+8      	; 0x232 <LCD_Cursor+0x1a>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 58       	subi	r24, 0x81	; 129
 22e:	6c df       	rcall	.-296    	; 0x108 <LCD_WriteCommand>
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCD_Cursor+0x20>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 55       	subi	r24, 0x51	; 81
 236:	68 df       	rcall	.-304    	; 0x108 <LCD_WriteCommand>
 238:	00 00       	nop
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <delay_ms>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <delay_ms+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <delay_ms+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	13 c0       	rjmp	.+38     	; 0x280 <delay_ms+0x3e>
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	06 c0       	rjmp	.+12     	; 0x26c <delay_ms+0x2a>
 260:	00 00       	nop
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	87 30       	cpi	r24, 0x07	; 7
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	ac f3       	brlt	.-22     	; 0x260 <delay_ms+0x1e>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	34 f3       	brlt	.-52     	; 0x25a <delay_ms+0x18>
 28e:	00 00       	nop
 290:	26 96       	adiw	r28, 0x06	; 6
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <TimerSet>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <TimerSet+0x6>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <TimerSet+0x8>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	69 83       	std	Y+1, r22	; 0x01
 2b0:	7a 83       	std	Y+2, r23	; 0x02
 2b2:	8b 83       	std	Y+3, r24	; 0x03
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	ab 81       	ldd	r26, Y+3	; 0x03
 2bc:	bc 81       	ldd	r27, Y+4	; 0x04
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2c6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2ca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2de:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 2e2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 2e6:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 2ea:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 2ee:	00 00       	nop
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <TimerOn>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	81 e8       	ldi	r24, 0x81	; 129
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2b e0       	ldi	r18, 0x0B	; 11
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
 310:	88 e8       	ldi	r24, 0x88	; 136
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2d e7       	ldi	r18, 0x7D	; 125
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	31 83       	std	Z+1, r19	; 0x01
 31c:	20 83       	st	Z, r18
 31e:	8f e6       	ldi	r24, 0x6F	; 111
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	22 e0       	ldi	r18, 0x02	; 2
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	11 82       	std	Z+1, r1	; 0x01
 330:	10 82       	st	Z, r1
 332:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 336:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 33a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 33e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 342:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 346:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 34a:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 34e:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 352:	8f e5       	ldi	r24, 0x5F	; 95
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2f e5       	ldi	r18, 0x5F	; 95
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	20 68       	ori	r18, 0x80	; 128
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
 364:	00 00       	nop
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <TimerISR>:

void TimerISR() {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 37a:	00 00       	nop
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 392:	0f 92       	push	r0
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 3b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 3b8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 3bc:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 3c0:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	a1 09       	sbc	r26, r1
 3c8:	b1 09       	sbc	r27, r1
 3ca:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 3ce:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 3d2:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 3d6:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 3da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 3de:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 3e2:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 3e6:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	89 f4       	brne	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		TimerISR(); 				// Call the ISR that the user uses
 3f2:	bc df       	rcall	.-136    	; 0x36c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 3f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 400:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 404:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 408:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 40c:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 410:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	}
}
 414:	00 00       	nop
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 438:	0f 90       	pop	r0
 43a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <ADC_init>:
#include "io.c"
#include "bit.h"
#include "timer.h"


void ADC_init() {
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 44c:	8a e7       	ldi	r24, 0x7A	; 122
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	2a e7       	ldi	r18, 0x7A	; 122
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	20 81       	ld	r18, Z
 458:	20 6e       	ori	r18, 0xE0	; 224
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}
 45e:	00 00       	nop
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <ADC_Read>:
int ADC_Read(char channel)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 d0       	rcall	.+0      	; 0x46c <ADC_Read+0x6>
 46c:	1f 92       	push	r1
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	8b 83       	std	Y+3, r24	; 0x03
	int ADC_value;
	
	ADMUX = (0x40) | (channel & 0x0F);/* set input channel to read */
 474:	8c e7       	ldi	r24, 0x7C	; 124
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	2b 81       	ldd	r18, Y+3	; 0x03
 47a:	2f 70       	andi	r18, 0x0F	; 15
 47c:	20 64       	ori	r18, 0x40	; 64
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);	/* start conversion */
 482:	8a e7       	ldi	r24, 0x7A	; 122
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	2a e7       	ldi	r18, 0x7A	; 122
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	f9 01       	movw	r30, r18
 48c:	20 81       	ld	r18, Z
 48e:	20 64       	ori	r18, 0x40	; 64
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	while((ADCSRA &(1<<ADIF))== 0);	/* monitor end of conversion interrupt flag */
 494:	00 00       	nop
 496:	8a e7       	ldi	r24, 0x7A	; 122
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	80 81       	ld	r24, Z
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	80 71       	andi	r24, 0x10	; 16
 4a4:	99 27       	eor	r25, r25
 4a6:	89 2b       	or	r24, r25
 4a8:	b1 f3       	breq	.-20     	; 0x496 <ADC_Read+0x30>
	
	ADCSRA |= (1<<ADIF);	/* clear interrupt flag */
 4aa:	8a e7       	ldi	r24, 0x7A	; 122
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	2a e7       	ldi	r18, 0x7A	; 122
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	20 61       	ori	r18, 0x10	; 16
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
	ADC_value = (int)ADCL;	/* read lower byte */
 4bc:	88 e7       	ldi	r24, 0x78	; 120
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	80 81       	ld	r24, Z
 4c4:	88 2f       	mov	r24, r24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	9a 83       	std	Y+2, r25	; 0x02
 4ca:	89 83       	std	Y+1, r24	; 0x01
	ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */
 4cc:	89 e7       	ldi	r24, 0x79	; 121
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	88 2f       	mov	r24, r24
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	98 2f       	mov	r25, r24
 4da:	88 27       	eor	r24, r24
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	3a 81       	ldd	r19, Y+2	; 0x02
 4e0:	82 0f       	add	r24, r18
 4e2:	93 1f       	adc	r25, r19
 4e4:	9a 83       	std	Y+2, r25	; 0x02
 4e6:	89 83       	std	Y+1, r24	; 0x01

	return ADC_value;		/* return digital value */
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <findGCD>:
unsigned long int findGCD(unsigned long int a, unsigned long int b) { 
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	2c 97       	sbiw	r28, 0x0c	; 12
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	6d 83       	std	Y+5, r22	; 0x05
 50e:	7e 83       	std	Y+6, r23	; 0x06
 510:	8f 83       	std	Y+7, r24	; 0x07
 512:	98 87       	std	Y+8, r25	; 0x08
 514:	29 87       	std	Y+9, r18	; 0x09
 516:	3a 87       	std	Y+10, r19	; 0x0a
 518:	4b 87       	std	Y+11, r20	; 0x0b
 51a:	5c 87       	std	Y+12, r21	; 0x0c
	//--------Find GCD function --------------------------------------------------
	unsigned long int c;
	while(1){
		c = a%b;
 51c:	8d 81       	ldd	r24, Y+5	; 0x05
 51e:	9e 81       	ldd	r25, Y+6	; 0x06
 520:	af 81       	ldd	r26, Y+7	; 0x07
 522:	b8 85       	ldd	r27, Y+8	; 0x08
 524:	29 85       	ldd	r18, Y+9	; 0x09
 526:	3a 85       	ldd	r19, Y+10	; 0x0a
 528:	4b 85       	ldd	r20, Y+11	; 0x0b
 52a:	5c 85       	ldd	r21, Y+12	; 0x0c
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	3e d2       	rcall	.+1148   	; 0x9ae <__udivmodsi4>
 532:	dc 01       	movw	r26, r24
 534:	cb 01       	movw	r24, r22
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	9a 83       	std	Y+2, r25	; 0x02
 53a:	ab 83       	std	Y+3, r26	; 0x03
 53c:	bc 83       	std	Y+4, r27	; 0x04
		if(c==0){return b;}
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	ab 81       	ldd	r26, Y+3	; 0x03
 544:	bc 81       	ldd	r27, Y+4	; 0x04
 546:	89 2b       	or	r24, r25
 548:	8a 2b       	or	r24, r26
 54a:	8b 2b       	or	r24, r27
 54c:	29 f4       	brne	.+10     	; 0x558 <findGCD+0x60>
 54e:	89 85       	ldd	r24, Y+9	; 0x09
 550:	9a 85       	ldd	r25, Y+10	; 0x0a
 552:	ab 85       	ldd	r26, Y+11	; 0x0b
 554:	bc 85       	ldd	r27, Y+12	; 0x0c
 556:	11 c0       	rjmp	.+34     	; 0x57a <findGCD+0x82>
		a = b;
 558:	89 85       	ldd	r24, Y+9	; 0x09
 55a:	9a 85       	ldd	r25, Y+10	; 0x0a
 55c:	ab 85       	ldd	r26, Y+11	; 0x0b
 55e:	bc 85       	ldd	r27, Y+12	; 0x0c
 560:	8d 83       	std	Y+5, r24	; 0x05
 562:	9e 83       	std	Y+6, r25	; 0x06
 564:	af 83       	std	Y+7, r26	; 0x07
 566:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	ab 81       	ldd	r26, Y+3	; 0x03
 56e:	bc 81       	ldd	r27, Y+4	; 0x04
 570:	89 87       	std	Y+9, r24	; 0x09
 572:	9a 87       	std	Y+10, r25	; 0x0a
 574:	ab 87       	std	Y+11, r26	; 0x0b
 576:	bc 87       	std	Y+12, r27	; 0x0c
	}
 578:	d1 cf       	rjmp	.-94     	; 0x51c <findGCD+0x24>
	return 0;
	//--------End find GCD function ----------------------------------------------
	
}
 57a:	bc 01       	movw	r22, r24
 57c:	cd 01       	movw	r24, r26
 57e:	2c 96       	adiw	r28, 0x0c	; 12
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <SMTick1>:
	
char buffer[40];
int ADC_Value; 
unsigned char change;

int SMTick1(int state) {
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	00 d0       	rcall	.+0      	; 0x596 <SMTick1+0x6>
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	9a 83       	std	Y+2, r25	; 0x02
 59c:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	9a 81       	ldd	r25, Y+2	; 0x02
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	19 f0       	breq	.+6      	; 0x5ac <SMTick1+0x1c>
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	49 f0       	breq	.+18     	; 0x5bc <SMTick1+0x2c>
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <SMTick1+0x26>
		case SM1_Start: state = SM1_Read; break;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	9a 83       	std	Y+2, r25	; 0x02
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <SMTick1+0x2e>
		case SM1_Read: break;
		default: state = SM1_Start; break;
 5b6:	1a 82       	std	Y+2, r1	; 0x02
 5b8:	19 82       	std	Y+1, r1	; 0x01
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <SMTick1+0x2e>
unsigned char change;

int SMTick1(int state) {
	switch (state) {
		case SM1_Start: state = SM1_Read; break;
		case SM1_Read: break;
 5bc:	00 00       	nop
		default: state = SM1_Start; break;
	}
	switch (state) {
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	71 f0       	breq	.+28     	; 0x5e2 <SMTick1+0x52>
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <SMTick1+0x3c>
		case SM1_Read:
			if (change == 0x10) {
				ADC_Value = ADC_Read(0);
			}
			break;
		default: break;
 5ca:	0e c0       	rjmp	.+28     	; 0x5e8 <SMTick1+0x58>
	switch (state) {
		case SM1_Start: 
			
			break;
		case SM1_Read:
			if (change == 0x10) {
 5cc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <change>
 5d0:	80 31       	cpi	r24, 0x10	; 16
 5d2:	49 f4       	brne	.+18     	; 0x5e6 <SMTick1+0x56>
				ADC_Value = ADC_Read(0);
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	47 df       	rcall	.-370    	; 0x466 <ADC_Read>
 5d8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <ADC_Value+0x1>
 5dc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <ADC_Value>
			}
			break;
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <SMTick1+0x56>
		default: state = SM1_Start; break;
	}
	switch (state) {
		case SM1_Start: 
			
			break;
 5e2:	00 00       	nop
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <SMTick1+0x58>
		case SM1_Read:
			if (change == 0x10) {
				ADC_Value = ADC_Read(0);
			}
			break;
 5e6:	00 00       	nop
		default: break;
	}
	return state;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <SMTick2>:
int SMTick2(int state) {
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <SMTick2+0x6>
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	9a 83       	std	Y+2, r25	; 0x02
 602:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	9a 81       	ldd	r25, Y+2	; 0x02
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	19 f0       	breq	.+6      	; 0x612 <SMTick2+0x1c>
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	49 f0       	breq	.+18     	; 0x622 <SMTick2+0x2c>
 610:	05 c0       	rjmp	.+10     	; 0x61c <SMTick2+0x26>
		case SM2_Start: state = SM2_Display; break;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	9a 83       	std	Y+2, r25	; 0x02
 618:	89 83       	std	Y+1, r24	; 0x01
 61a:	04 c0       	rjmp	.+8      	; 0x624 <SMTick2+0x2e>
		case SM2_Display: break;
		default: state = SM2_Start; break;
 61c:	1a 82       	std	Y+2, r1	; 0x02
 61e:	19 82       	std	Y+1, r1	; 0x01
 620:	01 c0       	rjmp	.+2      	; 0x624 <SMTick2+0x2e>
	return state;
}
int SMTick2(int state) {
	switch(state) {
		case SM2_Start: state = SM2_Display; break;
		case SM2_Display: break;
 622:	00 00       	nop
		default: state = SM2_Start; break;
	}
	switch (state) {
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	51 f1       	breq	.+84     	; 0x680 <SMTick2+0x8a>
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	09 f0       	breq	.+2      	; 0x632 <SMTick2+0x3c>
				LCD_DisplayString(7, buffer);
				//LCD_Cursor(7);
				//LCD_WriteData(ADC_Value);
				change = 0;
			}
		default: break;
 630:	29 c0       	rjmp	.+82     	; 0x684 <SMTick2+0x8e>
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
		case SM2_Display:
			if (change == 0x10) {
 632:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <change>
 636:	80 31       	cpi	r24, 0x10	; 16
 638:	29 f5       	brne	.+74     	; 0x684 <SMTick2+0x8e>
				sprintf(buffer, "%d", ADC_Value);
 63a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ADC_Value>
 63e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ADC_Value+0x1>
 642:	29 2f       	mov	r18, r25
 644:	2f 93       	push	r18
 646:	8f 93       	push	r24
 648:	84 e0       	ldi	r24, 0x04	; 4
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	89 2f       	mov	r24, r25
 64e:	8f 93       	push	r24
 650:	84 e0       	ldi	r24, 0x04	; 4
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	8f 93       	push	r24
 656:	8e e2       	ldi	r24, 0x2E	; 46
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	89 2f       	mov	r24, r25
 65c:	8f 93       	push	r24
 65e:	8e e2       	ldi	r24, 0x2E	; 46
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	8f 93       	push	r24
 664:	c6 d1       	rcall	.+908    	; 0x9f2 <sprintf>
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
				LCD_DisplayString(7, buffer);
 672:	6e e2       	ldi	r22, 0x2E	; 46
 674:	71 e0       	ldi	r23, 0x01	; 1
 676:	87 e0       	ldi	r24, 0x07	; 7
 678:	a5 dd       	rcall	.-1206   	; 0x1c4 <LCD_DisplayString>
				//LCD_Cursor(7);
				//LCD_WriteData(ADC_Value);
				change = 0;
 67a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <change>
			}
		default: break;
 67e:	02 c0       	rjmp	.+4      	; 0x684 <SMTick2+0x8e>
		case SM2_Start: state = SM2_Display; break;
		case SM2_Display: break;
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
 680:	00 00       	nop
 682:	01 c0       	rjmp	.+2      	; 0x686 <SMTick2+0x90>
				LCD_DisplayString(7, buffer);
				//LCD_Cursor(7);
				//LCD_WriteData(ADC_Value);
				change = 0;
			}
		default: break;
 684:	00 00       	nop
	}
	return state;
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	9a 81       	ldd	r25, Y+2	; 0x02
}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	08 95       	ret

00000694 <main>:
	

int main(void) {
 694:	0f 93       	push	r16
 696:	1f 93       	push	r17
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
 6a0:	a0 97       	sbiw	r28, 0x20	; 32
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	f8 94       	cli
 6a6:	de bf       	out	0x3e, r29	; 62
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0x10; // Analog input
 6ac:	81 e2       	ldi	r24, 0x21	; 33
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	fc 01       	movw	r30, r24
 6b2:	10 82       	st	Z, r1
 6b4:	82 e2       	ldi	r24, 0x22	; 34
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	20 e1       	ldi	r18, 0x10	; 16
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // LCD output
 6be:	87 e2       	ldi	r24, 0x27	; 39
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 83       	st	Z, r18
 6c8:	88 e2       	ldi	r24, 0x28	; 40
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	fc 01       	movw	r30, r24
 6ce:	10 82       	st	Z, r1
	DDRD = 0xFF, PORTD = 0x00; //LCD output (PD6-7)
 6d0:	8a e2       	ldi	r24, 0x2A	; 42
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	fc 01       	movw	r30, r24
 6d8:	20 83       	st	Z, r18
 6da:	8b e2       	ldi	r24, 0x2B	; 43
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	fc 01       	movw	r30, r24
 6e0:	10 82       	st	Z, r1
	// . . . etc

	// Period for the tasks
	unsigned long int SMTick1_calc = 1000;
 6e2:	88 ee       	ldi	r24, 0xE8	; 232
 6e4:	93 e0       	ldi	r25, 0x03	; 3
 6e6:	a0 e0       	ldi	r26, 0x00	; 0
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	8b 83       	std	Y+3, r24	; 0x03
 6ec:	9c 83       	std	Y+4, r25	; 0x04
 6ee:	ad 83       	std	Y+5, r26	; 0x05
 6f0:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 1000;
 6f2:	88 ee       	ldi	r24, 0xE8	; 232
 6f4:	93 e0       	ldi	r25, 0x03	; 3
 6f6:	a0 e0       	ldi	r26, 0x00	; 0
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	8f 83       	std	Y+7, r24	; 0x07
 6fc:	98 87       	std	Y+8, r25	; 0x08
 6fe:	a9 87       	std	Y+9, r26	; 0x09
 700:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick4_calc = 100;
	unsigned long int SMTick5_calc = 60;
	*/

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	8b 87       	std	Y+11, r24	; 0x0b
 70c:	9c 87       	std	Y+12, r25	; 0x0c
 70e:	ad 87       	std	Y+13, r26	; 0x0d
 710:	be 87       	std	Y+14, r27	; 0x0e
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
 712:	2f 81       	ldd	r18, Y+7	; 0x07
 714:	38 85       	ldd	r19, Y+8	; 0x08
 716:	49 85       	ldd	r20, Y+9	; 0x09
 718:	5a 85       	ldd	r21, Y+10	; 0x0a
 71a:	8b 81       	ldd	r24, Y+3	; 0x03
 71c:	9c 81       	ldd	r25, Y+4	; 0x04
 71e:	ad 81       	ldd	r26, Y+5	; 0x05
 720:	be 81       	ldd	r27, Y+6	; 0x06
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	e8 de       	rcall	.-560    	; 0x4f8 <findGCD>
 728:	dc 01       	movw	r26, r24
 72a:	cb 01       	movw	r24, r22
 72c:	8b 87       	std	Y+11, r24	; 0x0b
 72e:	9c 87       	std	Y+12, r25	; 0x0c
 730:	ad 87       	std	Y+13, r26	; 0x0d
 732:	be 87       	std	Y+14, r27	; 0x0e
	//tmpGCD = findGCD(tmpGCD, SMTick3_calc);
	//tmpGCD = findGCD(tmpGCD, SMTick4_calc);
	//tmpGCD = findGCD(tmpGCD, SMTick5_calc);

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 734:	8b 85       	ldd	r24, Y+11	; 0x0b
 736:	9c 85       	ldd	r25, Y+12	; 0x0c
 738:	ad 85       	ldd	r26, Y+13	; 0x0d
 73a:	be 85       	ldd	r27, Y+14	; 0x0e
 73c:	8f 87       	std	Y+15, r24	; 0x0f
 73e:	98 8b       	std	Y+16, r25	; 0x10
 740:	a9 8b       	std	Y+17, r26	; 0x11
 742:	ba 8b       	std	Y+18, r27	; 0x12

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	9c 81       	ldd	r25, Y+4	; 0x04
 748:	ad 81       	ldd	r26, Y+5	; 0x05
 74a:	be 81       	ldd	r27, Y+6	; 0x06
 74c:	2f 85       	ldd	r18, Y+15	; 0x0f
 74e:	38 89       	ldd	r19, Y+16	; 0x10
 750:	49 89       	ldd	r20, Y+17	; 0x11
 752:	5a 89       	ldd	r21, Y+18	; 0x12
 754:	bc 01       	movw	r22, r24
 756:	cd 01       	movw	r24, r26
 758:	2a d1       	rcall	.+596    	; 0x9ae <__udivmodsi4>
 75a:	da 01       	movw	r26, r20
 75c:	c9 01       	movw	r24, r18
 75e:	8b 8b       	std	Y+19, r24	; 0x13
 760:	9c 8b       	std	Y+20, r25	; 0x14
 762:	ad 8b       	std	Y+21, r26	; 0x15
 764:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 766:	8f 81       	ldd	r24, Y+7	; 0x07
 768:	98 85       	ldd	r25, Y+8	; 0x08
 76a:	a9 85       	ldd	r26, Y+9	; 0x09
 76c:	ba 85       	ldd	r27, Y+10	; 0x0a
 76e:	2f 85       	ldd	r18, Y+15	; 0x0f
 770:	38 89       	ldd	r19, Y+16	; 0x10
 772:	49 89       	ldd	r20, Y+17	; 0x11
 774:	5a 89       	ldd	r21, Y+18	; 0x12
 776:	bc 01       	movw	r22, r24
 778:	cd 01       	movw	r24, r26
 77a:	19 d1       	rcall	.+562    	; 0x9ae <__udivmodsi4>
 77c:	da 01       	movw	r26, r20
 77e:	c9 01       	movw	r24, r18
 780:	8f 8b       	std	Y+23, r24	; 0x17
 782:	98 8f       	std	Y+24, r25	; 0x18
 784:	a9 8f       	std	Y+25, r26	; 0x19
 786:	ba 8f       	std	Y+26, r27	; 0x1a
	//unsigned long int SMTick5_period = SMTick5_calc/GCD;


	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 788:	85 e1       	ldi	r24, 0x15	; 21
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	9e 8f       	std	Y+30, r25	; 0x1e
 78e:	8d 8f       	std	Y+29, r24	; 0x1d
 790:	80 e2       	ldi	r24, 0x20	; 32
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	98 a3       	std	Y+32, r25	; 0x20
 796:	8f 8f       	std	Y+31, r24	; 0x1f
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	9c 8f       	std	Y+28, r25	; 0x1c
 79e:	8b 8f       	std	Y+27, r24	; 0x1b

	// Task 1
	task1.state = -1;//Task initial state.
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <task1.2064>
	task1.period = SMTick1_period;//Task Period.
 7a6:	8b 89       	ldd	r24, Y+19	; 0x13
 7a8:	9c 89       	ldd	r25, Y+20	; 0x14
 7aa:	ad 89       	ldd	r26, Y+21	; 0x15
 7ac:	be 89       	ldd	r27, Y+22	; 0x16
 7ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <task1.2064+0x1>
 7b2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <task1.2064+0x2>
 7b6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <task1.2064+0x3>
 7ba:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <task1.2064+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 7be:	8b 89       	ldd	r24, Y+19	; 0x13
 7c0:	9c 89       	ldd	r25, Y+20	; 0x14
 7c2:	ad 89       	ldd	r26, Y+21	; 0x15
 7c4:	be 89       	ldd	r27, Y+22	; 0x16
 7c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <task1.2064+0x5>
 7ca:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <task1.2064+0x6>
 7ce:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <task1.2064+0x7>
 7d2:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <task1.2064+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 7d6:	88 ec       	ldi	r24, 0xC8	; 200
 7d8:	92 e0       	ldi	r25, 0x02	; 2
 7da:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <task1.2064+0xa>
 7de:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <task1.2064+0x9>

	// Task 2
	task2.state = -1;//Task initial state.
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <task2.2065>
	task2.period = SMTick2_period;//Task Period.
 7e8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ea:	98 8d       	ldd	r25, Y+24	; 0x18
 7ec:	a9 8d       	ldd	r26, Y+25	; 0x19
 7ee:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7f0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <task2.2065+0x1>
 7f4:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <task2.2065+0x2>
 7f8:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <task2.2065+0x3>
 7fc:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <task2.2065+0x4>
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 800:	8f 89       	ldd	r24, Y+23	; 0x17
 802:	98 8d       	ldd	r25, Y+24	; 0x18
 804:	a9 8d       	ldd	r26, Y+25	; 0x19
 806:	ba 8d       	ldd	r27, Y+26	; 0x1a
 808:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <task2.2065+0x5>
 80c:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <task2.2065+0x6>
 810:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <task2.2065+0x7>
 814:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <task2.2065+0x8>
	task2.TickFct = &SMTick2;//Function pointer for the tick
 818:	8b ef       	ldi	r24, 0xFB	; 251
 81a:	92 e0       	ldi	r25, 0x02	; 2
 81c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <task2.2065+0xa>
 820:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <task2.2065+0x9>
	task5.TickFct = &SMTick5;//Function pointer for the tick
	
*/

	// Set the timer and turn it on
	TimerSet(GCD);
 824:	8f 85       	ldd	r24, Y+15	; 0x0f
 826:	98 89       	ldd	r25, Y+16	; 0x10
 828:	a9 89       	ldd	r26, Y+17	; 0x11
 82a:	ba 89       	ldd	r27, Y+18	; 0x12
 82c:	bc 01       	movw	r22, r24
	TimerOn();
 82e:	cd 01       	movw	r24, r26
 830:	38 dd       	rcall	.-1424   	; 0x2a2 <TimerSet>
	
	// Start or reset the LCD screen
	LCD_init();
 832:	65 dd       	rcall	.-1334   	; 0x2fe <TimerOn>
	LCD_ClearScreen();
 834:	53 dc       	rcall	.-1882   	; 0xdc <LCD_init>
 836:	48 dc       	rcall	.-1904   	; 0xc8 <LCD_ClearScreen>
	
	ADC_init();
 838:	05 de       	rcall	.-1014   	; 0x444 <ADC_init>
 83a:	67 e0       	ldi	r22, 0x07	; 7
	LCD_DisplayString(1, "Temp: ?");
 83c:	71 e0       	ldi	r23, 0x01	; 1
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	c1 dc       	rcall	.-1662   	; 0x1c4 <LCD_DisplayString>
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	90 e0       	ldi	r25, 0x00	; 0
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		change = ~PINA & 0x10;
 846:	fc 01       	movw	r30, r24
 848:	80 81       	ld	r24, Z
 84a:	80 95       	com	r24
 84c:	80 71       	andi	r24, 0x10	; 16
 84e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <change>
 852:	1a 82       	std	Y+2, r1	; 0x02
 854:	19 82       	std	Y+1, r1	; 0x01
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 856:	9b c0       	rjmp	.+310    	; 0x98e <main+0x2fa>
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	9a 81       	ldd	r25, Y+2	; 0x02
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	9e 01       	movw	r18, r28
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	82 0f       	add	r24, r18
 868:	93 1f       	adc	r25, r19
 86a:	4c 96       	adiw	r24, 0x1c	; 28
 86c:	fc 01       	movw	r30, r24
 86e:	80 81       	ld	r24, Z
 870:	91 81       	ldd	r25, Z+1	; 0x01
 872:	fc 01       	movw	r30, r24
 874:	25 81       	ldd	r18, Z+5	; 0x05
 876:	36 81       	ldd	r19, Z+6	; 0x06
 878:	47 81       	ldd	r20, Z+7	; 0x07
 87a:	50 85       	ldd	r21, Z+8	; 0x08
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	9a 81       	ldd	r25, Y+2	; 0x02
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	be 01       	movw	r22, r28
 886:	6f 5f       	subi	r22, 0xFF	; 255
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	86 0f       	add	r24, r22
 88c:	97 1f       	adc	r25, r23
 88e:	4c 96       	adiw	r24, 0x1c	; 28
 890:	fc 01       	movw	r30, r24
 892:	80 81       	ld	r24, Z
 894:	91 81       	ldd	r25, Z+1	; 0x01
 896:	fc 01       	movw	r30, r24
 898:	81 81       	ldd	r24, Z+1	; 0x01
 89a:	92 81       	ldd	r25, Z+2	; 0x02
 89c:	a3 81       	ldd	r26, Z+3	; 0x03
 89e:	b4 81       	ldd	r27, Z+4	; 0x04
 8a0:	28 17       	cp	r18, r24
 8a2:	39 07       	cpc	r19, r25
 8a4:	4a 07       	cpc	r20, r26
 8a6:	5b 07       	cpc	r21, r27
 8a8:	09 f0       	breq	.+2      	; 0x8ac <main+0x218>
 8aa:	45 c0       	rjmp	.+138    	; 0x936 <main+0x2a2>
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	9a 81       	ldd	r25, Y+2	; 0x02
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	9e 01       	movw	r18, r28
 8b6:	2f 5f       	subi	r18, 0xFF	; 255
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	82 0f       	add	r24, r18
 8bc:	93 1f       	adc	r25, r19
 8be:	4c 96       	adiw	r24, 0x1c	; 28
 8c0:	fc 01       	movw	r30, r24
 8c2:	00 81       	ld	r16, Z
 8c4:	11 81       	ldd	r17, Z+1	; 0x01
 8c6:	89 81       	ldd	r24, Y+1	; 0x01
 8c8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	9e 01       	movw	r18, r28
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
 8d4:	82 0f       	add	r24, r18
 8d6:	93 1f       	adc	r25, r19
 8d8:	4c 96       	adiw	r24, 0x1c	; 28
 8da:	fc 01       	movw	r30, r24
 8dc:	80 81       	ld	r24, Z
 8de:	91 81       	ldd	r25, Z+1	; 0x01
 8e0:	fc 01       	movw	r30, r24
 8e2:	21 85       	ldd	r18, Z+9	; 0x09
 8e4:	32 85       	ldd	r19, Z+10	; 0x0a
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	ae 01       	movw	r20, r28
 8f0:	4f 5f       	subi	r20, 0xFF	; 255
 8f2:	5f 4f       	sbci	r21, 0xFF	; 255
 8f4:	84 0f       	add	r24, r20
 8f6:	95 1f       	adc	r25, r21
 8f8:	4c 96       	adiw	r24, 0x1c	; 28
 8fa:	fc 01       	movw	r30, r24
 8fc:	80 81       	ld	r24, Z
 8fe:	91 81       	ldd	r25, Z+1	; 0x01
 900:	fc 01       	movw	r30, r24
 902:	80 81       	ld	r24, Z
 904:	08 2e       	mov	r0, r24
 906:	00 0c       	add	r0, r0
 908:	99 0b       	sbc	r25, r25
 90a:	f9 01       	movw	r30, r18
 90c:	09 95       	icall
 90e:	f8 01       	movw	r30, r16
 910:	80 83       	st	Z, r24
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	9a 81       	ldd	r25, Y+2	; 0x02
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	9e 01       	movw	r18, r28
 91c:	2f 5f       	subi	r18, 0xFF	; 255
 91e:	3f 4f       	sbci	r19, 0xFF	; 255
 920:	82 0f       	add	r24, r18
 922:	93 1f       	adc	r25, r19
 924:	4c 96       	adiw	r24, 0x1c	; 28
 926:	fc 01       	movw	r30, r24
 928:	80 81       	ld	r24, Z
 92a:	91 81       	ldd	r25, Z+1	; 0x01
 92c:	fc 01       	movw	r30, r24
 92e:	15 82       	std	Z+5, r1	; 0x05
 930:	16 82       	std	Z+6, r1	; 0x06
 932:	17 82       	std	Z+7, r1	; 0x07
 934:	10 86       	std	Z+8, r1	; 0x08
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	9a 81       	ldd	r25, Y+2	; 0x02
			}
			tasks[i]->elapsedTime += 1;
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	9e 01       	movw	r18, r28
 940:	2f 5f       	subi	r18, 0xFF	; 255
 942:	3f 4f       	sbci	r19, 0xFF	; 255
 944:	82 0f       	add	r24, r18
 946:	93 1f       	adc	r25, r19
 948:	4c 96       	adiw	r24, 0x1c	; 28
 94a:	fc 01       	movw	r30, r24
 94c:	20 81       	ld	r18, Z
 94e:	31 81       	ldd	r19, Z+1	; 0x01
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	9a 81       	ldd	r25, Y+2	; 0x02
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	ae 01       	movw	r20, r28
 95a:	4f 5f       	subi	r20, 0xFF	; 255
 95c:	5f 4f       	sbci	r21, 0xFF	; 255
 95e:	84 0f       	add	r24, r20
 960:	95 1f       	adc	r25, r21
 962:	4c 96       	adiw	r24, 0x1c	; 28
 964:	fc 01       	movw	r30, r24
 966:	80 81       	ld	r24, Z
 968:	91 81       	ldd	r25, Z+1	; 0x01
 96a:	fc 01       	movw	r30, r24
 96c:	85 81       	ldd	r24, Z+5	; 0x05
 96e:	96 81       	ldd	r25, Z+6	; 0x06
 970:	a7 81       	ldd	r26, Z+7	; 0x07
 972:	b0 85       	ldd	r27, Z+8	; 0x08
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	a1 1d       	adc	r26, r1
 978:	b1 1d       	adc	r27, r1
 97a:	f9 01       	movw	r30, r18
 97c:	85 83       	std	Z+5, r24	; 0x05
 97e:	96 83       	std	Z+6, r25	; 0x06
 980:	a7 83       	std	Z+7, r26	; 0x07
 982:	b0 87       	std	Z+8, r27	; 0x08
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	9a 81       	ldd	r25, Y+2	; 0x02
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		change = ~PINA & 0x10;
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	9a 83       	std	Y+2, r25	; 0x02
 98c:	89 83       	std	Y+1, r24	; 0x01
 98e:	29 81       	ldd	r18, Y+1	; 0x01
 990:	3a 81       	ldd	r19, Y+2	; 0x02
 992:	8b 8d       	ldd	r24, Y+27	; 0x1b
 994:	9c 8d       	ldd	r25, Y+28	; 0x1c
 996:	28 17       	cp	r18, r24
 998:	39 07       	cpc	r19, r25
 99a:	08 f4       	brcc	.+2      	; 0x99e <main+0x30a>
 99c:	5d cf       	rjmp	.-326    	; 0x858 <main+0x1c4>
 99e:	00 00       	nop
 9a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 9a4:	88 23       	and	r24, r24
 9a6:	e1 f3       	breq	.-8      	; 0x9a0 <main+0x30c>
 9a8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		TimerFlag = 0;
 9ac:	4a cf       	rjmp	.-364    	; 0x842 <main+0x1ae>

000009ae <__udivmodsi4>:
 9ae:	a1 e2       	ldi	r26, 0x21	; 33
	}
 9b0:	1a 2e       	mov	r1, r26
 9b2:	aa 1b       	sub	r26, r26
 9b4:	bb 1b       	sub	r27, r27
 9b6:	fd 01       	movw	r30, r26
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <__udivmodsi4_ep>

000009ba <__udivmodsi4_loop>:
 9ba:	aa 1f       	adc	r26, r26
 9bc:	bb 1f       	adc	r27, r27
 9be:	ee 1f       	adc	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	a2 17       	cp	r26, r18
 9c4:	b3 07       	cpc	r27, r19
 9c6:	e4 07       	cpc	r30, r20
 9c8:	f5 07       	cpc	r31, r21
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__udivmodsi4_ep>
 9cc:	a2 1b       	sub	r26, r18
 9ce:	b3 0b       	sbc	r27, r19
 9d0:	e4 0b       	sbc	r30, r20
 9d2:	f5 0b       	sbc	r31, r21

000009d4 <__udivmodsi4_ep>:
 9d4:	66 1f       	adc	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	1a 94       	dec	r1
 9de:	69 f7       	brne	.-38     	; 0x9ba <__udivmodsi4_loop>
 9e0:	60 95       	com	r22
 9e2:	70 95       	com	r23
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	9b 01       	movw	r18, r22
 9ea:	ac 01       	movw	r20, r24
 9ec:	bd 01       	movw	r22, r26
 9ee:	cf 01       	movw	r24, r30
 9f0:	08 95       	ret

000009f2 <sprintf>:
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	2e 97       	sbiw	r28, 0x0e	; 14
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	f8 94       	cli
 a04:	de bf       	out	0x3e, r29	; 62
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	cd bf       	out	0x3d, r28	; 61
 a0a:	0d 89       	ldd	r16, Y+21	; 0x15
 a0c:	1e 89       	ldd	r17, Y+22	; 0x16
 a0e:	86 e0       	ldi	r24, 0x06	; 6
 a10:	8c 83       	std	Y+4, r24	; 0x04
 a12:	1a 83       	std	Y+2, r17	; 0x02
 a14:	09 83       	std	Y+1, r16	; 0x01
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	9f e7       	ldi	r25, 0x7F	; 127
 a1a:	9e 83       	std	Y+6, r25	; 0x06
 a1c:	8d 83       	std	Y+5, r24	; 0x05
 a1e:	ae 01       	movw	r20, r28
 a20:	47 5e       	subi	r20, 0xE7	; 231
 a22:	5f 4f       	sbci	r21, 0xFF	; 255
 a24:	6f 89       	ldd	r22, Y+23	; 0x17
 a26:	78 8d       	ldd	r23, Y+24	; 0x18
 a28:	ce 01       	movw	r24, r28
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	10 d0       	rcall	.+32     	; 0xa4e <vfprintf>
 a2e:	ef 81       	ldd	r30, Y+7	; 0x07
 a30:	f8 85       	ldd	r31, Y+8	; 0x08
 a32:	e0 0f       	add	r30, r16
 a34:	f1 1f       	adc	r31, r17
 a36:	10 82       	st	Z, r1
 a38:	2e 96       	adiw	r28, 0x0e	; 14
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	f8 94       	cli
 a3e:	de bf       	out	0x3e, r29	; 62
 a40:	0f be       	out	0x3f, r0	; 63
 a42:	cd bf       	out	0x3d, r28	; 61
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	08 95       	ret

00000a4e <vfprintf>:
 a4e:	2f 92       	push	r2
 a50:	3f 92       	push	r3
 a52:	4f 92       	push	r4
 a54:	5f 92       	push	r5
 a56:	6f 92       	push	r6
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	2b 97       	sbiw	r28, 0x0b	; 11
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	f8 94       	cli
 a7c:	de bf       	out	0x3e, r29	; 62
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	cd bf       	out	0x3d, r28	; 61
 a82:	6c 01       	movw	r12, r24
 a84:	7b 01       	movw	r14, r22
 a86:	8a 01       	movw	r16, r20
 a88:	fc 01       	movw	r30, r24
 a8a:	17 82       	std	Z+7, r1	; 0x07
 a8c:	16 82       	std	Z+6, r1	; 0x06
 a8e:	83 81       	ldd	r24, Z+3	; 0x03
 a90:	81 ff       	sbrs	r24, 1
 a92:	bf c1       	rjmp	.+894    	; 0xe12 <vfprintf+0x3c4>
 a94:	ce 01       	movw	r24, r28
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	3c 01       	movw	r6, r24
 a9a:	f6 01       	movw	r30, r12
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	f7 01       	movw	r30, r14
 aa0:	93 fd       	sbrc	r25, 3
 aa2:	85 91       	lpm	r24, Z+
 aa4:	93 ff       	sbrs	r25, 3
 aa6:	81 91       	ld	r24, Z+
 aa8:	7f 01       	movw	r14, r30
 aaa:	88 23       	and	r24, r24
 aac:	09 f4       	brne	.+2      	; 0xab0 <vfprintf+0x62>
 aae:	ad c1       	rjmp	.+858    	; 0xe0a <vfprintf+0x3bc>
 ab0:	85 32       	cpi	r24, 0x25	; 37
 ab2:	39 f4       	brne	.+14     	; 0xac2 <vfprintf+0x74>
 ab4:	93 fd       	sbrc	r25, 3
 ab6:	85 91       	lpm	r24, Z+
 ab8:	93 ff       	sbrs	r25, 3
 aba:	81 91       	ld	r24, Z+
 abc:	7f 01       	movw	r14, r30
 abe:	85 32       	cpi	r24, 0x25	; 37
 ac0:	21 f4       	brne	.+8      	; 0xaca <vfprintf+0x7c>
 ac2:	b6 01       	movw	r22, r12
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	d6 d1       	rcall	.+940    	; 0xe74 <fputc>
 ac8:	e8 cf       	rjmp	.-48     	; 0xa9a <vfprintf+0x4c>
 aca:	91 2c       	mov	r9, r1
 acc:	21 2c       	mov	r2, r1
 ace:	31 2c       	mov	r3, r1
 ad0:	ff e1       	ldi	r31, 0x1F	; 31
 ad2:	f3 15       	cp	r31, r3
 ad4:	d8 f0       	brcs	.+54     	; 0xb0c <vfprintf+0xbe>
 ad6:	8b 32       	cpi	r24, 0x2B	; 43
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <vfprintf+0xaa>
 ada:	38 f4       	brcc	.+14     	; 0xaea <vfprintf+0x9c>
 adc:	80 32       	cpi	r24, 0x20	; 32
 ade:	79 f0       	breq	.+30     	; 0xafe <vfprintf+0xb0>
 ae0:	83 32       	cpi	r24, 0x23	; 35
 ae2:	a1 f4       	brne	.+40     	; 0xb0c <vfprintf+0xbe>
 ae4:	23 2d       	mov	r18, r3
 ae6:	20 61       	ori	r18, 0x10	; 16
 ae8:	1d c0       	rjmp	.+58     	; 0xb24 <vfprintf+0xd6>
 aea:	8d 32       	cpi	r24, 0x2D	; 45
 aec:	61 f0       	breq	.+24     	; 0xb06 <vfprintf+0xb8>
 aee:	80 33       	cpi	r24, 0x30	; 48
 af0:	69 f4       	brne	.+26     	; 0xb0c <vfprintf+0xbe>
 af2:	23 2d       	mov	r18, r3
 af4:	21 60       	ori	r18, 0x01	; 1
 af6:	16 c0       	rjmp	.+44     	; 0xb24 <vfprintf+0xd6>
 af8:	83 2d       	mov	r24, r3
 afa:	82 60       	ori	r24, 0x02	; 2
 afc:	38 2e       	mov	r3, r24
 afe:	e3 2d       	mov	r30, r3
 b00:	e4 60       	ori	r30, 0x04	; 4
 b02:	3e 2e       	mov	r3, r30
 b04:	2a c0       	rjmp	.+84     	; 0xb5a <vfprintf+0x10c>
 b06:	f3 2d       	mov	r31, r3
 b08:	f8 60       	ori	r31, 0x08	; 8
 b0a:	1d c0       	rjmp	.+58     	; 0xb46 <vfprintf+0xf8>
 b0c:	37 fc       	sbrc	r3, 7
 b0e:	2d c0       	rjmp	.+90     	; 0xb6a <vfprintf+0x11c>
 b10:	20 ed       	ldi	r18, 0xD0	; 208
 b12:	28 0f       	add	r18, r24
 b14:	2a 30       	cpi	r18, 0x0A	; 10
 b16:	40 f0       	brcs	.+16     	; 0xb28 <vfprintf+0xda>
 b18:	8e 32       	cpi	r24, 0x2E	; 46
 b1a:	b9 f4       	brne	.+46     	; 0xb4a <vfprintf+0xfc>
 b1c:	36 fc       	sbrc	r3, 6
 b1e:	75 c1       	rjmp	.+746    	; 0xe0a <vfprintf+0x3bc>
 b20:	23 2d       	mov	r18, r3
 b22:	20 64       	ori	r18, 0x40	; 64
 b24:	32 2e       	mov	r3, r18
 b26:	19 c0       	rjmp	.+50     	; 0xb5a <vfprintf+0x10c>
 b28:	36 fe       	sbrs	r3, 6
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <vfprintf+0xea>
 b2c:	8a e0       	ldi	r24, 0x0A	; 10
 b2e:	98 9e       	mul	r9, r24
 b30:	20 0d       	add	r18, r0
 b32:	11 24       	eor	r1, r1
 b34:	92 2e       	mov	r9, r18
 b36:	11 c0       	rjmp	.+34     	; 0xb5a <vfprintf+0x10c>
 b38:	ea e0       	ldi	r30, 0x0A	; 10
 b3a:	2e 9e       	mul	r2, r30
 b3c:	20 0d       	add	r18, r0
 b3e:	11 24       	eor	r1, r1
 b40:	22 2e       	mov	r2, r18
 b42:	f3 2d       	mov	r31, r3
 b44:	f0 62       	ori	r31, 0x20	; 32
 b46:	3f 2e       	mov	r3, r31
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <vfprintf+0x10c>
 b4a:	8c 36       	cpi	r24, 0x6C	; 108
 b4c:	21 f4       	brne	.+8      	; 0xb56 <vfprintf+0x108>
 b4e:	83 2d       	mov	r24, r3
 b50:	80 68       	ori	r24, 0x80	; 128
 b52:	38 2e       	mov	r3, r24
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <vfprintf+0x10c>
 b56:	88 36       	cpi	r24, 0x68	; 104
 b58:	41 f4       	brne	.+16     	; 0xb6a <vfprintf+0x11c>
 b5a:	f7 01       	movw	r30, r14
 b5c:	93 fd       	sbrc	r25, 3
 b5e:	85 91       	lpm	r24, Z+
 b60:	93 ff       	sbrs	r25, 3
 b62:	81 91       	ld	r24, Z+
 b64:	7f 01       	movw	r14, r30
 b66:	81 11       	cpse	r24, r1
 b68:	b3 cf       	rjmp	.-154    	; 0xad0 <vfprintf+0x82>
 b6a:	98 2f       	mov	r25, r24
 b6c:	9f 7d       	andi	r25, 0xDF	; 223
 b6e:	95 54       	subi	r25, 0x45	; 69
 b70:	93 30       	cpi	r25, 0x03	; 3
 b72:	28 f4       	brcc	.+10     	; 0xb7e <vfprintf+0x130>
 b74:	0c 5f       	subi	r16, 0xFC	; 252
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	9f e3       	ldi	r25, 0x3F	; 63
 b7a:	99 83       	std	Y+1, r25	; 0x01
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <vfprintf+0x14a>
 b7e:	83 36       	cpi	r24, 0x63	; 99
 b80:	31 f0       	breq	.+12     	; 0xb8e <vfprintf+0x140>
 b82:	83 37       	cpi	r24, 0x73	; 115
 b84:	71 f0       	breq	.+28     	; 0xba2 <vfprintf+0x154>
 b86:	83 35       	cpi	r24, 0x53	; 83
 b88:	09 f0       	breq	.+2      	; 0xb8c <vfprintf+0x13e>
 b8a:	55 c0       	rjmp	.+170    	; 0xc36 <vfprintf+0x1e8>
 b8c:	20 c0       	rjmp	.+64     	; 0xbce <vfprintf+0x180>
 b8e:	f8 01       	movw	r30, r16
 b90:	80 81       	ld	r24, Z
 b92:	89 83       	std	Y+1, r24	; 0x01
 b94:	0e 5f       	subi	r16, 0xFE	; 254
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	88 24       	eor	r8, r8
 b9a:	83 94       	inc	r8
 b9c:	91 2c       	mov	r9, r1
 b9e:	53 01       	movw	r10, r6
 ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <vfprintf+0x178>
 ba2:	28 01       	movw	r4, r16
 ba4:	f2 e0       	ldi	r31, 0x02	; 2
 ba6:	4f 0e       	add	r4, r31
 ba8:	51 1c       	adc	r5, r1
 baa:	f8 01       	movw	r30, r16
 bac:	a0 80       	ld	r10, Z
 bae:	b1 80       	ldd	r11, Z+1	; 0x01
 bb0:	36 fe       	sbrs	r3, 6
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x16c>
 bb4:	69 2d       	mov	r22, r9
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x170>
 bba:	6f ef       	ldi	r22, 0xFF	; 255
 bbc:	7f ef       	ldi	r23, 0xFF	; 255
 bbe:	c5 01       	movw	r24, r10
 bc0:	4e d1       	rcall	.+668    	; 0xe5e <strnlen>
 bc2:	4c 01       	movw	r8, r24
 bc4:	82 01       	movw	r16, r4
 bc6:	f3 2d       	mov	r31, r3
 bc8:	ff 77       	andi	r31, 0x7F	; 127
 bca:	3f 2e       	mov	r3, r31
 bcc:	15 c0       	rjmp	.+42     	; 0xbf8 <vfprintf+0x1aa>
 bce:	28 01       	movw	r4, r16
 bd0:	22 e0       	ldi	r18, 0x02	; 2
 bd2:	42 0e       	add	r4, r18
 bd4:	51 1c       	adc	r5, r1
 bd6:	f8 01       	movw	r30, r16
 bd8:	a0 80       	ld	r10, Z
 bda:	b1 80       	ldd	r11, Z+1	; 0x01
 bdc:	36 fe       	sbrs	r3, 6
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <vfprintf+0x198>
 be0:	69 2d       	mov	r22, r9
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0x19c>
 be6:	6f ef       	ldi	r22, 0xFF	; 255
 be8:	7f ef       	ldi	r23, 0xFF	; 255
 bea:	c5 01       	movw	r24, r10
 bec:	2d d1       	rcall	.+602    	; 0xe48 <strnlen_P>
 bee:	4c 01       	movw	r8, r24
 bf0:	f3 2d       	mov	r31, r3
 bf2:	f0 68       	ori	r31, 0x80	; 128
 bf4:	3f 2e       	mov	r3, r31
 bf6:	82 01       	movw	r16, r4
 bf8:	33 fc       	sbrc	r3, 3
 bfa:	19 c0       	rjmp	.+50     	; 0xc2e <vfprintf+0x1e0>
 bfc:	82 2d       	mov	r24, r2
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	88 16       	cp	r8, r24
 c02:	99 06       	cpc	r9, r25
 c04:	a0 f4       	brcc	.+40     	; 0xc2e <vfprintf+0x1e0>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	33 d1       	rcall	.+614    	; 0xe74 <fputc>
 c0e:	2a 94       	dec	r2
 c10:	f5 cf       	rjmp	.-22     	; 0xbfc <vfprintf+0x1ae>
 c12:	f5 01       	movw	r30, r10
 c14:	37 fc       	sbrc	r3, 7
 c16:	85 91       	lpm	r24, Z+
 c18:	37 fe       	sbrs	r3, 7
 c1a:	81 91       	ld	r24, Z+
 c1c:	5f 01       	movw	r10, r30
 c1e:	b6 01       	movw	r22, r12
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	28 d1       	rcall	.+592    	; 0xe74 <fputc>
 c24:	21 10       	cpse	r2, r1
 c26:	2a 94       	dec	r2
 c28:	21 e0       	ldi	r18, 0x01	; 1
 c2a:	82 1a       	sub	r8, r18
 c2c:	91 08       	sbc	r9, r1
 c2e:	81 14       	cp	r8, r1
 c30:	91 04       	cpc	r9, r1
 c32:	79 f7       	brne	.-34     	; 0xc12 <vfprintf+0x1c4>
 c34:	e1 c0       	rjmp	.+450    	; 0xdf8 <vfprintf+0x3aa>
 c36:	84 36       	cpi	r24, 0x64	; 100
 c38:	11 f0       	breq	.+4      	; 0xc3e <vfprintf+0x1f0>
 c3a:	89 36       	cpi	r24, 0x69	; 105
 c3c:	39 f5       	brne	.+78     	; 0xc8c <vfprintf+0x23e>
 c3e:	f8 01       	movw	r30, r16
 c40:	37 fe       	sbrs	r3, 7
 c42:	07 c0       	rjmp	.+14     	; 0xc52 <vfprintf+0x204>
 c44:	60 81       	ld	r22, Z
 c46:	71 81       	ldd	r23, Z+1	; 0x01
 c48:	82 81       	ldd	r24, Z+2	; 0x02
 c4a:	93 81       	ldd	r25, Z+3	; 0x03
 c4c:	0c 5f       	subi	r16, 0xFC	; 252
 c4e:	1f 4f       	sbci	r17, 0xFF	; 255
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <vfprintf+0x214>
 c52:	60 81       	ld	r22, Z
 c54:	71 81       	ldd	r23, Z+1	; 0x01
 c56:	07 2e       	mov	r0, r23
 c58:	00 0c       	add	r0, r0
 c5a:	88 0b       	sbc	r24, r24
 c5c:	99 0b       	sbc	r25, r25
 c5e:	0e 5f       	subi	r16, 0xFE	; 254
 c60:	1f 4f       	sbci	r17, 0xFF	; 255
 c62:	f3 2d       	mov	r31, r3
 c64:	ff 76       	andi	r31, 0x6F	; 111
 c66:	3f 2e       	mov	r3, r31
 c68:	97 ff       	sbrs	r25, 7
 c6a:	09 c0       	rjmp	.+18     	; 0xc7e <vfprintf+0x230>
 c6c:	90 95       	com	r25
 c6e:	80 95       	com	r24
 c70:	70 95       	com	r23
 c72:	61 95       	neg	r22
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	f0 68       	ori	r31, 0x80	; 128
 c7c:	3f 2e       	mov	r3, r31
 c7e:	2a e0       	ldi	r18, 0x0A	; 10
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	a3 01       	movw	r20, r6
 c84:	33 d1       	rcall	.+614    	; 0xeec <__ultoa_invert>
 c86:	88 2e       	mov	r8, r24
 c88:	86 18       	sub	r8, r6
 c8a:	44 c0       	rjmp	.+136    	; 0xd14 <vfprintf+0x2c6>
 c8c:	85 37       	cpi	r24, 0x75	; 117
 c8e:	31 f4       	brne	.+12     	; 0xc9c <vfprintf+0x24e>
 c90:	23 2d       	mov	r18, r3
 c92:	2f 7e       	andi	r18, 0xEF	; 239
 c94:	b2 2e       	mov	r11, r18
 c96:	2a e0       	ldi	r18, 0x0A	; 10
 c98:	30 e0       	ldi	r19, 0x00	; 0
 c9a:	25 c0       	rjmp	.+74     	; 0xce6 <vfprintf+0x298>
 c9c:	93 2d       	mov	r25, r3
 c9e:	99 7f       	andi	r25, 0xF9	; 249
 ca0:	b9 2e       	mov	r11, r25
 ca2:	8f 36       	cpi	r24, 0x6F	; 111
 ca4:	c1 f0       	breq	.+48     	; 0xcd6 <vfprintf+0x288>
 ca6:	18 f4       	brcc	.+6      	; 0xcae <vfprintf+0x260>
 ca8:	88 35       	cpi	r24, 0x58	; 88
 caa:	79 f0       	breq	.+30     	; 0xcca <vfprintf+0x27c>
 cac:	ae c0       	rjmp	.+348    	; 0xe0a <vfprintf+0x3bc>
 cae:	80 37       	cpi	r24, 0x70	; 112
 cb0:	19 f0       	breq	.+6      	; 0xcb8 <vfprintf+0x26a>
 cb2:	88 37       	cpi	r24, 0x78	; 120
 cb4:	21 f0       	breq	.+8      	; 0xcbe <vfprintf+0x270>
 cb6:	a9 c0       	rjmp	.+338    	; 0xe0a <vfprintf+0x3bc>
 cb8:	e9 2f       	mov	r30, r25
 cba:	e0 61       	ori	r30, 0x10	; 16
 cbc:	be 2e       	mov	r11, r30
 cbe:	b4 fe       	sbrs	r11, 4
 cc0:	0d c0       	rjmp	.+26     	; 0xcdc <vfprintf+0x28e>
 cc2:	fb 2d       	mov	r31, r11
 cc4:	f4 60       	ori	r31, 0x04	; 4
 cc6:	bf 2e       	mov	r11, r31
 cc8:	09 c0       	rjmp	.+18     	; 0xcdc <vfprintf+0x28e>
 cca:	34 fe       	sbrs	r3, 4
 ccc:	0a c0       	rjmp	.+20     	; 0xce2 <vfprintf+0x294>
 cce:	29 2f       	mov	r18, r25
 cd0:	26 60       	ori	r18, 0x06	; 6
 cd2:	b2 2e       	mov	r11, r18
 cd4:	06 c0       	rjmp	.+12     	; 0xce2 <vfprintf+0x294>
 cd6:	28 e0       	ldi	r18, 0x08	; 8
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	05 c0       	rjmp	.+10     	; 0xce6 <vfprintf+0x298>
 cdc:	20 e1       	ldi	r18, 0x10	; 16
 cde:	30 e0       	ldi	r19, 0x00	; 0
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0x298>
 ce2:	20 e1       	ldi	r18, 0x10	; 16
 ce4:	32 e0       	ldi	r19, 0x02	; 2
 ce6:	f8 01       	movw	r30, r16
 ce8:	b7 fe       	sbrs	r11, 7
 cea:	07 c0       	rjmp	.+14     	; 0xcfa <vfprintf+0x2ac>
 cec:	60 81       	ld	r22, Z
 cee:	71 81       	ldd	r23, Z+1	; 0x01
 cf0:	82 81       	ldd	r24, Z+2	; 0x02
 cf2:	93 81       	ldd	r25, Z+3	; 0x03
 cf4:	0c 5f       	subi	r16, 0xFC	; 252
 cf6:	1f 4f       	sbci	r17, 0xFF	; 255
 cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x2b8>
 cfa:	60 81       	ld	r22, Z
 cfc:	71 81       	ldd	r23, Z+1	; 0x01
 cfe:	80 e0       	ldi	r24, 0x00	; 0
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	0e 5f       	subi	r16, 0xFE	; 254
 d04:	1f 4f       	sbci	r17, 0xFF	; 255
 d06:	a3 01       	movw	r20, r6
 d08:	f1 d0       	rcall	.+482    	; 0xeec <__ultoa_invert>
 d0a:	88 2e       	mov	r8, r24
 d0c:	86 18       	sub	r8, r6
 d0e:	fb 2d       	mov	r31, r11
 d10:	ff 77       	andi	r31, 0x7F	; 127
 d12:	3f 2e       	mov	r3, r31
 d14:	36 fe       	sbrs	r3, 6
 d16:	0d c0       	rjmp	.+26     	; 0xd32 <vfprintf+0x2e4>
 d18:	23 2d       	mov	r18, r3
 d1a:	2e 7f       	andi	r18, 0xFE	; 254
 d1c:	a2 2e       	mov	r10, r18
 d1e:	89 14       	cp	r8, r9
 d20:	58 f4       	brcc	.+22     	; 0xd38 <vfprintf+0x2ea>
 d22:	34 fe       	sbrs	r3, 4
 d24:	0b c0       	rjmp	.+22     	; 0xd3c <vfprintf+0x2ee>
 d26:	32 fc       	sbrc	r3, 2
 d28:	09 c0       	rjmp	.+18     	; 0xd3c <vfprintf+0x2ee>
 d2a:	83 2d       	mov	r24, r3
 d2c:	8e 7e       	andi	r24, 0xEE	; 238
 d2e:	a8 2e       	mov	r10, r24
 d30:	05 c0       	rjmp	.+10     	; 0xd3c <vfprintf+0x2ee>
 d32:	b8 2c       	mov	r11, r8
 d34:	a3 2c       	mov	r10, r3
 d36:	03 c0       	rjmp	.+6      	; 0xd3e <vfprintf+0x2f0>
 d38:	b8 2c       	mov	r11, r8
 d3a:	01 c0       	rjmp	.+2      	; 0xd3e <vfprintf+0x2f0>
 d3c:	b9 2c       	mov	r11, r9
 d3e:	a4 fe       	sbrs	r10, 4
 d40:	0f c0       	rjmp	.+30     	; 0xd60 <vfprintf+0x312>
 d42:	fe 01       	movw	r30, r28
 d44:	e8 0d       	add	r30, r8
 d46:	f1 1d       	adc	r31, r1
 d48:	80 81       	ld	r24, Z
 d4a:	80 33       	cpi	r24, 0x30	; 48
 d4c:	21 f4       	brne	.+8      	; 0xd56 <vfprintf+0x308>
 d4e:	9a 2d       	mov	r25, r10
 d50:	99 7e       	andi	r25, 0xE9	; 233
 d52:	a9 2e       	mov	r10, r25
 d54:	09 c0       	rjmp	.+18     	; 0xd68 <vfprintf+0x31a>
 d56:	a2 fe       	sbrs	r10, 2
 d58:	06 c0       	rjmp	.+12     	; 0xd66 <vfprintf+0x318>
 d5a:	b3 94       	inc	r11
 d5c:	b3 94       	inc	r11
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <vfprintf+0x31a>
 d60:	8a 2d       	mov	r24, r10
 d62:	86 78       	andi	r24, 0x86	; 134
 d64:	09 f0       	breq	.+2      	; 0xd68 <vfprintf+0x31a>
 d66:	b3 94       	inc	r11
 d68:	a3 fc       	sbrc	r10, 3
 d6a:	10 c0       	rjmp	.+32     	; 0xd8c <vfprintf+0x33e>
 d6c:	a0 fe       	sbrs	r10, 0
 d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0x32e>
 d70:	b2 14       	cp	r11, r2
 d72:	80 f4       	brcc	.+32     	; 0xd94 <vfprintf+0x346>
 d74:	28 0c       	add	r2, r8
 d76:	92 2c       	mov	r9, r2
 d78:	9b 18       	sub	r9, r11
 d7a:	0d c0       	rjmp	.+26     	; 0xd96 <vfprintf+0x348>
 d7c:	b2 14       	cp	r11, r2
 d7e:	58 f4       	brcc	.+22     	; 0xd96 <vfprintf+0x348>
 d80:	b6 01       	movw	r22, r12
 d82:	80 e2       	ldi	r24, 0x20	; 32
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	76 d0       	rcall	.+236    	; 0xe74 <fputc>
 d88:	b3 94       	inc	r11
 d8a:	f8 cf       	rjmp	.-16     	; 0xd7c <vfprintf+0x32e>
 d8c:	b2 14       	cp	r11, r2
 d8e:	18 f4       	brcc	.+6      	; 0xd96 <vfprintf+0x348>
 d90:	2b 18       	sub	r2, r11
 d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x34a>
 d94:	98 2c       	mov	r9, r8
 d96:	21 2c       	mov	r2, r1
 d98:	a4 fe       	sbrs	r10, 4
 d9a:	0f c0       	rjmp	.+30     	; 0xdba <vfprintf+0x36c>
 d9c:	b6 01       	movw	r22, r12
 d9e:	80 e3       	ldi	r24, 0x30	; 48
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	68 d0       	rcall	.+208    	; 0xe74 <fputc>
 da4:	a2 fe       	sbrs	r10, 2
 da6:	16 c0       	rjmp	.+44     	; 0xdd4 <vfprintf+0x386>
 da8:	a1 fc       	sbrc	r10, 1
 daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x364>
 dac:	88 e7       	ldi	r24, 0x78	; 120
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x368>
 db2:	88 e5       	ldi	r24, 0x58	; 88
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	b6 01       	movw	r22, r12
 db8:	0c c0       	rjmp	.+24     	; 0xdd2 <vfprintf+0x384>
 dba:	8a 2d       	mov	r24, r10
 dbc:	86 78       	andi	r24, 0x86	; 134
 dbe:	51 f0       	breq	.+20     	; 0xdd4 <vfprintf+0x386>
 dc0:	a1 fe       	sbrs	r10, 1
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x37a>
 dc4:	8b e2       	ldi	r24, 0x2B	; 43
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x37c>
 dc8:	80 e2       	ldi	r24, 0x20	; 32
 dca:	a7 fc       	sbrc	r10, 7
 dcc:	8d e2       	ldi	r24, 0x2D	; 45
 dce:	b6 01       	movw	r22, r12
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	50 d0       	rcall	.+160    	; 0xe74 <fputc>
 dd4:	89 14       	cp	r8, r9
 dd6:	30 f4       	brcc	.+12     	; 0xde4 <vfprintf+0x396>
 dd8:	b6 01       	movw	r22, r12
 dda:	80 e3       	ldi	r24, 0x30	; 48
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	4a d0       	rcall	.+148    	; 0xe74 <fputc>
 de0:	9a 94       	dec	r9
 de2:	f8 cf       	rjmp	.-16     	; 0xdd4 <vfprintf+0x386>
 de4:	8a 94       	dec	r8
 de6:	f3 01       	movw	r30, r6
 de8:	e8 0d       	add	r30, r8
 dea:	f1 1d       	adc	r31, r1
 dec:	80 81       	ld	r24, Z
 dee:	b6 01       	movw	r22, r12
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	40 d0       	rcall	.+128    	; 0xe74 <fputc>
 df4:	81 10       	cpse	r8, r1
 df6:	f6 cf       	rjmp	.-20     	; 0xde4 <vfprintf+0x396>
 df8:	22 20       	and	r2, r2
 dfa:	09 f4       	brne	.+2      	; 0xdfe <vfprintf+0x3b0>
 dfc:	4e ce       	rjmp	.-868    	; 0xa9a <vfprintf+0x4c>
 dfe:	b6 01       	movw	r22, r12
 e00:	80 e2       	ldi	r24, 0x20	; 32
 e02:	90 e0       	ldi	r25, 0x00	; 0
 e04:	37 d0       	rcall	.+110    	; 0xe74 <fputc>
 e06:	2a 94       	dec	r2
 e08:	f7 cf       	rjmp	.-18     	; 0xdf8 <vfprintf+0x3aa>
 e0a:	f6 01       	movw	r30, r12
 e0c:	86 81       	ldd	r24, Z+6	; 0x06
 e0e:	97 81       	ldd	r25, Z+7	; 0x07
 e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0x3c8>
 e12:	8f ef       	ldi	r24, 0xFF	; 255
 e14:	9f ef       	ldi	r25, 0xFF	; 255
 e16:	2b 96       	adiw	r28, 0x0b	; 11
 e18:	0f b6       	in	r0, 0x3f	; 63
 e1a:	f8 94       	cli
 e1c:	de bf       	out	0x3e, r29	; 62
 e1e:	0f be       	out	0x3f, r0	; 63
 e20:	cd bf       	out	0x3d, r28	; 61
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	0f 91       	pop	r16
 e2a:	ff 90       	pop	r15
 e2c:	ef 90       	pop	r14
 e2e:	df 90       	pop	r13
 e30:	cf 90       	pop	r12
 e32:	bf 90       	pop	r11
 e34:	af 90       	pop	r10
 e36:	9f 90       	pop	r9
 e38:	8f 90       	pop	r8
 e3a:	7f 90       	pop	r7
 e3c:	6f 90       	pop	r6
 e3e:	5f 90       	pop	r5
 e40:	4f 90       	pop	r4
 e42:	3f 90       	pop	r3
 e44:	2f 90       	pop	r2
 e46:	08 95       	ret

00000e48 <strnlen_P>:
 e48:	fc 01       	movw	r30, r24
 e4a:	05 90       	lpm	r0, Z+
 e4c:	61 50       	subi	r22, 0x01	; 1
 e4e:	70 40       	sbci	r23, 0x00	; 0
 e50:	01 10       	cpse	r0, r1
 e52:	d8 f7       	brcc	.-10     	; 0xe4a <strnlen_P+0x2>
 e54:	80 95       	com	r24
 e56:	90 95       	com	r25
 e58:	8e 0f       	add	r24, r30
 e5a:	9f 1f       	adc	r25, r31
 e5c:	08 95       	ret

00000e5e <strnlen>:
 e5e:	fc 01       	movw	r30, r24
 e60:	61 50       	subi	r22, 0x01	; 1
 e62:	70 40       	sbci	r23, 0x00	; 0
 e64:	01 90       	ld	r0, Z+
 e66:	01 10       	cpse	r0, r1
 e68:	d8 f7       	brcc	.-10     	; 0xe60 <strnlen+0x2>
 e6a:	80 95       	com	r24
 e6c:	90 95       	com	r25
 e6e:	8e 0f       	add	r24, r30
 e70:	9f 1f       	adc	r25, r31
 e72:	08 95       	ret

00000e74 <fputc>:
 e74:	0f 93       	push	r16
 e76:	1f 93       	push	r17
 e78:	cf 93       	push	r28
 e7a:	df 93       	push	r29
 e7c:	fb 01       	movw	r30, r22
 e7e:	23 81       	ldd	r18, Z+3	; 0x03
 e80:	21 fd       	sbrc	r18, 1
 e82:	03 c0       	rjmp	.+6      	; 0xe8a <fputc+0x16>
 e84:	8f ef       	ldi	r24, 0xFF	; 255
 e86:	9f ef       	ldi	r25, 0xFF	; 255
 e88:	2c c0       	rjmp	.+88     	; 0xee2 <fputc+0x6e>
 e8a:	22 ff       	sbrs	r18, 2
 e8c:	16 c0       	rjmp	.+44     	; 0xeba <fputc+0x46>
 e8e:	46 81       	ldd	r20, Z+6	; 0x06
 e90:	57 81       	ldd	r21, Z+7	; 0x07
 e92:	24 81       	ldd	r18, Z+4	; 0x04
 e94:	35 81       	ldd	r19, Z+5	; 0x05
 e96:	42 17       	cp	r20, r18
 e98:	53 07       	cpc	r21, r19
 e9a:	44 f4       	brge	.+16     	; 0xeac <fputc+0x38>
 e9c:	a0 81       	ld	r26, Z
 e9e:	b1 81       	ldd	r27, Z+1	; 0x01
 ea0:	9d 01       	movw	r18, r26
 ea2:	2f 5f       	subi	r18, 0xFF	; 255
 ea4:	3f 4f       	sbci	r19, 0xFF	; 255
 ea6:	31 83       	std	Z+1, r19	; 0x01
 ea8:	20 83       	st	Z, r18
 eaa:	8c 93       	st	X, r24
 eac:	26 81       	ldd	r18, Z+6	; 0x06
 eae:	37 81       	ldd	r19, Z+7	; 0x07
 eb0:	2f 5f       	subi	r18, 0xFF	; 255
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	37 83       	std	Z+7, r19	; 0x07
 eb6:	26 83       	std	Z+6, r18	; 0x06
 eb8:	14 c0       	rjmp	.+40     	; 0xee2 <fputc+0x6e>
 eba:	8b 01       	movw	r16, r22
 ebc:	ec 01       	movw	r28, r24
 ebe:	fb 01       	movw	r30, r22
 ec0:	00 84       	ldd	r0, Z+8	; 0x08
 ec2:	f1 85       	ldd	r31, Z+9	; 0x09
 ec4:	e0 2d       	mov	r30, r0
 ec6:	09 95       	icall
 ec8:	89 2b       	or	r24, r25
 eca:	e1 f6       	brne	.-72     	; 0xe84 <fputc+0x10>
 ecc:	d8 01       	movw	r26, r16
 ece:	16 96       	adiw	r26, 0x06	; 6
 ed0:	8d 91       	ld	r24, X+
 ed2:	9c 91       	ld	r25, X
 ed4:	17 97       	sbiw	r26, 0x07	; 7
 ed6:	01 96       	adiw	r24, 0x01	; 1
 ed8:	17 96       	adiw	r26, 0x07	; 7
 eda:	9c 93       	st	X, r25
 edc:	8e 93       	st	-X, r24
 ede:	16 97       	sbiw	r26, 0x06	; 6
 ee0:	ce 01       	movw	r24, r28
 ee2:	df 91       	pop	r29
 ee4:	cf 91       	pop	r28
 ee6:	1f 91       	pop	r17
 ee8:	0f 91       	pop	r16
 eea:	08 95       	ret

00000eec <__ultoa_invert>:
 eec:	fa 01       	movw	r30, r20
 eee:	aa 27       	eor	r26, r26
 ef0:	28 30       	cpi	r18, 0x08	; 8
 ef2:	51 f1       	breq	.+84     	; 0xf48 <__ultoa_invert+0x5c>
 ef4:	20 31       	cpi	r18, 0x10	; 16
 ef6:	81 f1       	breq	.+96     	; 0xf58 <__ultoa_invert+0x6c>
 ef8:	e8 94       	clt
 efa:	6f 93       	push	r22
 efc:	6e 7f       	andi	r22, 0xFE	; 254
 efe:	6e 5f       	subi	r22, 0xFE	; 254
 f00:	7f 4f       	sbci	r23, 0xFF	; 255
 f02:	8f 4f       	sbci	r24, 0xFF	; 255
 f04:	9f 4f       	sbci	r25, 0xFF	; 255
 f06:	af 4f       	sbci	r26, 0xFF	; 255
 f08:	b1 e0       	ldi	r27, 0x01	; 1
 f0a:	3e d0       	rcall	.+124    	; 0xf88 <__ultoa_invert+0x9c>
 f0c:	b4 e0       	ldi	r27, 0x04	; 4
 f0e:	3c d0       	rcall	.+120    	; 0xf88 <__ultoa_invert+0x9c>
 f10:	67 0f       	add	r22, r23
 f12:	78 1f       	adc	r23, r24
 f14:	89 1f       	adc	r24, r25
 f16:	9a 1f       	adc	r25, r26
 f18:	a1 1d       	adc	r26, r1
 f1a:	68 0f       	add	r22, r24
 f1c:	79 1f       	adc	r23, r25
 f1e:	8a 1f       	adc	r24, r26
 f20:	91 1d       	adc	r25, r1
 f22:	a1 1d       	adc	r26, r1
 f24:	6a 0f       	add	r22, r26
 f26:	71 1d       	adc	r23, r1
 f28:	81 1d       	adc	r24, r1
 f2a:	91 1d       	adc	r25, r1
 f2c:	a1 1d       	adc	r26, r1
 f2e:	20 d0       	rcall	.+64     	; 0xf70 <__ultoa_invert+0x84>
 f30:	09 f4       	brne	.+2      	; 0xf34 <__ultoa_invert+0x48>
 f32:	68 94       	set
 f34:	3f 91       	pop	r19
 f36:	2a e0       	ldi	r18, 0x0A	; 10
 f38:	26 9f       	mul	r18, r22
 f3a:	11 24       	eor	r1, r1
 f3c:	30 19       	sub	r19, r0
 f3e:	30 5d       	subi	r19, 0xD0	; 208
 f40:	31 93       	st	Z+, r19
 f42:	de f6       	brtc	.-74     	; 0xefa <__ultoa_invert+0xe>
 f44:	cf 01       	movw	r24, r30
 f46:	08 95       	ret
 f48:	46 2f       	mov	r20, r22
 f4a:	47 70       	andi	r20, 0x07	; 7
 f4c:	40 5d       	subi	r20, 0xD0	; 208
 f4e:	41 93       	st	Z+, r20
 f50:	b3 e0       	ldi	r27, 0x03	; 3
 f52:	0f d0       	rcall	.+30     	; 0xf72 <__ultoa_invert+0x86>
 f54:	c9 f7       	brne	.-14     	; 0xf48 <__ultoa_invert+0x5c>
 f56:	f6 cf       	rjmp	.-20     	; 0xf44 <__ultoa_invert+0x58>
 f58:	46 2f       	mov	r20, r22
 f5a:	4f 70       	andi	r20, 0x0F	; 15
 f5c:	40 5d       	subi	r20, 0xD0	; 208
 f5e:	4a 33       	cpi	r20, 0x3A	; 58
 f60:	18 f0       	brcs	.+6      	; 0xf68 <__ultoa_invert+0x7c>
 f62:	49 5d       	subi	r20, 0xD9	; 217
 f64:	31 fd       	sbrc	r19, 1
 f66:	40 52       	subi	r20, 0x20	; 32
 f68:	41 93       	st	Z+, r20
 f6a:	02 d0       	rcall	.+4      	; 0xf70 <__ultoa_invert+0x84>
 f6c:	a9 f7       	brne	.-22     	; 0xf58 <__ultoa_invert+0x6c>
 f6e:	ea cf       	rjmp	.-44     	; 0xf44 <__ultoa_invert+0x58>
 f70:	b4 e0       	ldi	r27, 0x04	; 4
 f72:	a6 95       	lsr	r26
 f74:	97 95       	ror	r25
 f76:	87 95       	ror	r24
 f78:	77 95       	ror	r23
 f7a:	67 95       	ror	r22
 f7c:	ba 95       	dec	r27
 f7e:	c9 f7       	brne	.-14     	; 0xf72 <__ultoa_invert+0x86>
 f80:	00 97       	sbiw	r24, 0x00	; 0
 f82:	61 05       	cpc	r22, r1
 f84:	71 05       	cpc	r23, r1
 f86:	08 95       	ret
 f88:	9b 01       	movw	r18, r22
 f8a:	ac 01       	movw	r20, r24
 f8c:	0a 2e       	mov	r0, r26
 f8e:	06 94       	lsr	r0
 f90:	57 95       	ror	r21
 f92:	47 95       	ror	r20
 f94:	37 95       	ror	r19
 f96:	27 95       	ror	r18
 f98:	ba 95       	dec	r27
 f9a:	c9 f7       	brne	.-14     	; 0xf8e <__ultoa_invert+0xa2>
 f9c:	62 0f       	add	r22, r18
 f9e:	73 1f       	adc	r23, r19
 fa0:	84 1f       	adc	r24, r20
 fa2:	95 1f       	adc	r25, r21
 fa4:	a0 1d       	adc	r26, r0
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
