
atorr048_stran050_lab10_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000088c  00000920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  00000926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a88  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000782  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9b c0       	rjmp	.+310    	; 0x16c <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5e 01       	movw	r10, r28
  8e:	65 01       	movw	r12, r10
  90:	a4 01       	movw	r20, r8
  92:	87 01       	movw	r16, r14
  94:	07 02       	muls	r16, r23
  96:	c1 01       	movw	r24, r2
  98:	4d 02       	muls	r20, r29
  9a:	5b 02       	muls	r21, r27
  9c:	d5 02       	muls	r29, r21
  9e:	d5 02       	muls	r29, r21
  a0:	a9 02       	muls	r26, r25
  a2:	85 02       	muls	r24, r21
  a4:	b3 02       	muls	r27, r19
  a6:	90 02       	muls	r25, r16
  a8:	cc 02       	muls	r28, r28
  aa:	d5 02       	muls	r29, r21

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec e8       	ldi	r30, 0x8C	; 140
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a6 30       	cpi	r26, 0x06	; 6
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a6 e0       	ldi	r26, 0x06	; 6
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 31       	cpi	r26, 0x17	; 23
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	16 d3       	rcall	.+1580   	; 0x710 <main>
  e4:	d1 c3       	rjmp	.+1954   	; 0x888 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <TimerOn>:
	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2b e0       	ldi	r18, 0x0B	; 11
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	88 e8       	ldi	r24, 0x88	; 136
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2d e7       	ldi	r18, 0x7D	; 125
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	31 83       	std	Z+1, r19	; 0x01
 106:	20 83       	st	Z, r18
 108:	8f e6       	ldi	r24, 0x6F	; 111
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	22 e0       	ldi	r18, 0x02	; 2
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	11 82       	std	Z+1, r1	; 0x01
 11a:	10 82       	st	Z, r1
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 120:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 124:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 128:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 12c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 130:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 134:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 138:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 13c:	8f e5       	ldi	r24, 0x5F	; 95
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2f e5       	ldi	r18, 0x5F	; 95
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	20 68       	ori	r18, 0x80	; 128
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	00 00       	nop
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <TimerISR>:
void TimerISR() {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>
}
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 19e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 1a2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 1a6:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 1aa:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	a1 09       	sbc	r26, r1
 1b2:	b1 09       	sbc	r27, r1
 1b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 1b8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 1bc:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1c0:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 1c8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 1cc:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 1d0:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 1d4:	89 2b       	or	r24, r25
 1d6:	8a 2b       	or	r24, r26
 1d8:	8b 2b       	or	r24, r27
 1da:	89 f4       	brne	.+34     	; 0x1fe <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 1dc:	bc df       	rcall	.-136    	; 0x156 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 1e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 1e6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 1ea:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 1ee:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 1f2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 1f6:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1fa:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	}
	
}
 1fe:	00 00       	nop
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 222:	0f 90       	pop	r0
 224:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <TimerSet>:
void TimerSet(unsigned long M) {
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 d0       	rcall	.+0      	; 0x234 <TimerSet+0x6>
 234:	00 d0       	rcall	.+0      	; 0x236 <TimerSet+0x8>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	69 83       	std	Y+1, r22	; 0x01
 23c:	7a 83       	std	Y+2, r23	; 0x02
 23e:	8b 83       	std	Y+3, r24	; 0x03
 240:	9c 83       	std	Y+4, r25	; 0x04
	// Set TimerISR() to tick every M ms
	_avr_timer_M = M;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	ab 81       	ldd	r26, Y+3	; 0x03
 248:	bc 81       	ldd	r27, Y+4	; 0x04
 24a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_avr_timer_M>
 24e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_avr_timer_M+0x1>
 252:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <_avr_timer_M+0x2>
 256:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 25a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 25e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 262:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 266:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 26a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 26e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 272:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 276:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
}
 27a:	00 00       	nop
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <Button_Tick>:
 
 void Button_Tick() {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	switch(button_state) {
 292:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <button_state>
 296:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <button_state+0x1>
 29a:	cc 01       	movw	r24, r24
 29c:	a0 e0       	ldi	r26, 0x00	; 0
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	27 e0       	ldi	r18, 0x07	; 7
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	84 1b       	sub	r24, r20
 2aa:	95 0b       	sbc	r25, r21
 2ac:	28 17       	cp	r18, r24
 2ae:	39 07       	cpc	r19, r25
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <Button_Tick+0x2a>
 2b2:	0f c1       	rjmp	.+542    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 2b4:	8a 5b       	subi	r24, 0xBA	; 186
 2b6:	9f 4f       	sbci	r25, 0xFF	; 255
 2b8:	fc 01       	movw	r30, r24
 2ba:	dd c2       	rjmp	.+1466   	; 0x876 <__tablejump2__>
		case B_Start: button_state = B_Wait; break;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 2c4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
 2c8:	0b c1       	rjmp	.+534    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case B_Wait: 
			if (tmp_A == 0x01) { button_state = B_Sub; }
 2ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	39 f4       	brne	.+14     	; 0x2e0 <Button_Tick+0x56>
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 2da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else if (tmp_A == 0x02) { button_state = B_Plus; }
			else if (tmp_A == 0x03) { button_state = Reset; }
			break;
 2de:	fb c0       	rjmp	.+502    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 void Button_Tick() {
	switch(button_state) {
		case B_Start: button_state = B_Wait; break;
		case B_Wait: 
			if (tmp_A == 0x01) { button_state = B_Sub; }
			else if (tmp_A == 0x02) { button_state = B_Plus; }
 2e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <Button_Tick+0x6c>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 2f0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else if (tmp_A == 0x03) { button_state = Reset; }
			break;
 2f4:	f0 c0       	rjmp	.+480    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	switch(button_state) {
		case B_Start: button_state = B_Wait; break;
		case B_Wait: 
			if (tmp_A == 0x01) { button_state = B_Sub; }
			else if (tmp_A == 0x02) { button_state = B_Plus; }
			else if (tmp_A == 0x03) { button_state = Reset; }
 2f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	09 f0       	breq	.+2      	; 0x300 <Button_Tick+0x76>
 2fe:	eb c0       	rjmp	.+470    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 308:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			break;
 30c:	e4 c0       	rjmp	.+456    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		case B_Sub:
			if (tmp_A == 0x01) { button_state = B_HoldS; }
 30e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	39 f4       	brne	.+14     	; 0x324 <Button_Tick+0x9a>
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 31e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else if (tmp_A == 0x03) { button_state = Reset; }
			else { button_state = B_Wait; }
			break;
 322:	de c0       	rjmp	.+444    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			else if (tmp_A == 0x02) { button_state = B_Plus; }
			else if (tmp_A == 0x03) { button_state = Reset; }
			break;
		case B_Sub:
			if (tmp_A == 0x01) { button_state = B_HoldS; }
			else if (tmp_A == 0x03) { button_state = Reset; }
 324:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	39 f4       	brne	.+14     	; 0x33a <Button_Tick+0xb0>
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 334:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else { button_state = B_Wait; }
			break;
 338:	d3 c0       	rjmp	.+422    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			else if (tmp_A == 0x03) { button_state = Reset; }
			break;
		case B_Sub:
			if (tmp_A == 0x01) { button_state = B_HoldS; }
			else if (tmp_A == 0x03) { button_state = Reset; }
			else { button_state = B_Wait; }
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 342:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			break;
 346:	cc c0       	rjmp	.+408    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case B_Plus:
			if (tmp_A == 0x02) { button_state = B_HoldP; }
 348:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	39 f4       	brne	.+14     	; 0x35e <Button_Tick+0xd4>
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 358:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else if (tmp_A == 0x03) { button_state = Reset; }
			else { button_state = B_Wait; }
			break;
 35c:	c1 c0       	rjmp	.+386    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			else if (tmp_A == 0x03) { button_state = Reset; }
			else { button_state = B_Wait; }
			break;
		case B_Plus:
			if (tmp_A == 0x02) { button_state = B_HoldP; }
			else if (tmp_A == 0x03) { button_state = Reset; }
 35e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	39 f4       	brne	.+14     	; 0x374 <Button_Tick+0xea>
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 36e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			else { button_state = B_Wait; }
			break;
 372:	b6 c0       	rjmp	.+364    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			else { button_state = B_Wait; }
			break;
		case B_Plus:
			if (tmp_A == 0x02) { button_state = B_HoldP; }
			else if (tmp_A == 0x03) { button_state = Reset; }
			else { button_state = B_Wait; }
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 37c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			break;
 380:	af c0       	rjmp	.+350    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case B_HoldS:
			if (i > 20) {
 382:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 386:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 38a:	45 97       	sbiw	r24, 0x15	; 21
 38c:	48 f0       	brcs	.+18     	; 0x3a0 <Button_Tick+0x116>
				j++;
 38e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <j>
 392:	8f 5f       	subi	r24, 0xFF	; 255
 394:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <j>
				i = 0;
 398:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 39c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
			}
			if (j >= 3) {
 3a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <j>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	80 f0       	brcs	.+32     	; 0x3c8 <Button_Tick+0x13e>
				button_state = Triggered;
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 3b0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				S_trigger = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <S_trigger>
				i = 0; j = 0;
 3ba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 3be:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 3c2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <j>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				S_trigger = 0; i = 0; j = 0;
			}
			break;
 3c6:	89 c0       	rjmp	.+274    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			if (j >= 3) {
				button_state = Triggered;
				S_trigger = 1;
				i = 0; j = 0;
			}
			else if (tmp_A == 0x03) {
 3c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	59 f4       	brne	.+22     	; 0x3e6 <Button_Tick+0x15c>
				button_state = Reset;
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 3d8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				i = 0;
 3dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 3e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				S_trigger = 0; i = 0; j = 0;
			}
			break;
 3e4:	7a c0       	rjmp	.+244    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			}
			else if (tmp_A == 0x03) {
				button_state = Reset;
				i = 0;
			}
			else if (tmp_A == 0x00) {
 3e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 3ea:	88 23       	and	r24, r24
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <Button_Tick+0x166>
 3ee:	75 c0       	rjmp	.+234    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				button_state = B_Wait;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 3f8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				S_trigger = 0; i = 0; j = 0;
 3fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <S_trigger>
 400:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 404:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 408:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <j>
			}
			break;
 40c:	66 c0       	rjmp	.+204    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		case B_HoldP:
			if (i > 20) {
 40e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 412:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 416:	45 97       	sbiw	r24, 0x15	; 21
 418:	50 f0       	brcs	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				j++;
 41a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <j>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <j>
				i = 0;
 424:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 428:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				P_trigger = 0; i = 0; j = 0;
			}
			break;
 42c:	58 c0       	rjmp	.+176    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		case B_HoldP:
			if (i > 20) {
				j++;
				i = 0;
			}
			else if (j >= 3) {
 42e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <j>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	80 f0       	brcs	.+32     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				button_state = Triggered;
 436:	87 e0       	ldi	r24, 0x07	; 7
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 43e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				P_trigger = 1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <P_trigger>
				i = 0; j = 0;
 448:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 44c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 450:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <j>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				P_trigger = 0; i = 0; j = 0;
			}
			break;
 454:	44 c0       	rjmp	.+136    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			else if (j >= 3) {
				button_state = Triggered;
				P_trigger = 1;
				i = 0; j = 0;
			}
			else if (tmp_A == 0x03) {
 456:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	59 f4       	brne	.+22     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
				button_state = Reset;
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 466:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				i = 0;
 46a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 46e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				P_trigger = 0; i = 0; j = 0;
			}
			break;
 472:	35 c0       	rjmp	.+106    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			}
			else if (tmp_A == 0x03) {
				button_state = Reset;
				i = 0;
			}
			else if (tmp_A == 0x00) {
 474:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 478:	88 23       	and	r24, r24
 47a:	89 f5       	brne	.+98     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				button_state = B_Wait;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 484:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
				P_trigger = 0; i = 0; j = 0;
 488:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <P_trigger>
 48c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <i+0x1>
 490:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i>
 494:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <j>
			}
			break;
 498:	22 c0       	rjmp	.+68     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		case Reset:
			button_state = (tmp_A == 0x00) ? B_Wait : Reset;
 49a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 49e:	88 23       	and	r24, r24
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 4b0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			break;
 4b4:	15 c0       	rjmp	.+42     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case Triggered:
			button_state = (tmp_A == 0x00) ? B_Wait : Triggered;
 4b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 4ba:	88 23       	and	r24, r24
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	87 e0       	ldi	r24, 0x07	; 7
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button_state+0x1>
 4cc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button_state>
			break;
 4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		default: break;
 4d2:	00 00       	nop
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		case B_Start: button_state = B_Wait; break;
		case B_Wait: 
			if (tmp_A == 0x01) { button_state = B_Sub; }
			else if (tmp_A == 0x02) { button_state = B_Plus; }
			else if (tmp_A == 0x03) { button_state = Reset; }
			break;
 4d6:	00 00       	nop
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				S_trigger = 0; i = 0; j = 0;
			}
			break;
 4da:	00 00       	nop
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			else if (tmp_A == 0x00) {
				button_state = B_Wait;
				P_trigger = 0; i = 0; j = 0;
			}
			break;
 4de:	00 00       	nop
			button_state = (tmp_A == 0x00) ? B_Wait : Triggered;
			break;
		default: break;
	}
	
	switch (button_state) {
 4e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <button_state>
 4e4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <button_state+0x1>
 4e8:	cc 01       	movw	r24, r24
 4ea:	a0 e0       	ldi	r26, 0x00	; 0
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	27 e0       	ldi	r18, 0x07	; 7
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	84 1b       	sub	r24, r20
 4f8:	95 0b       	sbc	r25, r21
 4fa:	28 17       	cp	r18, r24
 4fc:	39 07       	cpc	r19, r25
 4fe:	08 f4       	brcc	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	52 c0       	rjmp	.+164    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 502:	82 5b       	subi	r24, 0xB2	; 178
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	fc 01       	movw	r30, r24
 508:	b6 c1       	rjmp	.+876    	; 0x876 <__tablejump2__>
		case B_Start: break;
		case B_Wait: break;
		case B_Sub:
			if (ledNum > 0) { ledNum--; }
 50a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 50e:	88 23       	and	r24, r24
 510:	09 f4       	brne	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 512:	4d c0       	rjmp	.+154    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 518:	81 50       	subi	r24, 0x01	; 1
 51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 51e:	47 c0       	rjmp	.+142    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
		case B_HoldS:
			if (ledNum > 0 && i == 20) { ledNum--; }
 520:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 524:	88 23       	and	r24, r24
 526:	59 f0       	breq	.+22     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 528:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 52c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 530:	44 97       	sbiw	r24, 0x14	; 20
 532:	29 f4       	brne	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 534:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 538:	81 50       	subi	r24, 0x01	; 1
 53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			i++;
 53e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 542:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <i+0x1>
 54c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
			break;
 550:	31 c0       	rjmp	.+98     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
		case B_Plus:
			if (ledNum < 9) { ledNum++; }
 552:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 556:	89 30       	cpi	r24, 0x09	; 9
 558:	60 f5       	brcc	.+88     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 55a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
 564:	26 c0       	rjmp	.+76     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
		case B_HoldP:
			if (ledNum < 9 && i == 20) { ledNum++; }
 566:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 56a:	89 30       	cpi	r24, 0x09	; 9
 56c:	58 f4       	brcc	.+22     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 56e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 572:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 576:	44 97       	sbiw	r24, 0x14	; 20
 578:	29 f4       	brne	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 57a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			i++;
 584:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i>
 588:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <i+0x1>
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <i+0x1>
 592:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i>
			break;
 596:	0e c0       	rjmp	.+28     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
		case Reset: 
			ledNum = 0;
 598:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			P_trigger = 0;
 59c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <P_trigger>
			S_trigger = 0; 
 5a0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <S_trigger>
			break;
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
		case Triggered: break;
		default: break;
 5a6:	00 00       	nop
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
		case Reset: 
			ledNum = 0;
			P_trigger = 0;
			S_trigger = 0; 
			break;
		case Triggered: break;
 5aa:	00 00       	nop
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
	switch (button_state) {
		case B_Start: break;
		case B_Wait: break;
		case B_Sub:
			if (ledNum > 0) { ledNum--; }
			break;
 5ae:	00 00       	nop
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			if (ledNum > 0 && i == 20) { ledNum--; }
			i++;
			break;
		case B_Plus:
			if (ledNum < 9) { ledNum++; }
			break;
 5b2:	00 00       	nop
			S_trigger = 0; 
			break;
		case Triggered: break;
		default: break;
	}
}
 5b4:	00 00       	nop
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <Plus_Tick>:
 void Plus_Tick() {
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
	 switch (phold_state) {
 5c4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phold_state>
 5c8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <phold_state+0x1>
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	91 05       	cpc	r25, r1
 5d0:	69 f0       	breq	.+26     	; 0x5ec <Plus_Tick+0x30>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	91 05       	cpc	r25, r1
 5d6:	18 f0       	brcs	.+6      	; 0x5de <Plus_Tick+0x22>
 5d8:	02 97       	sbiw	r24, 0x02	; 2
 5da:	d1 f0       	breq	.+52     	; 0x610 <Plus_Tick+0x54>
 5dc:	26 c0       	rjmp	.+76     	; 0x62a <Plus_Tick+0x6e>
		 case P_Start: phold_state = P_Wait; break;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <phold_state+0x1>
 5e6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <phold_state>
 5ea:	1f c0       	rjmp	.+62     	; 0x62a <Plus_Tick+0x6e>
		 case P_Wait:
			if (P_trigger) {
 5ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <P_trigger>
 5f0:	88 23       	and	r24, r24
 5f2:	39 f0       	breq	.+14     	; 0x602 <Plus_Tick+0x46>
				phold_state = P_Hold;
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <phold_state+0x1>
 5fc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <phold_state>
			}
			else {
				phold_state = P_Wait;
			}
			break;
 600:	14 c0       	rjmp	.+40     	; 0x62a <Plus_Tick+0x6e>
		 case P_Wait:
			if (P_trigger) {
				phold_state = P_Hold;
			}
			else {
				phold_state = P_Wait;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <phold_state+0x1>
 60a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <phold_state>
			}
			break;
 60e:	0d c0       	rjmp	.+26     	; 0x62a <Plus_Tick+0x6e>
		 case P_Hold:
			if (tmp_A != 0x02) {
 610:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 614:	82 30       	cpi	r24, 0x02	; 2
 616:	41 f0       	breq	.+16     	; 0x628 <Plus_Tick+0x6c>
				phold_state = P_Wait;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <phold_state+0x1>
 620:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <phold_state>
				P_trigger = 0;
 624:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <P_trigger>
			}
			break;
 628:	00 00       	nop
	 }
	 switch (phold_state) {
 62a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phold_state>
 62e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <phold_state+0x1>
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	91 05       	cpc	r25, r1
 636:	81 f0       	breq	.+32     	; 0x658 <Plus_Tick+0x9c>
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	91 05       	cpc	r25, r1
 63c:	78 f0       	brcs	.+30     	; 0x65c <Plus_Tick+0xa0>
 63e:	02 97       	sbiw	r24, 0x02	; 2
 640:	09 f0       	breq	.+2      	; 0x644 <Plus_Tick+0x88>
			if (ledNum < 9) {
				ledNum++;
			}
			break;
	 }
 }
 642:	0f c0       	rjmp	.+30     	; 0x662 <Plus_Tick+0xa6>
	 }
	 switch (phold_state) {
		 case P_Start: break;
		 case P_Wait: break;
		 case P_Hold:
			if (ledNum < 9) {
 644:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 648:	89 30       	cpi	r24, 0x09	; 9
 64a:	50 f4       	brcc	.+20     	; 0x660 <Plus_Tick+0xa4>
				ledNum++;
 64c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 650:	8f 5f       	subi	r24, 0xFF	; 255
 652:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			break;
 656:	04 c0       	rjmp	.+8      	; 0x660 <Plus_Tick+0xa4>
			}
			break;
	 }
	 switch (phold_state) {
		 case P_Start: break;
		 case P_Wait: break;
 658:	00 00       	nop
 65a:	03 c0       	rjmp	.+6      	; 0x662 <Plus_Tick+0xa6>
				P_trigger = 0;
			}
			break;
	 }
	 switch (phold_state) {
		 case P_Start: break;
 65c:	00 00       	nop
 65e:	01 c0       	rjmp	.+2      	; 0x662 <Plus_Tick+0xa6>
		 case P_Wait: break;
		 case P_Hold:
			if (ledNum < 9) {
				ledNum++;
			}
			break;
 660:	00 00       	nop
	 }
 }
 662:	00 00       	nop
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <Sub_Tick>:
 void Sub_Tick() {
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
	 switch (shold_state) {
 672:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <shold_state>
 676:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <shold_state+0x1>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	91 05       	cpc	r25, r1
 67e:	69 f0       	breq	.+26     	; 0x69a <Sub_Tick+0x30>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 05       	cpc	r25, r1
 684:	18 f0       	brcs	.+6      	; 0x68c <Sub_Tick+0x22>
 686:	02 97       	sbiw	r24, 0x02	; 2
 688:	99 f0       	breq	.+38     	; 0x6b0 <Sub_Tick+0x46>
 68a:	22 c0       	rjmp	.+68     	; 0x6d0 <Sub_Tick+0x66>
		 case S_Start: shold_state = S_Wait; break;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <shold_state+0x1>
 694:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shold_state>
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <Sub_Tick+0x66>
		 case S_Wait:
		 if (S_trigger) {
 69a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <S_trigger>
 69e:	88 23       	and	r24, r24
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <Sub_Tick+0x60>
			 shold_state = S_Hold;
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <shold_state+0x1>
 6aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shold_state>
		 }
		 break;
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <Sub_Tick+0x60>
		 case S_Hold:
		 if (tmp_A != 0x01) {
 6b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	59 f0       	breq	.+22     	; 0x6ce <Sub_Tick+0x64>
			 shold_state = S_Wait;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <shold_state+0x1>
 6c0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shold_state>
			 S_trigger = 0;
 6c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <S_trigger>
		 }
		 break;
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <Sub_Tick+0x64>
		 case S_Start: shold_state = S_Wait; break;
		 case S_Wait:
		 if (S_trigger) {
			 shold_state = S_Hold;
		 }
		 break;
 6ca:	00 00       	nop
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <Sub_Tick+0x66>
		 case S_Hold:
		 if (tmp_A != 0x01) {
			 shold_state = S_Wait;
			 S_trigger = 0;
		 }
		 break;
 6ce:	00 00       	nop
	 }
	 switch (shold_state) {
 6d0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <shold_state>
 6d4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <shold_state+0x1>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	91 05       	cpc	r25, r1
 6dc:	81 f0       	breq	.+32     	; 0x6fe <Sub_Tick+0x94>
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	91 05       	cpc	r25, r1
 6e2:	78 f0       	brcs	.+30     	; 0x702 <Sub_Tick+0x98>
 6e4:	02 97       	sbiw	r24, 0x02	; 2
 6e6:	09 f0       	breq	.+2      	; 0x6ea <Sub_Tick+0x80>
		 if (ledNum > 0) {
			 ledNum--;
		 }
		 break;
	 }
 }
 6e8:	0f c0       	rjmp	.+30     	; 0x708 <Sub_Tick+0x9e>
	 }
	 switch (shold_state) {
		 case S_Start: break;
		 case S_Wait: break;
		 case S_Hold:
		 if (ledNum > 0) {
 6ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6ee:	88 23       	and	r24, r24
 6f0:	51 f0       	breq	.+20     	; 0x706 <Sub_Tick+0x9c>
			 ledNum--;
 6f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6f6:	81 50       	subi	r24, 0x01	; 1
 6f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 }
		 break;
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <Sub_Tick+0x9c>
		 }
		 break;
	 }
	 switch (shold_state) {
		 case S_Start: break;
		 case S_Wait: break;
 6fe:	00 00       	nop
 700:	03 c0       	rjmp	.+6      	; 0x708 <Sub_Tick+0x9e>
			 S_trigger = 0;
		 }
		 break;
	 }
	 switch (shold_state) {
		 case S_Start: break;
 702:	00 00       	nop
 704:	01 c0       	rjmp	.+2      	; 0x708 <Sub_Tick+0x9e>
		 case S_Wait: break;
		 case S_Hold:
		 if (ledNum > 0) {
			 ledNum--;
		 }
		 break;
 706:	00 00       	nop
	 }
 }
 708:	00 00       	nop
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <main>:
 
 
int main(void)
{
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	60 97       	sbiw	r28, 0x10	; 16
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;
 724:	81 e2       	ldi	r24, 0x21	; 33
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	fc 01       	movw	r30, r24
 72a:	10 82       	st	Z, r1
 72c:	82 e2       	ldi	r24, 0x22	; 34
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 736:	84 e2       	ldi	r24, 0x24	; 36
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	fc 01       	movw	r30, r24
 73e:	20 83       	st	Z, r18
 740:	85 e2       	ldi	r24, 0x25	; 37
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	fc 01       	movw	r30, r24
 746:	10 82       	st	Z, r1
	unsigned long B_elapsedTime = 0;
 748:	19 82       	std	Y+1, r1	; 0x01
 74a:	1a 82       	std	Y+2, r1	; 0x02
 74c:	1b 82       	std	Y+3, r1	; 0x03
 74e:	1c 82       	std	Y+4, r1	; 0x04
	unsigned long P_elapsedTime = 0;
 750:	1d 82       	std	Y+5, r1	; 0x05
 752:	1e 82       	std	Y+6, r1	; 0x06
 754:	1f 82       	std	Y+7, r1	; 0x07
 756:	18 86       	std	Y+8, r1	; 0x08
	unsigned long S_elapsedTime = 0;
 758:	19 86       	std	Y+9, r1	; 0x09
 75a:	1a 86       	std	Y+10, r1	; 0x0a
 75c:	1b 86       	std	Y+11, r1	; 0x0b
 75e:	1c 86       	std	Y+12, r1	; 0x0c

	const unsigned long timerPeriod = 50;
 760:	82 e3       	ldi	r24, 0x32	; 50
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	8d 87       	std	Y+13, r24	; 0x0d
 76a:	9e 87       	std	Y+14, r25	; 0x0e
 76c:	af 87       	std	Y+15, r26	; 0x0f
 76e:	b8 8b       	std	Y+16, r27	; 0x10
	
	button_state = B_Start;
 770:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <button_state+0x1>
 774:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <button_state>
	phold_state = P_Start;
 778:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <phold_state+0x1>
 77c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <phold_state>
	shold_state = S_Start;
 780:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <shold_state+0x1>
 784:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <shold_state>

    TimerSet(timerPeriod);
 788:	8d 85       	ldd	r24, Y+13	; 0x0d
 78a:	9e 85       	ldd	r25, Y+14	; 0x0e
 78c:	af 85       	ldd	r26, Y+15	; 0x0f
 78e:	b8 89       	ldd	r27, Y+16	; 0x10
 790:	bc 01       	movw	r22, r24
 792:	cd 01       	movw	r24, r26
 794:	4c dd       	rcall	.-1384   	; 0x22e <TimerSet>
	TimerOn();
 796:	a8 dc       	rcall	.-1712   	; 0xe8 <TimerOn>
 798:	80 e2       	ldi	r24, 0x20	; 32

    while (1) 
    {
		tmp_A = ~PINA & 0x07;
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	fc 01       	movw	r30, r24
 79e:	80 81       	ld	r24, Z
 7a0:	80 95       	com	r24
 7a2:	87 70       	andi	r24, 0x07	; 7
 7a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
		
		if (B_elapsedTime >= 50) { //200 ms
 7aa:	9a 81       	ldd	r25, Y+2	; 0x02
 7ac:	ab 81       	ldd	r26, Y+3	; 0x03
 7ae:	bc 81       	ldd	r27, Y+4	; 0x04
 7b0:	c2 97       	sbiw	r24, 0x32	; 50
 7b2:	a1 05       	cpc	r26, r1
 7b4:	b1 05       	cpc	r27, r1
 7b6:	28 f0       	brcs	.+10     	; 0x7c2 <main+0xb2>
			Button_Tick();
 7b8:	68 dd       	rcall	.-1328   	; 0x28a <Button_Tick>
 7ba:	19 82       	std	Y+1, r1	; 0x01
			B_elapsedTime = 0;
 7bc:	1a 82       	std	Y+2, r1	; 0x02
 7be:	1b 82       	std	Y+3, r1	; 0x03
 7c0:	1c 82       	std	Y+4, r1	; 0x04
 7c2:	8d 81       	ldd	r24, Y+5	; 0x05
		}
		if (P_elapsedTime >= 400) {//400 ms
 7c4:	9e 81       	ldd	r25, Y+6	; 0x06
 7c6:	af 81       	ldd	r26, Y+7	; 0x07
 7c8:	b8 85       	ldd	r27, Y+8	; 0x08
 7ca:	80 39       	cpi	r24, 0x90	; 144
 7cc:	91 40       	sbci	r25, 0x01	; 1
 7ce:	a1 05       	cpc	r26, r1
 7d0:	b1 05       	cpc	r27, r1
 7d2:	28 f0       	brcs	.+10     	; 0x7de <main+0xce>
			Plus_Tick();
 7d4:	f3 de       	rcall	.-538    	; 0x5bc <Plus_Tick>
 7d6:	1d 82       	std	Y+5, r1	; 0x05
			P_elapsedTime = 0;
 7d8:	1e 82       	std	Y+6, r1	; 0x06
 7da:	1f 82       	std	Y+7, r1	; 0x07
 7dc:	18 86       	std	Y+8, r1	; 0x08
 7de:	89 85       	ldd	r24, Y+9	; 0x09
		}
		if (S_elapsedTime >= 400) {//400 ms
 7e0:	9a 85       	ldd	r25, Y+10	; 0x0a
 7e2:	ab 85       	ldd	r26, Y+11	; 0x0b
 7e4:	bc 85       	ldd	r27, Y+12	; 0x0c
 7e6:	80 39       	cpi	r24, 0x90	; 144
 7e8:	91 40       	sbci	r25, 0x01	; 1
 7ea:	a1 05       	cpc	r26, r1
 7ec:	b1 05       	cpc	r27, r1
 7ee:	28 f0       	brcs	.+10     	; 0x7fa <main+0xea>
			Sub_Tick();
 7f0:	3c df       	rcall	.-392    	; 0x66a <Sub_Tick>
 7f2:	19 86       	std	Y+9, r1	; 0x09
			S_elapsedTime = 0;
 7f4:	1a 86       	std	Y+10, r1	; 0x0a
 7f6:	1b 86       	std	Y+11, r1	; 0x0b
 7f8:	1c 86       	std	Y+12, r1	; 0x0c
 7fa:	85 e2       	ldi	r24, 0x25	; 37
		}
		
		PORTB = ledNum;
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
 806:	00 00       	nop
		
		while (!TimerFlag) {}	// Wait 2 ms
 808:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TimerFlag>
 80c:	88 23       	and	r24, r24
 80e:	e1 f3       	breq	.-8      	; 0x808 <main+0xf8>
 810:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TimerFlag>
		TimerFlag = 0;
 814:	29 81       	ldd	r18, Y+1	; 0x01
		
		B_elapsedTime += timerPeriod;
 816:	3a 81       	ldd	r19, Y+2	; 0x02
 818:	4b 81       	ldd	r20, Y+3	; 0x03
 81a:	5c 81       	ldd	r21, Y+4	; 0x04
 81c:	8d 85       	ldd	r24, Y+13	; 0x0d
 81e:	9e 85       	ldd	r25, Y+14	; 0x0e
 820:	af 85       	ldd	r26, Y+15	; 0x0f
 822:	b8 89       	ldd	r27, Y+16	; 0x10
 824:	82 0f       	add	r24, r18
 826:	93 1f       	adc	r25, r19
 828:	a4 1f       	adc	r26, r20
 82a:	b5 1f       	adc	r27, r21
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	9a 83       	std	Y+2, r25	; 0x02
 830:	ab 83       	std	Y+3, r26	; 0x03
 832:	bc 83       	std	Y+4, r27	; 0x04
 834:	2d 81       	ldd	r18, Y+5	; 0x05
		P_elapsedTime += timerPeriod;
 836:	3e 81       	ldd	r19, Y+6	; 0x06
 838:	4f 81       	ldd	r20, Y+7	; 0x07
 83a:	58 85       	ldd	r21, Y+8	; 0x08
 83c:	8d 85       	ldd	r24, Y+13	; 0x0d
 83e:	9e 85       	ldd	r25, Y+14	; 0x0e
 840:	af 85       	ldd	r26, Y+15	; 0x0f
 842:	b8 89       	ldd	r27, Y+16	; 0x10
 844:	82 0f       	add	r24, r18
 846:	93 1f       	adc	r25, r19
 848:	a4 1f       	adc	r26, r20
 84a:	b5 1f       	adc	r27, r21
 84c:	8d 83       	std	Y+5, r24	; 0x05
 84e:	9e 83       	std	Y+6, r25	; 0x06
 850:	af 83       	std	Y+7, r26	; 0x07
 852:	b8 87       	std	Y+8, r27	; 0x08
 854:	29 85       	ldd	r18, Y+9	; 0x09
		S_elapsedTime += timerPeriod;
 856:	3a 85       	ldd	r19, Y+10	; 0x0a
 858:	4b 85       	ldd	r20, Y+11	; 0x0b
 85a:	5c 85       	ldd	r21, Y+12	; 0x0c
 85c:	8d 85       	ldd	r24, Y+13	; 0x0d
 85e:	9e 85       	ldd	r25, Y+14	; 0x0e
 860:	af 85       	ldd	r26, Y+15	; 0x0f
 862:	b8 89       	ldd	r27, Y+16	; 0x10
 864:	82 0f       	add	r24, r18
 866:	93 1f       	adc	r25, r19
 868:	a4 1f       	adc	r26, r20
 86a:	b5 1f       	adc	r27, r21
 86c:	89 87       	std	Y+9, r24	; 0x09
 86e:	9a 87       	std	Y+10, r25	; 0x0a
 870:	ab 87       	std	Y+11, r26	; 0x0b
 872:	bc 87       	std	Y+12, r27	; 0x0c
 874:	91 cf       	rjmp	.-222    	; 0x798 <main+0x88>

00000876 <__tablejump2__>:

    }
 876:	ee 0f       	add	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	00 24       	eor	r0, r0
 87c:	00 1c       	adc	r0, r0
 87e:	0b be       	out	0x3b, r0	; 59
 880:	07 90       	elpm	r0, Z+
 882:	f6 91       	elpm	r31, Z
 884:	e0 2d       	mov	r30, r0
 886:	09 94       	ijmp

00000888 <_exit>:
 888:	f8 94       	cli

0000088a <__stop_program>:
 88a:	ff cf       	rjmp	.-2      	; 0x88a <__stop_program>
