
atorr048_stran050_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000072e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab7  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078f  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c1       	rjmp	.+630    	; 0x2ac <__vector_13>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fe 01       	movw	r30, r28
  8e:	07 02       	muls	r16, r23
  90:	4c 02       	muls	r20, r28
  92:	8e 02       	muls	r24, r30
  94:	2f 02       	muls	r18, r31
  96:	69 02       	muls	r22, r25
  98:	b2 02       	muls	r27, r18

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	ee e2       	ldi	r30, 0x2E	; 46
  ae:	f7 e0       	ldi	r31, 0x07	; 7
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a4 30       	cpi	r26, 0x04	; 4
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	af 30       	cpi	r26, 0x0F	; 15
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	e6 d2       	rcall	.+1484   	; 0x69e <main>
  d2:	2b c3       	rjmp	.+1622   	; 0x72a <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <LCD_ClearScreen>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00;
}
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	1a d0       	rcall	.+52     	; 0x116 <LCD_WriteCommand>
  e2:	00 00       	nop
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <LCD_init>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	6d d0       	rcall	.+218    	; 0x1d2 <delay_ms>
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	0d d0       	rcall	.+26     	; 0x116 <LCD_WriteCommand>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0b d0       	rcall	.+22     	; 0x116 <LCD_WriteCommand>
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	09 d0       	rcall	.+18     	; 0x116 <LCD_WriteCommand>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	07 d0       	rcall	.+14     	; 0x116 <LCD_WriteCommand>
 108:	8a e0       	ldi	r24, 0x0A	; 10
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	62 d0       	rcall	.+196    	; 0x1d2 <delay_ms>
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <LCD_WriteCommand>:
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	8b e2       	ldi	r24, 0x2B	; 43
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2b e2       	ldi	r18, 0x2B	; 43
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	29 81       	ldd	r18, Y+1	; 0x01
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	8b e2       	ldi	r24, 0x2B	; 43
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2b e2       	ldi	r18, 0x2B	; 43
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 68       	ori	r18, 0x80	; 128
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	00 00       	nop
 152:	8b e2       	ldi	r24, 0x2B	; 43
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2b e2       	ldi	r18, 0x2B	; 43
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	2f 77       	andi	r18, 0x7F	; 127
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	34 d0       	rcall	.+104    	; 0x1d2 <delay_ms>
 16a:	00 00       	nop
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCD_WriteData>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	8b e2       	ldi	r24, 0x2B	; 43
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	2b e2       	ldi	r18, 0x2B	; 43
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	20 64       	ori	r18, 0x40	; 64
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	20 68       	ori	r18, 0x80	; 128
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	00 00       	nop
 1b0:	8b e2       	ldi	r24, 0x2B	; 43
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2b e2       	ldi	r18, 0x2B	; 43
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	2f 77       	andi	r18, 0x7F	; 127
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	05 d0       	rcall	.+10     	; 0x1d2 <delay_ms>
 1c8:	00 00       	nop
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <delay_ms>:
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <delay_ms+0x6>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <delay_ms+0x8>
 1da:	00 d0       	rcall	.+0      	; 0x1dc <delay_ms+0xa>
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	9e 83       	std	Y+6, r25	; 0x06
 1e2:	8d 83       	std	Y+5, r24	; 0x05
 1e4:	1a 82       	std	Y+2, r1	; 0x02
 1e6:	19 82       	std	Y+1, r1	; 0x01
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <delay_ms+0x3e>
 1ea:	1c 82       	std	Y+4, r1	; 0x04
 1ec:	1b 82       	std	Y+3, r1	; 0x03
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <delay_ms+0x2a>
 1f0:	00 00       	nop
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	9c 83       	std	Y+4, r25	; 0x04
 1fa:	8b 83       	std	Y+3, r24	; 0x03
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	93 40       	sbci	r25, 0x03	; 3
 204:	ac f3       	brlt	.-22     	; 0x1f0 <delay_ms+0x1e>
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	29 81       	ldd	r18, Y+1	; 0x01
 212:	3a 81       	ldd	r19, Y+2	; 0x02
 214:	8d 81       	ldd	r24, Y+5	; 0x05
 216:	9e 81       	ldd	r25, Y+6	; 0x06
 218:	28 17       	cp	r18, r24
 21a:	39 07       	cpc	r19, r25
 21c:	34 f3       	brlt	.-52     	; 0x1ea <delay_ms+0x18>
 21e:	00 00       	nop
 220:	26 96       	adiw	r28, 0x06	; 6
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <TimerOn>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	81 e8       	ldi	r24, 0x81	; 129
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2b e0       	ldi	r18, 0x0B	; 11
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
 244:	88 e8       	ldi	r24, 0x88	; 136
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2d e7       	ldi	r18, 0x7D	; 125
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	31 83       	std	Z+1, r19	; 0x01
 250:	20 83       	st	Z, r18
 252:	8f e6       	ldi	r24, 0x6F	; 111
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	22 e0       	ldi	r18, 0x02	; 2
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 260:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 264:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 268:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 26c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 270:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 274:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 278:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 27c:	8f e5       	ldi	r24, 0x5F	; 95
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	2f e5       	ldi	r18, 0x5F	; 95
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	20 68       	ori	r18, 0x80	; 128
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	00 00       	nop
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <TimerISR>:
void TimerISR() {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 2a4:	00 00       	nop
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2bc:	0f 92       	push	r0
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 2de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 2e2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 2e6:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 2ea:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	a1 09       	sbc	r26, r1
 2f2:	b1 09       	sbc	r27, r1
 2f4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 2f8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 2fc:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 300:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 304:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 308:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 30c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 310:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 314:	89 2b       	or	r24, r25
 316:	8a 2b       	or	r24, r26
 318:	8b 2b       	or	r24, r27
 31a:	89 f4       	brne	.+34     	; 0x33e <__vector_13+0x92>
		TimerISR();
 31c:	bc df       	rcall	.-136    	; 0x296 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 322:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 326:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 32a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 32e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 332:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 336:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 33a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 33e:	00 00       	nop
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 362:	0f 90       	pop	r0
 364:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <TimerSet>:
void TimerSet(unsigned long M) {
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <TimerSet+0x6>
 374:	00 d0       	rcall	.+0      	; 0x376 <TimerSet+0x8>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	69 83       	std	Y+1, r22	; 0x01
 37c:	7a 83       	std	Y+2, r23	; 0x02
 37e:	8b 83       	std	Y+3, r24	; 0x03
 380:	9c 83       	std	Y+4, r25	; 0x04
	//Set TimerISR() to tick every M ms
	_avr_timer_M = M;
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	ab 81       	ldd	r26, Y+3	; 0x03
 388:	bc 81       	ldd	r27, Y+4	; 0x04
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 38e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 392:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 396:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 39a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 39e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3a6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 3ae:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 3b2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 3b6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 3ba:	00 00       	nop
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <Tick>:

void Tick() {
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
 3d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 3d6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <state+0x1>
 3da:	cc 01       	movw	r24, r24
 3dc:	a0 e0       	ldi	r26, 0x00	; 0
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	26 e0       	ldi	r18, 0x06	; 6
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	84 1b       	sub	r24, r20
 3ea:	95 0b       	sbc	r25, r21
 3ec:	28 17       	cp	r18, r24
 3ee:	39 07       	cpc	r19, r25
 3f0:	08 f4       	brcc	.+2      	; 0x3f4 <Tick+0x2a>
 3f2:	ca c0       	rjmp	.+404    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 3f4:	8a 5b       	subi	r24, 0xBA	; 186
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	fc 01       	movw	r30, r24
 3fa:	8e c1       	rjmp	.+796    	; 0x718 <__tablejump2__>
		case Start:
			state = Wait;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 404:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			LCD_WriteData('0');
 408:	80 e3       	ldi	r24, 0x30	; 48
 40a:	b4 de       	rcall	.-664    	; 0x174 <LCD_WriteData>
			break;
 40c:	c2 c0       	rjmp	.+388    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		case Wait:
			if (cur_inA == 0x03) {state = Reset;}
 40e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	39 f4       	brne	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 41e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x02) {state = Minus;}
			else if (cur_inA == 0x01) {state = Plus;}
			else {state = Wait;}
			break;
 422:	b7 c0       	rjmp	.+366    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			state = Wait;
			LCD_WriteData('0');
			break;
		case Wait:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x02) {state = Minus;}
 424:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	39 f4       	brne	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 434:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x01) {state = Plus;}
			else {state = Wait;}
			break;
 438:	ac c0       	rjmp	.+344    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			LCD_WriteData('0');
			break;
		case Wait:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x02) {state = Minus;}
			else if (cur_inA == 0x01) {state = Plus;}
 43a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	39 f4       	brne	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 44a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else {state = Wait;}
			break;
 44e:	a1 c0       	rjmp	.+322    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			break;
		case Wait:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x02) {state = Minus;}
			else if (cur_inA == 0x01) {state = Plus;}
			else {state = Wait;}
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 458:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 45c:	9a c0       	rjmp	.+308    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		case Minus:
			if (cur_inA == 0x03) {state = Reset;}
 45e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	39 f4       	brne	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 46e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x02) {state = Minus_hold;}
			else {state = Wait;}
			break;
 472:	8f c0       	rjmp	.+286    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			else if (cur_inA == 0x01) {state = Plus;}
			else {state = Wait;}
			break;
		case Minus:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x02) {state = Minus_hold;}
 474:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	39 f4       	brne	.+14     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 484:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else {state = Wait;}
			break;
 488:	84 c0       	rjmp	.+264    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			else {state = Wait;}
			break;
		case Minus:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x02) {state = Minus_hold;}
			else {state = Wait;}
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 492:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 496:	7d c0       	rjmp	.+250    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		case Plus:
			if (cur_inA == 0x03) {state = Reset;}
 498:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 49c:	83 30       	cpi	r24, 0x03	; 3
 49e:	39 f4       	brne	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 4a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x01) {state = Plus_hold;}
			else {state = Wait;}
			break;
 4ac:	72 c0       	rjmp	.+228    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			else if (cur_inA == 0x02) {state = Minus_hold;}
			else {state = Wait;}
			break;
		case Plus:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x01) {state = Plus_hold;}
 4ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 4be:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else {state = Wait;}
			break;
 4c2:	67 c0       	rjmp	.+206    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			else {state = Wait;}
			break;
		case Plus:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x01) {state = Plus_hold;}
			else {state = Wait;}
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 4cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 4d0:	60 c0       	rjmp	.+192    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		case Minus_hold:
			if (cur_inA == 0x03) {state = Reset;}
 4d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	39 f4       	brne	.+14     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 4e2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x02) {
				count++;
			}
			break;
 4e6:	52 c0       	rjmp	.+164    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			else if (cur_inA == 0x01) {state = Plus_hold;}
			else {state = Wait;}
			break;
		case Minus_hold:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
 4e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 4ec:	88 23       	and	r24, r24
 4ee:	39 f4       	brne	.+14     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 4f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x02) {
				count++;
			}
			break;
 4fc:	47 c0       	rjmp	.+142    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			else {state = Wait;}
			break;
		case Minus_hold:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x02) {
 4fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	09 f0       	breq	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	42 c0       	rjmp	.+132    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
				count++;
 508:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 50c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <count+0x1>
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <count+0x1>
 516:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
			}
			break;
 51a:	38 c0       	rjmp	.+112    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
		case Plus_hold:
			if (cur_inA == 0x03) {state = Reset;}
 51c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	39 f4       	brne	.+14     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 524:	86 e0       	ldi	r24, 0x06	; 6
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 52c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x01) {
				count++;
			}
			break;
 530:	2f c0       	rjmp	.+94     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				count++;
			}
			break;
		case Plus_hold:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
 532:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 536:	88 23       	and	r24, r24
 538:	39 f4       	brne	.+14     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 542:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else if (cur_inA == 0x01) {
				count++;
			}
			break;
 546:	24 c0       	rjmp	.+72     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
			}
			break;
		case Plus_hold:
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x01) {
 548:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	01 f5       	brne	.+64     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				count++;
 550:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 554:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <count+0x1>
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <count+0x1>
 55e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
			}
			break;
 562:	16 c0       	rjmp	.+44     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
		case Reset:
			if (cur_inA == 0x03) {state = Reset;}
 564:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cur_inA>
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	39 f4       	brne	.+14     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 574:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			else {state = Wait;}
			break;
 578:	0c c0       	rjmp	.+24     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				count++;
			}
			break;
		case Reset:
			if (cur_inA == 0x03) {state = Reset;}
			else {state = Wait;}
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <state+0x1>
 582:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
			break;
 586:	05 c0       	rjmp	.+10     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
		default:
			break;
 588:	00 00       	nop
 58a:	03 c0       	rjmp	.+6      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x02) {
				count++;
			}
			break;
 58c:	00 00       	nop
 58e:	01 c0       	rjmp	.+2      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
			if (cur_inA == 0x03) {state = Reset;}
			else if (cur_inA == 0x00) {state = Wait;}
			else if (cur_inA == 0x01) {
				count++;
			}
			break;
 590:	00 00       	nop
			break;
		default:
			break;
		}
	
	switch (state) {	
 592:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 596:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <state+0x1>
 59a:	83 30       	cpi	r24, 0x03	; 3
 59c:	91 05       	cpc	r25, r1
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 5a0:	52 c0       	rjmp	.+164    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 5a2:	84 30       	cpi	r24, 0x04	; 4
 5a4:	91 05       	cpc	r25, r1
 5a6:	30 f4       	brcc	.+12     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	69 f0       	breq	.+26     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5ae:	02 97       	sbiw	r24, 0x02	; 2
 5b0:	01 f1       	breq	.+64     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
			LCD_ClearScreen();		
			LCD_WriteData(curr_num + '0');
			break;
		default:
			//LCD_DisplayString(1, "ERROR");
			break;
 5b2:	71 c0       	rjmp	.+226    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
			break;
		default:
			break;
		}
	
	switch (state) {	
 5b4:	85 30       	cpi	r24, 0x05	; 5
 5b6:	91 05       	cpc	r25, r1
 5b8:	61 f1       	breq	.+88     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5ba:	85 30       	cpi	r24, 0x05	; 5
 5bc:	91 05       	cpc	r25, r1
 5be:	48 f0       	brcs	.+18     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c0:	06 97       	sbiw	r24, 0x06	; 6
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5c4:	59 c0       	rjmp	.+178    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			LCD_ClearScreen();		
			LCD_WriteData(curr_num + '0');
			break;
		default:
			//LCD_DisplayString(1, "ERROR");
			break;
 5c6:	67 c0       	rjmp	.+206    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
			break;
		}
	
	switch (state) {	
		case Wait:
			count = 0;
 5c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count+0x1>
 5cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
			break;
 5d0:	62 c0       	rjmp	.+196    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
		case Minus:
			if (curr_num > 0) { 
 5d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 5d6:	88 23       	and	r24, r24
 5d8:	09 f4       	brne	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5da:	56 c0       	rjmp	.+172    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
				curr_num--;
 5dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 5e0:	81 50       	subi	r24, 0x01	; 1
 5e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <curr_num>
				LCD_ClearScreen();
 5e6:	77 dd       	rcall	.-1298   	; 0xd6 <LCD_ClearScreen>
				LCD_WriteData(curr_num + '0');
 5e8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 5ec:	80 5d       	subi	r24, 0xD0	; 208
 5ee:	c2 dd       	rcall	.-1148   	; 0x174 <LCD_WriteData>
			}
			break;
 5f0:	4b c0       	rjmp	.+150    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
		case Plus:
			if (curr_num < 9) { 
 5f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 5f6:	89 30       	cpi	r24, 0x09	; 9
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5fa:	48 c0       	rjmp	.+144    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
				curr_num++;
 5fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <curr_num>
				LCD_ClearScreen();
				LCD_WriteData(curr_num + '0');
 606:	67 dd       	rcall	.-1330   	; 0xd6 <LCD_ClearScreen>
 608:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 60c:	80 5d       	subi	r24, 0xD0	; 208
 60e:	b2 dd       	rcall	.-1180   	; 0x174 <LCD_WriteData>
			}
			break;
 610:	3d c0       	rjmp	.+122    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
		case Minus_hold:
			if (count >= 10) {
 612:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 616:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <count+0x1>
 61a:	0a 97       	sbiw	r24, 0x0a	; 10
 61c:	08 f4       	brcc	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61e:	38 c0       	rjmp	.+112    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
				if (curr_num > 0) {
 620:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 624:	88 23       	and	r24, r24
					curr_num--;
 626:	a1 f1       	breq	.+104    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 628:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 62c:	81 50       	subi	r24, 0x01	; 1
					LCD_ClearScreen();
 62e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <curr_num>
					LCD_WriteData(curr_num + '0');
 632:	51 dd       	rcall	.-1374   	; 0xd6 <LCD_ClearScreen>
 634:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 638:	80 5d       	subi	r24, 0xD0	; 208
 63a:	9c dd       	rcall	.-1224   	; 0x174 <LCD_WriteData>
					count = 0;
 63c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count+0x1>
 640:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
				}
			}
			break;
 644:	25 c0       	rjmp	.+74     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		case Plus_hold:
		if (count >= 10) {
 646:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 64a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <count+0x1>
 64e:	0a 97       	sbiw	r24, 0x0a	; 10
 650:	08 f1       	brcs	.+66     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			if (curr_num < 9) {
 652:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 656:	89 30       	cpi	r24, 0x09	; 9
				curr_num++;
 658:	e8 f4       	brcc	.+58     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 65a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 65e:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_ClearScreen();
 660:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <curr_num>
				LCD_WriteData(curr_num + '0');
 664:	38 dd       	rcall	.-1424   	; 0xd6 <LCD_ClearScreen>
 666:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 66a:	80 5d       	subi	r24, 0xD0	; 208
				count = 0;
 66c:	83 dd       	rcall	.-1274   	; 0x174 <LCD_WriteData>
 66e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count+0x1>
			}
		}
		break;
 672:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
		case Reset:
			curr_num = 0;
 676:	0e c0       	rjmp	.+28     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			LCD_ClearScreen();		
 678:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <curr_num>
			LCD_WriteData(curr_num + '0');
 67c:	2c dd       	rcall	.-1448   	; 0xd6 <LCD_ClearScreen>
 67e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <curr_num>
 682:	80 5d       	subi	r24, 0xD0	; 208
 684:	77 dd       	rcall	.-1298   	; 0x174 <LCD_WriteData>
			break;
 686:	07 c0       	rjmp	.+14     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
			if (curr_num > 0) { 
				curr_num--;
				LCD_ClearScreen();
				LCD_WriteData(curr_num + '0');
			}
			break;
 688:	00 00       	nop
 68a:	05 c0       	rjmp	.+10     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
			if (curr_num < 9) { 
				curr_num++;
				LCD_ClearScreen();
				LCD_WriteData(curr_num + '0');
			}
			break;
 68c:	00 00       	nop
 68e:	03 c0       	rjmp	.+6      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
					LCD_ClearScreen();
					LCD_WriteData(curr_num + '0');
					count = 0;
				}
			}
			break;
 690:	00 00       	nop
 692:	01 c0       	rjmp	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
				LCD_ClearScreen();
				LCD_WriteData(curr_num + '0');
				count = 0;
			}
		}
		break;
 694:	00 00       	nop
		default:
			//LCD_DisplayString(1, "ERROR");
			break;
		
	}
}
 696:	00 00       	nop
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <main>:

int main(void) {
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0; PORTA = 0xFF;
 6a6:	81 e2       	ldi	r24, 0x21	; 33
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
 6ac:	10 82       	st	Z, r1
 6ae:	82 e2       	ldi	r24, 0x22	; 34
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	2f ef       	ldi	r18, 0xFF	; 255
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 6b8:	87 e2       	ldi	r24, 0x27	; 39
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
 6c2:	88 e2       	ldi	r24, 0x28	; 40
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	fc 01       	movw	r30, r24
 6c8:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 6ca:	8a e2       	ldi	r24, 0x2A	; 42
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	2f ef       	ldi	r18, 0xFF	; 255
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
 6d4:	8b e2       	ldi	r24, 0x2B	; 43
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	fc 01       	movw	r30, r24
 6da:	10 82       	st	Z, r1
	state = Start;
 6dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state+0x1>
 6e0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
	curr_num = 0;
 6e4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <curr_num>
	LCD_init();
 6e8:	00 dd       	rcall	.-1536   	; 0xea <LCD_init>
	
	TimerSet(100);
 6ea:	64 e6       	ldi	r22, 0x64	; 100
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 6f2:	3d de       	rcall	.-902    	; 0x36e <TimerSet>
 6f4:	9e dd       	rcall	.-1220   	; 0x232 <TimerOn>
	
    while (1) {
		cur_inA = ~PINA & 0x03;
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fc 01       	movw	r30, r24
 6fc:	80 81       	ld	r24, Z
 6fe:	80 95       	com	r24
 700:	83 70       	andi	r24, 0x03	; 3
 702:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cur_inA>
		Tick();
 706:	61 de       	rcall	.-830    	; 0x3ca <Tick>
		while (!TimerFlag) {};	// Wait 1 sec
 708:	00 00       	nop
 70a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 70e:	88 23       	and	r24, r24
 710:	e1 f3       	breq	.-8      	; 0x70a <main+0x6c>
		TimerFlag = 0;
 712:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    }
 716:	ef cf       	rjmp	.-34     	; 0x6f6 <main+0x58>

00000718 <__tablejump2__>:
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	00 24       	eor	r0, r0
 71e:	00 1c       	adc	r0, r0
 720:	0b be       	out	0x3b, r0	; 59
 722:	07 90       	elpm	r0, Z+
 724:	f6 91       	elpm	r31, Z
 726:	e0 2d       	mov	r30, r0
 728:	09 94       	ijmp

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
