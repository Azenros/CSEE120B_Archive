
atorr048_stran050_lab7_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800124  00800124  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acd  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000683  00000000  00000000  00001be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  000029ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	83 c1       	rjmp	.+774    	; 0x33c <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	46 02       	muls	r20, r22
  8e:	4d 02       	muls	r20, r29
  90:	5b 02       	muls	r21, r27
  92:	70 02       	muls	r23, r16
  94:	85 02       	muls	r24, r21
  96:	7e 02       	muls	r23, r30
  98:	93 02       	muls	r25, r19
  9a:	a1 02       	muls	r26, r17
  9c:	c5 02       	muls	r28, r21
  9e:	cf 02       	muls	r28, r31
  a0:	d8 02       	muls	r29, r24
  a2:	de 02       	muls	r29, r30
  a4:	f9 02       	muls	r31, r25
  a6:	e6 02       	muls	r30, r22
  a8:	13 03       	mulsu	r17, r19
  aa:	0d 03       	fmul	r16, r21

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ee       	ldi	r30, 0xEC	; 236
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a4 32       	cpi	r26, 0x24	; 36
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a4 e2       	ldi	r26, 0x24	; 36
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	ad 32       	cpi	r26, 0x2D	; 45
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	aa d2       	rcall	.+1364   	; 0x638 <main>
  e4:	01 c3       	rjmp	.+1538   	; 0x6e8 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <LCD_ClearScreen>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR1B = 0x00;
}
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	1a d0       	rcall	.+52     	; 0x128 <LCD_WriteCommand>
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <LCD_init>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	84 e6       	ldi	r24, 0x64	; 100
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac d0       	rcall	.+344    	; 0x262 <delay_ms>
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	0d d0       	rcall	.+26     	; 0x128 <LCD_WriteCommand>
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0b d0       	rcall	.+22     	; 0x128 <LCD_WriteCommand>
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	09 d0       	rcall	.+18     	; 0x128 <LCD_WriteCommand>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	07 d0       	rcall	.+14     	; 0x128 <LCD_WriteCommand>
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a1 d0       	rcall	.+322    	; 0x262 <delay_ms>
 120:	00 00       	nop
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_WriteCommand>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	8b e2       	ldi	r24, 0x2B	; 43
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2b e2       	ldi	r18, 0x2B	; 43
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2f 7b       	andi	r18, 0xBF	; 191
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2b e2       	ldi	r18, 0x2B	; 43
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	20 68       	ori	r18, 0x80	; 128
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	00 00       	nop
 164:	8b e2       	ldi	r24, 0x2B	; 43
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2b e2       	ldi	r18, 0x2B	; 43
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2f 77       	andi	r18, 0x7F	; 127
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	73 d0       	rcall	.+230    	; 0x262 <delay_ms>
 17c:	00 00       	nop
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <LCD_WriteData>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	8b e2       	ldi	r24, 0x2B	; 43
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	2b e2       	ldi	r18, 0x2B	; 43
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	20 64       	ori	r18, 0x40	; 64
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	2b e2       	ldi	r18, 0x2B	; 43
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 81       	ld	r18, Z
 1ba:	20 68       	ori	r18, 0x80	; 128
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	00 00       	nop
 1c2:	8b e2       	ldi	r24, 0x2B	; 43
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2b e2       	ldi	r18, 0x2B	; 43
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	2f 77       	andi	r18, 0x7F	; 127
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	44 d0       	rcall	.+136    	; 0x262 <delay_ms>
 1da:	00 00       	nop
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LCD_DisplayString>:
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <LCD_DisplayString+0x6>
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <LCD_DisplayString+0x8>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	8a 83       	std	Y+2, r24	; 0x02
 1f2:	7c 83       	std	Y+4, r23	; 0x04
 1f4:	6b 83       	std	Y+3, r22	; 0x03
 1f6:	78 df       	rcall	.-272    	; 0xe8 <LCD_ClearScreen>
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01
 1fc:	0f c0       	rjmp	.+30     	; 0x21c <LCD_DisplayString+0x38>
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	98 0f       	add	r25, r24
 204:	99 83       	std	Y+1, r25	; 0x01
 206:	18 d0       	rcall	.+48     	; 0x238 <LCD_Cursor>
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	9c 01       	movw	r18, r24
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	3c 83       	std	Y+4, r19	; 0x04
 214:	2b 83       	std	Y+3, r18	; 0x03
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	b5 df       	rcall	.-150    	; 0x186 <LCD_WriteData>
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	fc 01       	movw	r30, r24
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	59 f7       	brne	.-42     	; 0x1fe <LCD_DisplayString+0x1a>
 228:	00 00       	nop
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCD_Cursor>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	81 31       	cpi	r24, 0x11	; 17
 248:	20 f4       	brcc	.+8      	; 0x252 <LCD_Cursor+0x1a>
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	81 58       	subi	r24, 0x81	; 129
 24e:	6c df       	rcall	.-296    	; 0x128 <LCD_WriteCommand>
 250:	03 c0       	rjmp	.+6      	; 0x258 <LCD_Cursor+0x20>
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	81 55       	subi	r24, 0x51	; 81
 256:	68 df       	rcall	.-304    	; 0x128 <LCD_WriteCommand>
 258:	00 00       	nop
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <delay_ms>:
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <delay_ms+0x6>
 268:	00 d0       	rcall	.+0      	; 0x26a <delay_ms+0x8>
 26a:	00 d0       	rcall	.+0      	; 0x26c <delay_ms+0xa>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	9e 83       	std	Y+6, r25	; 0x06
 272:	8d 83       	std	Y+5, r24	; 0x05
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	19 82       	std	Y+1, r1	; 0x01
 278:	13 c0       	rjmp	.+38     	; 0x2a0 <delay_ms+0x3e>
 27a:	1c 82       	std	Y+4, r1	; 0x04
 27c:	1b 82       	std	Y+3, r1	; 0x03
 27e:	06 c0       	rjmp	.+12     	; 0x28c <delay_ms+0x2a>
 280:	00 00       	nop
 282:	8b 81       	ldd	r24, Y+3	; 0x03
 284:	9c 81       	ldd	r25, Y+4	; 0x04
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	9c 83       	std	Y+4, r25	; 0x04
 28a:	8b 83       	std	Y+3, r24	; 0x03
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	9c 81       	ldd	r25, Y+4	; 0x04
 290:	87 30       	cpi	r24, 0x07	; 7
 292:	93 40       	sbci	r25, 0x03	; 3
 294:	ac f3       	brlt	.-22     	; 0x280 <delay_ms+0x1e>
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	3a 81       	ldd	r19, Y+2	; 0x02
 2a4:	8d 81       	ldd	r24, Y+5	; 0x05
 2a6:	9e 81       	ldd	r25, Y+6	; 0x06
 2a8:	28 17       	cp	r18, r24
 2aa:	39 07       	cpc	r19, r25
 2ac:	34 f3       	brlt	.-52     	; 0x27a <delay_ms+0x18>
 2ae:	00 00       	nop
 2b0:	26 96       	adiw	r28, 0x06	; 6
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <TimerOn>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	81 e8       	ldi	r24, 0x81	; 129
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2b e0       	ldi	r18, 0x0B	; 11
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
 2d4:	88 e8       	ldi	r24, 0x88	; 136
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2d e7       	ldi	r18, 0x7D	; 125
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	31 83       	std	Z+1, r19	; 0x01
 2e0:	20 83       	st	Z, r18
 2e2:	8f e6       	ldi	r24, 0x6F	; 111
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	22 e0       	ldi	r18, 0x02	; 2
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2f8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2fc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_avr_timer_cntcurr>
 300:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_avr_timer_cntcurr+0x1>
 304:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <_avr_timer_cntcurr+0x2>
 308:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <_avr_timer_cntcurr+0x3>
 30c:	8f e5       	ldi	r24, 0x5F	; 95
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	2f e5       	ldi	r18, 0x5F	; 95
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	20 68       	ori	r18, 0x80	; 128
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
 31e:	00 00       	nop
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <TimerISR>:
void TimerISR() {
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
}
 334:	00 00       	nop
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <__vector_13>:
ISR(TIMER1_COMPA_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 34c:	0f 92       	push	r0
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 36e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_avr_timer_cntcurr>
 372:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_avr_timer_cntcurr+0x1>
 376:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <_avr_timer_cntcurr+0x2>
 37a:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x3>
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	a1 09       	sbc	r26, r1
 382:	b1 09       	sbc	r27, r1
 384:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_avr_timer_cntcurr>
 388:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_avr_timer_cntcurr+0x1>
 38c:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <_avr_timer_cntcurr+0x2>
 390:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 394:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_avr_timer_cntcurr>
 398:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <_avr_timer_cntcurr+0x1>
 39c:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <_avr_timer_cntcurr+0x2>
 3a0:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x3>
 3a4:	89 2b       	or	r24, r25
 3a6:	8a 2b       	or	r24, r26
 3a8:	8b 2b       	or	r24, r27
 3aa:	89 f4       	brne	.+34     	; 0x3ce <__vector_13+0x92>
		TimerISR();
 3ac:	bc df       	rcall	.-136    	; 0x326 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3ba:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3be:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_avr_timer_cntcurr>
 3c2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_avr_timer_cntcurr+0x1>
 3c6:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <_avr_timer_cntcurr+0x2>
 3ca:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <_avr_timer_cntcurr+0x3>
	}
}
 3ce:	00 00       	nop
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3f2:	0f 90       	pop	r0
 3f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <TimerSet>:
void TimerSet(unsigned long M) {
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	69 83       	std	Y+1, r22	; 0x01
 40c:	7a 83       	std	Y+2, r23	; 0x02
 40e:	8b 83       	std	Y+3, r24	; 0x03
 410:	9c 83       	std	Y+4, r25	; 0x04
	//Set TimerISR() to tick every M ms
	_avr_timer_M = M;
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	ab 81       	ldd	r26, Y+3	; 0x03
 418:	bc 81       	ldd	r27, Y+4	; 0x04
 41a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 41e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 422:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 426:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 42a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 42e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 432:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 436:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 43a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_avr_timer_cntcurr>
 43e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_avr_timer_cntcurr+0x1>
 442:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <_avr_timer_cntcurr+0x2>
 446:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <_avr_timer_cntcurr+0x3>
}
 44a:	00 00       	nop
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <Tick>:

void Tick() {
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
	
	switch(state) {
 462:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <state>
 466:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <state+0x1>
 46a:	cc 01       	movw	r24, r24
 46c:	a0 e0       	ldi	r26, 0x00	; 0
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	27 e0       	ldi	r18, 0x07	; 7
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	84 1b       	sub	r24, r20
 47a:	95 0b       	sbc	r25, r21
 47c:	28 17       	cp	r18, r24
 47e:	39 07       	cpc	r19, r25
 480:	08 f4       	brcc	.+2      	; 0x484 <Tick+0x2a>
 482:	6d c0       	rjmp	.+218    	; 0x55e <Tick+0x104>
 484:	8a 5b       	subi	r24, 0xBA	; 186
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	fc 01       	movw	r30, r24
 48a:	25 c1       	rjmp	.+586    	; 0x6d6 <__tablejump2__>
		case Start: state = one; break;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 494:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 498:	63 c0       	rjmp	.+198    	; 0x560 <Tick+0x106>
		case one: state = (tmpA == 0x01) ? score_down : two; break;
 49a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tmpA>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	19 f4       	brne	.+6      	; 0x4a8 <Tick+0x4e>
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <Tick+0x52>
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 4b0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 4b4:	55 c0       	rjmp	.+170    	; 0x560 <Tick+0x106>
		case two: state = (tmpA == 0x01) ? score_up : direction ? four : one; break;
 4b6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tmpA>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	51 f0       	breq	.+20     	; 0x4d2 <Tick+0x78>
 4be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <direction>
 4c2:	88 23       	and	r24, r24
 4c4:	19 f0       	breq	.+6      	; 0x4cc <Tick+0x72>
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <Tick+0x7c>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <Tick+0x7c>
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 4da:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 4de:	40 c0       	rjmp	.+128    	; 0x560 <Tick+0x106>
		case four: state = (tmpA == 0x01) ? score_down : two; break;
 4e0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tmpA>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	19 f4       	brne	.+6      	; 0x4ee <Tick+0x94>
 4e8:	85 e0       	ldi	r24, 0x05	; 5
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <Tick+0x98>
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 4f6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 4fa:	32 c0       	rjmp	.+100    	; 0x560 <Tick+0x106>
		case score_down: state = wait; break;
 4fc:	86 e0       	ldi	r24, 0x06	; 6
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 504:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 508:	2b c0       	rjmp	.+86     	; 0x560 <Tick+0x106>
		case score_up: state = (score >= 9) ? win : wait; break;
 50a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 50e:	89 30       	cpi	r24, 0x09	; 9
 510:	18 f0       	brcs	.+6      	; 0x518 <Tick+0xbe>
 512:	87 e0       	ldi	r24, 0x07	; 7
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <Tick+0xc2>
 518:	86 e0       	ldi	r24, 0x06	; 6
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 520:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 524:	1d c0       	rjmp	.+58     	; 0x560 <Tick+0x106>
		case wait: state = (tmpA == 0x01) ? one : wait; break; 
 526:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tmpA>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	19 f4       	brne	.+6      	; 0x534 <Tick+0xda>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <Tick+0xde>
 534:	86 e0       	ldi	r24, 0x06	; 6
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 53c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 540:	0f c0       	rjmp	.+30     	; 0x560 <Tick+0x106>
		case win: state = (tmpA == 0x01) ? Start : win; break;
 542:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tmpA>
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	19 f4       	brne	.+6      	; 0x550 <Tick+0xf6>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <Tick+0xfa>
 550:	87 e0       	ldi	r24, 0x07	; 7
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <state+0x1>
 558:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state>
 55c:	01 c0       	rjmp	.+2      	; 0x560 <Tick+0x106>
		default: break;
 55e:	00 00       	nop
	}
	switch(state) {
 560:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <state>
 564:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <state+0x1>
 568:	cc 01       	movw	r24, r24
 56a:	a0 e0       	ldi	r26, 0x00	; 0
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	27 e0       	ldi	r18, 0x07	; 7
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	84 1b       	sub	r24, r20
 578:	95 0b       	sbc	r25, r21
 57a:	28 17       	cp	r18, r24
 57c:	39 07       	cpc	r19, r25
 57e:	08 f4       	brcc	.+2      	; 0x582 <Tick+0x128>
 580:	50 c0       	rjmp	.+160    	; 0x622 <Tick+0x1c8>
 582:	82 5b       	subi	r24, 0xB2	; 178
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	fc 01       	movw	r30, r24
 588:	a6 c0       	rjmp	.+332    	; 0x6d6 <__tablejump2__>
		case Start: PORTB = 0x00; LCD_ClearScreen(); LCD_WriteData(score + '0'); break;
 58a:	85 e2       	ldi	r24, 0x25	; 37
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	fc 01       	movw	r30, r24
 590:	10 82       	st	Z, r1
 592:	aa dd       	rcall	.-1196   	; 0xe8 <LCD_ClearScreen>
 594:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 598:	80 5d       	subi	r24, 0xD0	; 208
 59a:	f5 dd       	rcall	.-1046   	; 0x186 <LCD_WriteData>
 59c:	49 c0       	rjmp	.+146    	; 0x630 <Tick+0x1d6>
		case one: PORTB = 0x01; direction = 1; break;
 59e:	85 e2       	ldi	r24, 0x25	; 37
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction>
 5ae:	40 c0       	rjmp	.+128    	; 0x630 <Tick+0x1d6>
		case two: PORTB = 0x02; break;
 5b0:	85 e2       	ldi	r24, 0x25	; 37
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	22 e0       	ldi	r18, 0x02	; 2
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
 5ba:	3a c0       	rjmp	.+116    	; 0x630 <Tick+0x1d6>
		case four: PORTB = 0x04; direction = 0; break;
 5bc:	85 e2       	ldi	r24, 0x25	; 37
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	24 e0       	ldi	r18, 0x04	; 4
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 83       	st	Z, r18
 5c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction>
 5ca:	32 c0       	rjmp	.+100    	; 0x630 <Tick+0x1d6>
		case score_down:
			if (score == 0) {}
 5cc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 5d0:	88 23       	and	r24, r24
 5d2:	59 f1       	breq	.+86     	; 0x62a <Tick+0x1d0>
			else if (score < 9) {
 5d4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 5d8:	89 30       	cpi	r24, 0x09	; 9
 5da:	38 f5       	brcc	.+78     	; 0x62a <Tick+0x1d0>
				score--;
 5dc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 5e0:	81 50       	subi	r24, 0x01	; 1
 5e2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <score>
				LCD_ClearScreen();
				LCD_WriteData(score + '0');
 5e6:	80 dd       	rcall	.-1280   	; 0xe8 <LCD_ClearScreen>
 5e8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 5ec:	80 5d       	subi	r24, 0xD0	; 208
 5ee:	cb dd       	rcall	.-1130   	; 0x186 <LCD_WriteData>
			}
			break;
		case score_up:
			score++;
 5f0:	1c c0       	rjmp	.+56     	; 0x62a <Tick+0x1d0>
 5f2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
			LCD_ClearScreen();
 5f8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <score>
			LCD_WriteData(score + '0');
 5fc:	75 dd       	rcall	.-1302   	; 0xe8 <LCD_ClearScreen>
 5fe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 602:	80 5d       	subi	r24, 0xD0	; 208
			if (score >= 9) {
 604:	c0 dd       	rcall	.-1152   	; 0x186 <LCD_WriteData>
 606:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
				LCD_ClearScreen();
 60a:	89 30       	cpi	r24, 0x09	; 9
 60c:	80 f0       	brcs	.+32     	; 0x62e <Tick+0x1d4>
				LCD_DisplayString(1, "WINNER WINNER   CHICKEN DINNER");
 60e:	6c dd       	rcall	.-1320   	; 0xe8 <LCD_ClearScreen>
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	71 e0       	ldi	r23, 0x01	; 1
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	e6 dd       	rcall	.-1076   	; 0x1e4 <LCD_DisplayString>
			}
			break;
 618:	0a c0       	rjmp	.+20     	; 0x62e <Tick+0x1d4>
		case wait: break;
		case win: score = 5; break;
 61a:	85 e0       	ldi	r24, 0x05	; 5
 61c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <score>
 620:	07 c0       	rjmp	.+14     	; 0x630 <Tick+0x1d6>
		default: break;
 622:	00 00       	nop
 624:	05 c0       	rjmp	.+10     	; 0x630 <Tick+0x1d6>
			if (score >= 9) {
				LCD_ClearScreen();
				LCD_DisplayString(1, "WINNER WINNER   CHICKEN DINNER");
			}
			break;
		case wait: break;
 626:	00 00       	nop
 628:	03 c0       	rjmp	.+6      	; 0x630 <Tick+0x1d6>
			else if (score < 9) {
				score--;
				LCD_ClearScreen();
				LCD_WriteData(score + '0');
			}
			break;
 62a:	00 00       	nop
 62c:	01 c0       	rjmp	.+2      	; 0x630 <Tick+0x1d6>
			LCD_WriteData(score + '0');
			if (score >= 9) {
				LCD_ClearScreen();
				LCD_DisplayString(1, "WINNER WINNER   CHICKEN DINNER");
			}
			break;
 62e:	00 00       	nop
		case wait: break;
		case win: score = 5; break;
		default: break;
			
	}
}
 630:	00 00       	nop
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <main>:

int main(void) {
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 640:	81 e2       	ldi	r24, 0x21	; 33
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	10 82       	st	Z, r1
 648:	82 e2       	ldi	r24, 0x22	; 34
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	2f ef       	ldi	r18, 0xFF	; 255
 64e:	fc 01       	movw	r30, r24
 650:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 652:	84 e2       	ldi	r24, 0x24	; 36
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	2f ef       	ldi	r18, 0xFF	; 255
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
 65c:	85 e2       	ldi	r24, 0x25	; 37
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	fc 01       	movw	r30, r24
 662:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 664:	87 e2       	ldi	r24, 0x27	; 39
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	2f ef       	ldi	r18, 0xFF	; 255
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
 66e:	88 e2       	ldi	r24, 0x28	; 40
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 676:	8a e2       	ldi	r24, 0x2A	; 42
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	2f ef       	ldi	r18, 0xFF	; 255
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
 680:	8b e2       	ldi	r24, 0x2B	; 43
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
 686:	10 82       	st	Z, r1
	
	LCD_init();
 688:	39 dd       	rcall	.-1422   	; 0xfc <LCD_init>
	TimerSet(300);
 68a:	6c e2       	ldi	r22, 0x2C	; 44
 68c:	71 e0       	ldi	r23, 0x01	; 1
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 692:	b5 de       	rcall	.-662    	; 0x3fe <TimerSet>
 694:	16 de       	rcall	.-980    	; 0x2c2 <TimerOn>
	score = 5;
 696:	85 e0       	ldi	r24, 0x05	; 5
 698:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <score>
	LCD_ClearScreen();
	LCD_WriteData(score + '0');
 69c:	25 dd       	rcall	.-1462   	; 0xe8 <LCD_ClearScreen>
 69e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <score>
 6a2:	80 5d       	subi	r24, 0xD0	; 208
 6a4:	70 dd       	rcall	.-1312   	; 0x186 <LCD_WriteData>
	while(1) {
		tmpA = ~PINA & 0x01;
 6a6:	80 e2       	ldi	r24, 0x20	; 32
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
 6ac:	80 81       	ld	r24, Z
 6ae:	88 2f       	mov	r24, r24
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	81 70       	andi	r24, 0x01	; 1
 6b4:	99 27       	eor	r25, r25
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	89 2b       	or	r24, r25
 6ba:	09 f0       	breq	.+2      	; 0x6be <main+0x86>
 6bc:	20 e0       	ldi	r18, 0x00	; 0
 6be:	82 2f       	mov	r24, r18
 6c0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <tmpA>
		Tick();
 6c4:	ca de       	rcall	.-620    	; 0x45a <Tick>
		while (!TimerFlag) {};	// Wait 300 ms
 6c6:	00 00       	nop
 6c8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 6cc:	88 23       	and	r24, r24
 6ce:	e1 f3       	breq	.-8      	; 0x6c8 <main+0x90>
		TimerFlag = 0;
 6d0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 6d4:	e8 cf       	rjmp	.-48     	; 0x6a6 <main+0x6e>

000006d6 <__tablejump2__>:
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	00 24       	eor	r0, r0
 6dc:	00 1c       	adc	r0, r0
 6de:	0b be       	out	0x3b, r0	; 59
 6e0:	07 90       	elpm	r0, Z+
 6e2:	f6 91       	elpm	r31, Z
 6e4:	e0 2d       	mov	r30, r0
 6e6:	09 94       	ijmp

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
