
atorr048_stran050_lab11_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000af4  00000b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080010a  0080010a  00000b92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db7  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ec  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d8  00000000  00000000  00003582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	66 c1       	rjmp	.+716    	; 0x302 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 33       	cpi	r26, 0x37	; 55
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1c d3       	rcall	.+1592   	; 0x6fc <main>
  c4:	15 c5       	rjmp	.+2602   	; 0xaf0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	04 d0       	rcall	.+8      	; 0xdc <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_WriteCommand>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
  e8:	8b e2       	ldi	r24, 0x2B	; 43
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2b e2       	ldi	r18, 0x2B	; 43
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	2f 7b       	andi	r18, 0xBF	; 191
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	8b e2       	ldi	r24, 0x2B	; 43
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2b e2       	ldi	r18, 0x2B	; 43
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	20 68       	ori	r18, 0x80	; 128
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	00 00       	nop
 118:	8b e2       	ldi	r24, 0x2B	; 43
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2b e2       	ldi	r18, 0x2B	; 43
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	2f 77       	andi	r18, 0x7F	; 127
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	49 d0       	rcall	.+146    	; 0x1c2 <delay_ms>
 130:	00 00       	nop
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <LCD_WriteData>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	2b e2       	ldi	r18, 0x2B	; 43
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	20 64       	ori	r18, 0x40	; 64
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	8b e2       	ldi	r24, 0x2B	; 43
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2b e2       	ldi	r18, 0x2B	; 43
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	20 68       	ori	r18, 0x80	; 128
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
 174:	00 00       	nop
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2b e2       	ldi	r18, 0x2B	; 43
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	2f 77       	andi	r18, 0x7F	; 127
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	1a d0       	rcall	.+52     	; 0x1c2 <delay_ms>
 18e:	00 00       	nop
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD_Cursor>:
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	1f 92       	push	r1
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	81 31       	cpi	r24, 0x11	; 17
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <LCD_Cursor+0x1a>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	81 58       	subi	r24, 0x81	; 129
 1ae:	96 df       	rcall	.-212    	; 0xdc <LCD_WriteCommand>
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <LCD_Cursor+0x20>
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	81 55       	subi	r24, 0x51	; 81
 1b6:	92 df       	rcall	.-220    	; 0xdc <LCD_WriteCommand>
 1b8:	00 00       	nop
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <delay_ms>:
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <delay_ms+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <delay_ms+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <delay_ms+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	9e 83       	std	Y+6, r25	; 0x06
 1d2:	8d 83       	std	Y+5, r24	; 0x05
 1d4:	1a 82       	std	Y+2, r1	; 0x02
 1d6:	19 82       	std	Y+1, r1	; 0x01
 1d8:	13 c0       	rjmp	.+38     	; 0x200 <delay_ms+0x3e>
 1da:	1c 82       	std	Y+4, r1	; 0x04
 1dc:	1b 82       	std	Y+3, r1	; 0x03
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <delay_ms+0x2a>
 1e0:	00 00       	nop
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	9c 83       	std	Y+4, r25	; 0x04
 1ea:	8b 83       	std	Y+3, r24	; 0x03
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	9c 81       	ldd	r25, Y+4	; 0x04
 1f0:	87 30       	cpi	r24, 0x07	; 7
 1f2:	93 40       	sbci	r25, 0x03	; 3
 1f4:	ac f3       	brlt	.-22     	; 0x1e0 <delay_ms+0x1e>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
 200:	29 81       	ldd	r18, Y+1	; 0x01
 202:	3a 81       	ldd	r19, Y+2	; 0x02
 204:	8d 81       	ldd	r24, Y+5	; 0x05
 206:	9e 81       	ldd	r25, Y+6	; 0x06
 208:	28 17       	cp	r18, r24
 20a:	39 07       	cpc	r19, r25
 20c:	34 f3       	brlt	.-52     	; 0x1da <delay_ms+0x18>
 20e:	00 00       	nop
 210:	26 96       	adiw	r28, 0x06	; 6
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <TimerSet>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <TimerSet+0x6>
 228:	00 d0       	rcall	.+0      	; 0x22a <TimerSet+0x8>
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	69 83       	std	Y+1, r22	; 0x01
 230:	7a 83       	std	Y+2, r23	; 0x02
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	9c 83       	std	Y+4, r25	; 0x04
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	ab 81       	ldd	r26, Y+3	; 0x03
 23c:	bc 81       	ldd	r27, Y+4	; 0x04
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 242:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 246:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 24a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 252:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 256:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 25a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 25e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 262:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 266:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 26a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 26e:	00 00       	nop
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <TimerOn>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	81 e8       	ldi	r24, 0x81	; 129
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2b e0       	ldi	r18, 0x0B	; 11
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
 290:	88 e8       	ldi	r24, 0x88	; 136
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2d e7       	ldi	r18, 0x7D	; 125
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	31 83       	std	Z+1, r19	; 0x01
 29c:	20 83       	st	Z, r18
 29e:	8f e6       	ldi	r24, 0x6F	; 111
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	fc 01       	movw	r30, r24
 2ae:	11 82       	std	Z+1, r1	; 0x01
 2b0:	10 82       	st	Z, r1
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 2c6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 2ca:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 2ce:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 2d2:	8f e5       	ldi	r24, 0x5F	; 95
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	2f e5       	ldi	r18, 0x5F	; 95
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	20 68       	ori	r18, 0x80	; 128
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	00 00       	nop
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <TimerISR>:

void TimerISR() {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 2fa:	00 00       	nop
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 312:	0f 92       	push	r0
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 334:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_cntcurr>
 338:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x1>
 33c:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x2>
 340:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x3>
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	a1 09       	sbc	r26, r1
 348:	b1 09       	sbc	r27, r1
 34a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 34e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 352:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 356:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 35a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_cntcurr>
 35e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x1>
 362:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x2>
 366:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x3>
 36a:	89 2b       	or	r24, r25
 36c:	8a 2b       	or	r24, r26
 36e:	8b 2b       	or	r24, r27
 370:	89 f4       	brne	.+34     	; 0x394 <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
 372:	bc df       	rcall	.-136    	; 0x2ec <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 374:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 378:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 37c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 380:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 384:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 388:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 38c:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 390:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
	}
}
 394:	00 00       	nop
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3b8:	0f 90       	pop	r0
 3ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <findGCD>:
#include <stdio.h>
#include "io.c"
#include "bit.h"
#include "timer.h"

unsigned long int findGCD(unsigned long int a, unsigned long int b) { 
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	2c 97       	sbiw	r28, 0x0c	; 12
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	6d 83       	std	Y+5, r22	; 0x05
 3da:	7e 83       	std	Y+6, r23	; 0x06
 3dc:	8f 83       	std	Y+7, r24	; 0x07
 3de:	98 87       	std	Y+8, r25	; 0x08
 3e0:	29 87       	std	Y+9, r18	; 0x09
 3e2:	3a 87       	std	Y+10, r19	; 0x0a
 3e4:	4b 87       	std	Y+11, r20	; 0x0b
 3e6:	5c 87       	std	Y+12, r21	; 0x0c
	//--------Find GCD function --------------------------------------------------
	unsigned long int c;
	while(1){
		c = a%b;
 3e8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ea:	9e 81       	ldd	r25, Y+6	; 0x06
 3ec:	af 81       	ldd	r26, Y+7	; 0x07
 3ee:	b8 85       	ldd	r27, Y+8	; 0x08
 3f0:	29 85       	ldd	r18, Y+9	; 0x09
 3f2:	3a 85       	ldd	r19, Y+10	; 0x0a
 3f4:	4b 85       	ldd	r20, Y+11	; 0x0b
 3f6:	5c 85       	ldd	r21, Y+12	; 0x0c
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	57 d3       	rcall	.+1710   	; 0xaac <__udivmodsi4>
 3fe:	dc 01       	movw	r26, r24
 400:	cb 01       	movw	r24, r22
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	ab 83       	std	Y+3, r26	; 0x03
 408:	bc 83       	std	Y+4, r27	; 0x04
		if(c==0){return b;}
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	9a 81       	ldd	r25, Y+2	; 0x02
 40e:	ab 81       	ldd	r26, Y+3	; 0x03
 410:	bc 81       	ldd	r27, Y+4	; 0x04
 412:	89 2b       	or	r24, r25
 414:	8a 2b       	or	r24, r26
 416:	8b 2b       	or	r24, r27
 418:	29 f4       	brne	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41a:	89 85       	ldd	r24, Y+9	; 0x09
 41c:	9a 85       	ldd	r25, Y+10	; 0x0a
 41e:	ab 85       	ldd	r26, Y+11	; 0x0b
 420:	bc 85       	ldd	r27, Y+12	; 0x0c
 422:	11 c0       	rjmp	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		a = b;
 424:	89 85       	ldd	r24, Y+9	; 0x09
 426:	9a 85       	ldd	r25, Y+10	; 0x0a
 428:	ab 85       	ldd	r26, Y+11	; 0x0b
 42a:	bc 85       	ldd	r27, Y+12	; 0x0c
 42c:	8d 83       	std	Y+5, r24	; 0x05
 42e:	9e 83       	std	Y+6, r25	; 0x06
 430:	af 83       	std	Y+7, r26	; 0x07
 432:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	ab 81       	ldd	r26, Y+3	; 0x03
 43a:	bc 81       	ldd	r27, Y+4	; 0x04
 43c:	89 87       	std	Y+9, r24	; 0x09
 43e:	9a 87       	std	Y+10, r25	; 0x0a
 440:	ab 87       	std	Y+11, r26	; 0x0b
 442:	bc 87       	std	Y+12, r27	; 0x0c
	}
 444:	d1 cf       	rjmp	.-94     	; 0x3e8 <findGCD+0x24>
	return 0;
	//--------End find GCD function ----------------------------------------------
	
}
 446:	bc 01       	movw	r22, r24
 448:	cd 01       	movw	r24, r26
 44a:	2c 96       	adiw	r28, 0x0c	; 12
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <SMTick1>:
enum SM1_States {SM1_Start, SM1_Wait, SM1_Press, SM1_Hold};  //pause or start the game
enum SM2_States {SM2_Start, SM2_Wait, SM2_Up, SM2_Down, SM2_Hold};  //move the player up or down
enum SM3_States {SM3_Start, SM3_Move};  // if not paused, move the obstacles to the left
//enum SM4_States {SM4_Start, SM4_Check, SM4_Display}; // checks for collision; if collision, pause and display message

int SMTick1(int state) {
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <SMTick1+0x6>
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	9a 83       	std	Y+2, r25	; 0x02
 468:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	91 05       	cpc	r25, r1
 472:	89 f0       	breq	.+34     	; 0x496 <SMTick1+0x3a>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	91 05       	cpc	r25, r1
 478:	1c f4       	brge	.+6      	; 0x480 <SMTick1+0x24>
 47a:	89 2b       	or	r24, r25
 47c:	39 f0       	breq	.+14     	; 0x48c <SMTick1+0x30>
 47e:	2f c0       	rjmp	.+94     	; 0x4de <SMTick1+0x82>
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	91 05       	cpc	r25, r1
 484:	a1 f0       	breq	.+40     	; 0x4ae <SMTick1+0x52>
 486:	03 97       	sbiw	r24, 0x03	; 3
 488:	f1 f0       	breq	.+60     	; 0x4c6 <SMTick1+0x6a>
 48a:	29 c0       	rjmp	.+82     	; 0x4de <SMTick1+0x82>
		case SM1_Start: state = SM1_Wait; break;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	9a 83       	std	Y+2, r25	; 0x02
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	27 c0       	rjmp	.+78     	; 0x4e4 <SMTick1+0x88>
		case SM1_Wait: state = (tmpA == 0x01) ? SM1_Press : SM1_Wait; break;
 496:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	19 f4       	brne	.+6      	; 0x4a4 <SMTick1+0x48>
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <SMTick1+0x4c>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <SMTick1+0x88>
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
 4ae:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	19 f4       	brne	.+6      	; 0x4bc <SMTick1+0x60>
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <SMTick1+0x64>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9a 83       	std	Y+2, r25	; 0x02
 4c2:	89 83       	std	Y+1, r24	; 0x01
 4c4:	0f c0       	rjmp	.+30     	; 0x4e4 <SMTick1+0x88>
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
 4c6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 4ca:	88 23       	and	r24, r24
 4cc:	19 f4       	brne	.+6      	; 0x4d4 <SMTick1+0x78>
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <SMTick1+0x7c>
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <SMTick1+0x88>
		default: state = SM1_Start; break;
 4de:	1a 82       	std	Y+2, r1	; 0x02
 4e0:	19 82       	std	Y+1, r1	; 0x01
 4e2:	00 00       	nop
	}
	switch (state) {
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	91 05       	cpc	r25, r1
 4ec:	a9 f0       	breq	.+42     	; 0x518 <SMTick1+0xbc>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	1c f4       	brge	.+6      	; 0x4fa <SMTick1+0x9e>
 4f4:	89 2b       	or	r24, r25
 4f6:	91 f0       	breq	.+36     	; 0x51c <SMTick1+0xc0>
			break;
		case SM1_Hold:
// 			LCD_ClearScreen();
// 			LCD_DisplayString(1, "hold");
			break;
		default: break;
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <SMTick1+0xc6>
		case SM1_Wait: state = (tmpA == 0x01) ? SM1_Press : SM1_Wait; break;
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
		default: state = SM1_Start; break;
	}
	switch (state) {
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	91 05       	cpc	r25, r1
 4fe:	19 f0       	breq	.+6      	; 0x506 <SMTick1+0xaa>
 500:	03 97       	sbiw	r24, 0x03	; 3
 502:	71 f0       	breq	.+28     	; 0x520 <SMTick1+0xc4>
			break;
		case SM1_Hold:
// 			LCD_ClearScreen();
// 			LCD_DisplayString(1, "hold");
			break;
		default: break;
 504:	0e c0       	rjmp	.+28     	; 0x522 <SMTick1+0xc6>
		case SM1_Wait: 
// 			LCD_ClearScreen();
// 			LCD_DisplayString(1, "now waiting");
			break;
		case SM1_Press: 
			pause = (pause) ? 0 : 1; 
 506:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <pause>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	99 23       	and	r25, r25
 50e:	09 f0       	breq	.+2      	; 0x512 <SMTick1+0xb6>
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <pause>
// 			}
// 			else {
// 				LCD_ClearScreen();
// 				LCD_DisplayString(1, "now unpaused");
//			}
			break;
 516:	05 c0       	rjmp	.+10     	; 0x522 <SMTick1+0xc6>
	switch (state) {
		case SM1_Start: break;
		case SM1_Wait: 
// 			LCD_ClearScreen();
// 			LCD_DisplayString(1, "now waiting");
			break;
 518:	00 00       	nop
 51a:	03 c0       	rjmp	.+6      	; 0x522 <SMTick1+0xc6>
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
		default: state = SM1_Start; break;
	}
	switch (state) {
		case SM1_Start: break;
 51c:	00 00       	nop
 51e:	01 c0       	rjmp	.+2      	; 0x522 <SMTick1+0xc6>
//			}
			break;
		case SM1_Hold:
// 			LCD_ClearScreen();
// 			LCD_DisplayString(1, "hold");
			break;
 520:	00 00       	nop
		default: break;
	}
	return state;
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	9a 81       	ldd	r25, Y+2	; 0x02
}
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <SMTick2>:
int SMTick2(int state) {
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	00 d0       	rcall	.+0      	; 0x536 <SMTick2+0x6>
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	82 30       	cpi	r24, 0x02	; 2
 544:	91 05       	cpc	r25, r1
 546:	51 f1       	breq	.+84     	; 0x59c <SMTick2+0x6c>
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	91 05       	cpc	r25, r1
 54c:	2c f4       	brge	.+10     	; 0x558 <SMTick2+0x28>
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	49 f0       	breq	.+18     	; 0x564 <SMTick2+0x34>
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	61 f0       	breq	.+24     	; 0x56e <SMTick2+0x3e>
 556:	46 c0       	rjmp	.+140    	; 0x5e4 <SMTick2+0xb4>
 558:	83 30       	cpi	r24, 0x03	; 3
 55a:	91 05       	cpc	r25, r1
 55c:	59 f1       	breq	.+86     	; 0x5b4 <SMTick2+0x84>
 55e:	04 97       	sbiw	r24, 0x04	; 4
 560:	a9 f1       	breq	.+106    	; 0x5cc <SMTick2+0x9c>
 562:	40 c0       	rjmp	.+128    	; 0x5e4 <SMTick2+0xb4>
		case SM2_Start: state = SM2_Wait; break;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9a 83       	std	Y+2, r25	; 0x02
 56a:	89 83       	std	Y+1, r24	; 0x01
 56c:	3e c0       	rjmp	.+124    	; 0x5ea <SMTick2+0xba>
		case SM2_Wait: 
			if (tmpA == 0x02) {
 56e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	29 f4       	brne	.+10     	; 0x580 <SMTick2+0x50>
				state = SM2_Up;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	9a 83       	std	Y+2, r25	; 0x02
 57c:	89 83       	std	Y+1, r24	; 0x01
				state = SM2_Down;
			}
			else {
				state = SM2_Wait;
			}
			break;
 57e:	35 c0       	rjmp	.+106    	; 0x5ea <SMTick2+0xba>
		case SM2_Start: state = SM2_Wait; break;
		case SM2_Wait: 
			if (tmpA == 0x02) {
				state = SM2_Up;
			}
			else if (tmpA == 0x04) {
 580:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	29 f4       	brne	.+10     	; 0x592 <SMTick2+0x62>
				state = SM2_Down;
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	9a 83       	std	Y+2, r25	; 0x02
 58e:	89 83       	std	Y+1, r24	; 0x01
			}
			else {
				state = SM2_Wait;
			}
			break;
 590:	2c c0       	rjmp	.+88     	; 0x5ea <SMTick2+0xba>
			}
			else if (tmpA == 0x04) {
				state = SM2_Down;
			}
			else {
				state = SM2_Wait;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	9a 83       	std	Y+2, r25	; 0x02
 598:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 59a:	27 c0       	rjmp	.+78     	; 0x5ea <SMTick2+0xba>
		case SM2_Up:
			state = (tmpA == 0x02) ? SM2_Hold : SM2_Wait;
 59c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	19 f4       	brne	.+6      	; 0x5aa <SMTick2+0x7a>
 5a4:	84 e0       	ldi	r24, 0x04	; 4
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <SMTick2+0x7e>
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	9a 83       	std	Y+2, r25	; 0x02
 5b0:	89 83       	std	Y+1, r24	; 0x01
			break;
 5b2:	1b c0       	rjmp	.+54     	; 0x5ea <SMTick2+0xba>
		case SM2_Down:
			state = (tmpA == 0x04) ? SM2_Hold : SM2_Wait;
 5b4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 5b8:	84 30       	cpi	r24, 0x04	; 4
 5ba:	19 f4       	brne	.+6      	; 0x5c2 <SMTick2+0x92>
 5bc:	84 e0       	ldi	r24, 0x04	; 4
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <SMTick2+0x96>
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	9a 83       	std	Y+2, r25	; 0x02
 5c8:	89 83       	std	Y+1, r24	; 0x01
			break;
 5ca:	0f c0       	rjmp	.+30     	; 0x5ea <SMTick2+0xba>
		case SM2_Hold:
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
 5cc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tmpA>
 5d0:	88 23       	and	r24, r24
 5d2:	19 f4       	brne	.+6      	; 0x5da <SMTick2+0xaa>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <SMTick2+0xae>
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
			break;
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <SMTick2+0xba>
		default: state = SM2_Start; break;
 5e4:	1a 82       	std	Y+2, r1	; 0x02
 5e6:	19 82       	std	Y+1, r1	; 0x01
 5e8:	00 00       	nop
	}
	switch (state) {
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	9a 81       	ldd	r25, Y+2	; 0x02
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	91 05       	cpc	r25, r1
 5f2:	b9 f0       	breq	.+46     	; 0x622 <SMTick2+0xf2>
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	91 05       	cpc	r25, r1
 5f8:	1c f4       	brge	.+6      	; 0x600 <SMTick2+0xd0>
 5fa:	89 2b       	or	r24, r25
 5fc:	a1 f0       	breq	.+40     	; 0x626 <SMTick2+0xf6>
		case SM2_Start: break;
		case SM2_Wait: break;
		case SM2_Up: upDown = 1; LCD_Cursor(2); break;
		case SM2_Down: upDown = 0; LCD_Cursor(18); break;
		default: break;
 5fe:	14 c0       	rjmp	.+40     	; 0x628 <SMTick2+0xf8>
		case SM2_Hold:
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	91 05       	cpc	r25, r1
 604:	19 f0       	breq	.+6      	; 0x60c <SMTick2+0xdc>
 606:	03 97       	sbiw	r24, 0x03	; 3
 608:	39 f0       	breq	.+14     	; 0x618 <SMTick2+0xe8>
		case SM2_Start: break;
		case SM2_Wait: break;
		case SM2_Up: upDown = 1; LCD_Cursor(2); break;
		case SM2_Down: upDown = 0; LCD_Cursor(18); break;
		default: break;
 60a:	0e c0       	rjmp	.+28     	; 0x628 <SMTick2+0xf8>
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
		case SM2_Wait: break;
		case SM2_Up: upDown = 1; LCD_Cursor(2); break;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <upDown>
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	c1 dd       	rcall	.-1150   	; 0x198 <LCD_Cursor>
 616:	08 c0       	rjmp	.+16     	; 0x628 <SMTick2+0xf8>
		case SM2_Down: upDown = 0; LCD_Cursor(18); break;
 618:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <upDown>
 61c:	82 e1       	ldi	r24, 0x12	; 18
 61e:	bc dd       	rcall	.-1160   	; 0x198 <LCD_Cursor>
 620:	03 c0       	rjmp	.+6      	; 0x628 <SMTick2+0xf8>
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
		case SM2_Wait: break;
 622:	00 00       	nop
 624:	01 c0       	rjmp	.+2      	; 0x628 <SMTick2+0xf8>
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
 626:	00 00       	nop
		case SM2_Wait: break;
		case SM2_Up: upDown = 1; LCD_Cursor(2); break;
		case SM2_Down: upDown = 0; LCD_Cursor(18); break;
		default: break;
	}
	return state;
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	9a 81       	ldd	r25, Y+2	; 0x02
}
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <SMTick3>:
int SMTick3(int state) {
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	00 d0       	rcall	.+0      	; 0x63c <SMTick3+0x6>
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	9a 83       	std	Y+2, r25	; 0x02
 642:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	9a 81       	ldd	r25, Y+2	; 0x02
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	19 f0       	breq	.+6      	; 0x652 <SMTick3+0x1c>
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	49 f0       	breq	.+18     	; 0x662 <SMTick3+0x2c>
 650:	05 c0       	rjmp	.+10     	; 0x65c <SMTick3+0x26>
		case SM3_Start: state = SM3_Move; break;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	9a 83       	std	Y+2, r25	; 0x02
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	04 c0       	rjmp	.+8      	; 0x664 <SMTick3+0x2e>
		case SM3_Move: break;
		default: state = SM3_Start; break;
 65c:	1a 82       	std	Y+2, r1	; 0x02
 65e:	19 82       	std	Y+1, r1	; 0x01
 660:	01 c0       	rjmp	.+2      	; 0x664 <SMTick3+0x2e>
	return state;
}
int SMTick3(int state) {
	switch (state) {
		case SM3_Start: state = SM3_Move; break;
		case SM3_Move: break;
 662:	00 00       	nop
		default: state = SM3_Start; break;
	}
	switch (state) {
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	9a 81       	ldd	r25, Y+2	; 0x02
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	19 f0       	breq	.+6      	; 0x672 <SMTick3+0x3c>
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	41 f0       	breq	.+16     	; 0x680 <SMTick3+0x4a>
				LCD_WriteData(0x01);
				LCD_Cursor(ob2Loc);
				LCD_WriteData(obstacle);
			}
			break;
		default: break;
 670:	3e c0       	rjmp	.+124    	; 0x6ee <SMTick3+0xb8>
		case SM3_Move: break;
		default: state = SM3_Start; break;
	}
	switch (state) {
		case SM3_Start: 
			ob1Loc = 15;
 672:	8f e0       	ldi	r24, 0x0F	; 15
 674:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ob1Loc>
			ob2Loc = 28;
 678:	8c e1       	ldi	r24, 0x1C	; 28
 67a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ob2Loc>
			
			break;
 67e:	37 c0       	rjmp	.+110    	; 0x6ee <SMTick3+0xb8>
		case SM3_Move:
			if (!pause) {
 680:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <pause>
 684:	88 23       	and	r24, r24
 686:	91 f5       	brne	.+100    	; 0x6ec <SMTick3+0xb6>
				if (ob1Loc == 1) {
 688:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ob1Loc>
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	21 f4       	brne	.+8      	; 0x698 <SMTick3+0x62>
					ob1Loc = 16;
 690:	80 e1       	ldi	r24, 0x10	; 16
 692:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ob1Loc>
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <SMTick3+0x6c>
				}
				else {
					ob1Loc--;
 698:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ob1Loc>
 69c:	81 50       	subi	r24, 0x01	; 1
 69e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ob1Loc>
				}
				if (ob2Loc == 17) {
 6a2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ob2Loc>
 6a6:	81 31       	cpi	r24, 0x11	; 17
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <SMTick3+0x7c>
					ob2Loc = 32;
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ob2Loc>
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <SMTick3+0x86>
				}
				else {
					ob2Loc--;
 6b2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ob2Loc>
 6b6:	81 50       	subi	r24, 0x01	; 1
 6b8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ob2Loc>
				}
				
				LCD_Cursor(ob1Loc + 1);
 6bc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ob1Loc>
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
 6c2:	6a dd       	rcall	.-1324   	; 0x198 <LCD_Cursor>
				LCD_WriteData(0x01);
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	39 dd       	rcall	.-1422   	; 0x13a <LCD_WriteData>
				LCD_Cursor(ob1Loc);
 6c8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ob1Loc>
 6cc:	65 dd       	rcall	.-1334   	; 0x198 <LCD_Cursor>
				LCD_WriteData(obstacle);
 6ce:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <obstacle>
 6d2:	33 dd       	rcall	.-1434   	; 0x13a <LCD_WriteData>
				
				LCD_Cursor(ob2Loc + 1);
 6d4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ob2Loc>
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	5e dd       	rcall	.-1348   	; 0x198 <LCD_Cursor>
				LCD_WriteData(0x01);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	2d dd       	rcall	.-1446   	; 0x13a <LCD_WriteData>
				LCD_Cursor(ob2Loc);
 6e0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ob2Loc>
 6e4:	59 dd       	rcall	.-1358   	; 0x198 <LCD_Cursor>
 6e6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <obstacle>
				LCD_WriteData(obstacle);
 6ea:	27 dd       	rcall	.-1458   	; 0x13a <LCD_WriteData>
 6ec:	00 00       	nop
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
			}
			break;
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
		default: break;
	}
	return state;
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <main>:
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17

int main() {
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	aa 97       	sbiw	r28, 0x2a	; 42
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;// Button inputs
 714:	81 e2       	ldi	r24, 0x21	; 33
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	fc 01       	movw	r30, r24
 71a:	10 82       	st	Z, r1
 71c:	82 e2       	ldi	r24, 0x22	; 34
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;// LCD output
 726:	87 e2       	ldi	r24, 0x27	; 39
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	fc 01       	movw	r30, r24
 72e:	20 83       	st	Z, r18
 730:	88 e2       	ldi	r24, 0x28	; 40
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	fc 01       	movw	r30, r24
 736:	10 82       	st	Z, r1
	DDRD = 0xFF, PORTD = 0x00; //LCD output (PD6-7)
 738:	8a e2       	ldi	r24, 0x2A	; 42
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	2f ef       	ldi	r18, 0xFF	; 255
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
 742:	8b e2       	ldi	r24, 0x2B	; 43
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	fc 01       	movw	r30, r24
 748:	10 82       	st	Z, r1
	// . . . etc

	// Period for the tasks
	unsigned long int SMTick1_calc = 100;
 74a:	84 e6       	ldi	r24, 0x64	; 100
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	a0 e0       	ldi	r26, 0x00	; 0
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	8b 83       	std	Y+3, r24	; 0x03
 754:	9c 83       	std	Y+4, r25	; 0x04
 756:	ad 83       	std	Y+5, r26	; 0x05
 758:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 100;
 75a:	84 e6       	ldi	r24, 0x64	; 100
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	a0 e0       	ldi	r26, 0x00	; 0
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	8f 83       	std	Y+7, r24	; 0x07
 764:	98 87       	std	Y+8, r25	; 0x08
 766:	a9 87       	std	Y+9, r26	; 0x09
 768:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 300;
 76a:	8c e2       	ldi	r24, 0x2C	; 44
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	a0 e0       	ldi	r26, 0x00	; 0
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	8b 87       	std	Y+11, r24	; 0x0b
 774:	9c 87       	std	Y+12, r25	; 0x0c
 776:	ad 87       	std	Y+13, r26	; 0x0d
 778:	be 87       	std	Y+14, r27	; 0x0e

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	a0 e0       	ldi	r26, 0x00	; 0
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	8f 87       	std	Y+15, r24	; 0x0f
 784:	98 8b       	std	Y+16, r25	; 0x10
 786:	a9 8b       	std	Y+17, r26	; 0x11
 788:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
 78a:	2f 81       	ldd	r18, Y+7	; 0x07
 78c:	38 85       	ldd	r19, Y+8	; 0x08
 78e:	49 85       	ldd	r20, Y+9	; 0x09
 790:	5a 85       	ldd	r21, Y+10	; 0x0a
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	9c 81       	ldd	r25, Y+4	; 0x04
 796:	ad 81       	ldd	r26, Y+5	; 0x05
 798:	be 81       	ldd	r27, Y+6	; 0x06
 79a:	bc 01       	movw	r22, r24
 79c:	cd 01       	movw	r24, r26
 79e:	12 de       	rcall	.-988    	; 0x3c4 <findGCD>
 7a0:	dc 01       	movw	r26, r24
 7a2:	cb 01       	movw	r24, r22
 7a4:	8f 87       	std	Y+15, r24	; 0x0f
 7a6:	98 8b       	std	Y+16, r25	; 0x10
 7a8:	a9 8b       	std	Y+17, r26	; 0x11
 7aa:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
 7ac:	2b 85       	ldd	r18, Y+11	; 0x0b
 7ae:	3c 85       	ldd	r19, Y+12	; 0x0c
 7b0:	4d 85       	ldd	r20, Y+13	; 0x0d
 7b2:	5e 85       	ldd	r21, Y+14	; 0x0e
 7b4:	8f 85       	ldd	r24, Y+15	; 0x0f
 7b6:	98 89       	ldd	r25, Y+16	; 0x10
 7b8:	a9 89       	ldd	r26, Y+17	; 0x11
 7ba:	ba 89       	ldd	r27, Y+18	; 0x12
 7bc:	bc 01       	movw	r22, r24
 7be:	cd 01       	movw	r24, r26
 7c0:	01 de       	rcall	.-1022   	; 0x3c4 <findGCD>
 7c2:	dc 01       	movw	r26, r24
 7c4:	cb 01       	movw	r24, r22
 7c6:	8f 87       	std	Y+15, r24	; 0x0f
 7c8:	98 8b       	std	Y+16, r25	; 0x10
 7ca:	a9 8b       	std	Y+17, r26	; 0x11
 7cc:	ba 8b       	std	Y+18, r27	; 0x12

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 7ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 7d0:	98 89       	ldd	r25, Y+16	; 0x10
 7d2:	a9 89       	ldd	r26, Y+17	; 0x11
 7d4:	ba 89       	ldd	r27, Y+18	; 0x12
 7d6:	8b 8b       	std	Y+19, r24	; 0x13
 7d8:	9c 8b       	std	Y+20, r25	; 0x14
 7da:	ad 8b       	std	Y+21, r26	; 0x15
 7dc:	be 8b       	std	Y+22, r27	; 0x16

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	ad 81       	ldd	r26, Y+5	; 0x05
 7e4:	be 81       	ldd	r27, Y+6	; 0x06
 7e6:	2b 89       	ldd	r18, Y+19	; 0x13
 7e8:	3c 89       	ldd	r19, Y+20	; 0x14
 7ea:	4d 89       	ldd	r20, Y+21	; 0x15
 7ec:	5e 89       	ldd	r21, Y+22	; 0x16
 7ee:	bc 01       	movw	r22, r24
 7f0:	cd 01       	movw	r24, r26
 7f2:	5c d1       	rcall	.+696    	; 0xaac <__udivmodsi4>
 7f4:	da 01       	movw	r26, r20
 7f6:	c9 01       	movw	r24, r18
 7f8:	8f 8b       	std	Y+23, r24	; 0x17
 7fa:	98 8f       	std	Y+24, r25	; 0x18
 7fc:	a9 8f       	std	Y+25, r26	; 0x19
 7fe:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 800:	8f 81       	ldd	r24, Y+7	; 0x07
 802:	98 85       	ldd	r25, Y+8	; 0x08
 804:	a9 85       	ldd	r26, Y+9	; 0x09
 806:	ba 85       	ldd	r27, Y+10	; 0x0a
 808:	2b 89       	ldd	r18, Y+19	; 0x13
 80a:	3c 89       	ldd	r19, Y+20	; 0x14
 80c:	4d 89       	ldd	r20, Y+21	; 0x15
 80e:	5e 89       	ldd	r21, Y+22	; 0x16
 810:	bc 01       	movw	r22, r24
 812:	cd 01       	movw	r24, r26
 814:	4b d1       	rcall	.+662    	; 0xaac <__udivmodsi4>
 816:	da 01       	movw	r26, r20
 818:	c9 01       	movw	r24, r18
 81a:	8b 8f       	std	Y+27, r24	; 0x1b
 81c:	9c 8f       	std	Y+28, r25	; 0x1c
 81e:	ad 8f       	std	Y+29, r26	; 0x1d
 820:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 822:	8b 85       	ldd	r24, Y+11	; 0x0b
 824:	9c 85       	ldd	r25, Y+12	; 0x0c
 826:	ad 85       	ldd	r26, Y+13	; 0x0d
 828:	be 85       	ldd	r27, Y+14	; 0x0e
 82a:	2b 89       	ldd	r18, Y+19	; 0x13
 82c:	3c 89       	ldd	r19, Y+20	; 0x14
 82e:	4d 89       	ldd	r20, Y+21	; 0x15
 830:	5e 89       	ldd	r21, Y+22	; 0x16
 832:	bc 01       	movw	r22, r24
 834:	cd 01       	movw	r24, r26
 836:	3a d1       	rcall	.+628    	; 0xaac <__udivmodsi4>
 838:	da 01       	movw	r26, r20
 83a:	c9 01       	movw	r24, r18
 83c:	8f 8f       	std	Y+31, r24	; 0x1f
 83e:	98 a3       	std	Y+32, r25	; 0x20
 840:	a9 a3       	std	Y+33, r26	; 0x21
 842:	ba a3       	std	Y+34, r27	; 0x22


	//Declare an array of tasks
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2 , &task3};
 844:	86 e0       	ldi	r24, 0x06	; 6
 846:	e4 e0       	ldi	r30, 0x04	; 4
 848:	f1 e0       	ldi	r31, 0x01	; 1
 84a:	de 01       	movw	r26, r28
 84c:	95 96       	adiw	r26, 0x25	; 37
 84e:	01 90       	ld	r0, Z+
 850:	0d 92       	st	X+, r0
 852:	8a 95       	dec	r24
 854:	e1 f7       	brne	.-8      	; 0x84e <main+0x152>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 856:	83 e0       	ldi	r24, 0x03	; 3
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	9c a3       	std	Y+36, r25	; 0x24
 85c:	8b a3       	std	Y+35, r24	; 0x23

	// Task 1
	task1.state = -1;//Task initial state.
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <task1.1962>
	task1.period = SMTick1_period;//Task Period.
 864:	8f 89       	ldd	r24, Y+23	; 0x17
 866:	98 8d       	ldd	r25, Y+24	; 0x18
 868:	a9 8d       	ldd	r26, Y+25	; 0x19
 86a:	ba 8d       	ldd	r27, Y+26	; 0x1a
 86c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <task1.1962+0x1>
 870:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <task1.1962+0x2>
 874:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <task1.1962+0x3>
 878:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <task1.1962+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 87c:	8f 89       	ldd	r24, Y+23	; 0x17
 87e:	98 8d       	ldd	r25, Y+24	; 0x18
 880:	a9 8d       	ldd	r26, Y+25	; 0x19
 882:	ba 8d       	ldd	r27, Y+26	; 0x1a
 884:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <task1.1962+0x5>
 888:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <task1.1962+0x6>
 88c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <task1.1962+0x7>
 890:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <task1.1962+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 894:	8e e2       	ldi	r24, 0x2E	; 46
 896:	92 e0       	ldi	r25, 0x02	; 2
 898:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <task1.1962+0xa>
 89c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <task1.1962+0x9>

	// Task 2
	task2.state = -1;//Task initial state.
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <task2.1963>
	task2.period = SMTick2_period;//Task Period.
 8a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 8a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 8aa:	ad 8d       	ldd	r26, Y+29	; 0x1d
 8ac:	be 8d       	ldd	r27, Y+30	; 0x1e
 8ae:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <task2.1963+0x1>
 8b2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <task2.1963+0x2>
 8b6:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <task2.1963+0x3>
 8ba:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <task2.1963+0x4>
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 8be:	8b 8d       	ldd	r24, Y+27	; 0x1b
 8c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 8c2:	ad 8d       	ldd	r26, Y+29	; 0x1d
 8c4:	be 8d       	ldd	r27, Y+30	; 0x1e
 8c6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <task2.1963+0x5>
 8ca:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <task2.1963+0x6>
 8ce:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <task2.1963+0x7>
 8d2:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <task2.1963+0x8>
	task2.TickFct = &SMTick2;//Function pointer for the tick
 8d6:	88 e9       	ldi	r24, 0x98	; 152
 8d8:	92 e0       	ldi	r25, 0x02	; 2
 8da:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <task2.1963+0xa>
 8de:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <task2.1963+0x9>

	// Task 3
	task3.state = -1;//Task initial state.
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <task3.1964>
	task3.period = SMTick3_period;//Task Period.
 8e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
 8ea:	98 a1       	ldd	r25, Y+32	; 0x20
 8ec:	a9 a1       	ldd	r26, Y+33	; 0x21
 8ee:	ba a1       	ldd	r27, Y+34	; 0x22
 8f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <task3.1964+0x1>
 8f4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <task3.1964+0x2>
 8f8:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <task3.1964+0x3>
 8fc:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <task3.1964+0x4>
	task3.elapsedTime = SMTick3_period;//Task current elapsed time.
 900:	8f 8d       	ldd	r24, Y+31	; 0x1f
 902:	98 a1       	ldd	r25, Y+32	; 0x20
 904:	a9 a1       	ldd	r26, Y+33	; 0x21
 906:	ba a1       	ldd	r27, Y+34	; 0x22
 908:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <task3.1964+0x5>
 90c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <task3.1964+0x6>
 910:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <task3.1964+0x7>
 914:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <task3.1964+0x8>
	task3.TickFct = &SMTick3;//Function pointer for the tick
 918:	8b e1       	ldi	r24, 0x1B	; 27
 91a:	93 e0       	ldi	r25, 0x03	; 3
 91c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <task3.1964+0xa>
 920:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <task3.1964+0x9>

	// Set the timer and turn it on
	TimerSet(GCD);
 924:	8b 89       	ldd	r24, Y+19	; 0x13
 926:	9c 89       	ldd	r25, Y+20	; 0x14
 928:	ad 89       	ldd	r26, Y+21	; 0x15
 92a:	be 89       	ldd	r27, Y+22	; 0x16
 92c:	bc 01       	movw	r22, r24
	TimerOn();
 92e:	cd 01       	movw	r24, r26
	
	LCD_ClearScreen();
 930:	78 dc       	rcall	.-1808   	; 0x222 <TimerSet>
 932:	a5 dc       	rcall	.-1718   	; 0x27e <TimerOn>
	
	
	obstacle = '#';
 934:	c9 db       	rcall	.-2158   	; 0xc8 <LCD_ClearScreen>
 936:	83 e2       	ldi	r24, 0x23	; 35
 938:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <obstacle>
	
// 	LCD_Cursor(ob1Loc); LCD_WriteData(obstacle);
// 	LCD_Cursor(ob2Loc); LCD_WriteData(obstacle);
 	LCD_Cursor(2);
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	2c dc       	rcall	.-1960   	; 0x198 <LCD_Cursor>

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		tmpA = ~PINA & 0x07;
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	fc 01       	movw	r30, r24
 946:	80 81       	ld	r24, Z
 948:	80 95       	com	r24
 94a:	87 70       	andi	r24, 0x07	; 7
 94c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tmpA>
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 950:	1a 82       	std	Y+2, r1	; 0x02
 952:	19 82       	std	Y+1, r1	; 0x01
 954:	9b c0       	rjmp	.+310    	; 0xa8c <main+0x390>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	9a 81       	ldd	r25, Y+2	; 0x02
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	9e 01       	movw	r18, r28
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	82 0f       	add	r24, r18
 966:	93 1f       	adc	r25, r19
 968:	84 96       	adiw	r24, 0x24	; 36
 96a:	fc 01       	movw	r30, r24
 96c:	80 81       	ld	r24, Z
 96e:	91 81       	ldd	r25, Z+1	; 0x01
 970:	fc 01       	movw	r30, r24
 972:	25 81       	ldd	r18, Z+5	; 0x05
 974:	36 81       	ldd	r19, Z+6	; 0x06
 976:	47 81       	ldd	r20, Z+7	; 0x07
 978:	50 85       	ldd	r21, Z+8	; 0x08
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	9a 81       	ldd	r25, Y+2	; 0x02
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	be 01       	movw	r22, r28
 984:	6f 5f       	subi	r22, 0xFF	; 255
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	86 0f       	add	r24, r22
 98a:	97 1f       	adc	r25, r23
 98c:	84 96       	adiw	r24, 0x24	; 36
 98e:	fc 01       	movw	r30, r24
 990:	80 81       	ld	r24, Z
 992:	91 81       	ldd	r25, Z+1	; 0x01
 994:	fc 01       	movw	r30, r24
 996:	81 81       	ldd	r24, Z+1	; 0x01
 998:	92 81       	ldd	r25, Z+2	; 0x02
 99a:	a3 81       	ldd	r26, Z+3	; 0x03
 99c:	b4 81       	ldd	r27, Z+4	; 0x04
 99e:	28 17       	cp	r18, r24
 9a0:	39 07       	cpc	r19, r25
 9a2:	4a 07       	cpc	r20, r26
 9a4:	5b 07       	cpc	r21, r27
 9a6:	09 f0       	breq	.+2      	; 0x9aa <main+0x2ae>
 9a8:	45 c0       	rjmp	.+138    	; 0xa34 <main+0x338>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	9a 81       	ldd	r25, Y+2	; 0x02
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	9e 01       	movw	r18, r28
 9b4:	2f 5f       	subi	r18, 0xFF	; 255
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	82 0f       	add	r24, r18
 9ba:	93 1f       	adc	r25, r19
 9bc:	84 96       	adiw	r24, 0x24	; 36
 9be:	fc 01       	movw	r30, r24
 9c0:	00 81       	ld	r16, Z
 9c2:	11 81       	ldd	r17, Z+1	; 0x01
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	9a 81       	ldd	r25, Y+2	; 0x02
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	9e 01       	movw	r18, r28
 9ce:	2f 5f       	subi	r18, 0xFF	; 255
 9d0:	3f 4f       	sbci	r19, 0xFF	; 255
 9d2:	82 0f       	add	r24, r18
 9d4:	93 1f       	adc	r25, r19
 9d6:	84 96       	adiw	r24, 0x24	; 36
 9d8:	fc 01       	movw	r30, r24
 9da:	80 81       	ld	r24, Z
 9dc:	91 81       	ldd	r25, Z+1	; 0x01
 9de:	fc 01       	movw	r30, r24
 9e0:	21 85       	ldd	r18, Z+9	; 0x09
 9e2:	32 85       	ldd	r19, Z+10	; 0x0a
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	ae 01       	movw	r20, r28
 9ee:	4f 5f       	subi	r20, 0xFF	; 255
 9f0:	5f 4f       	sbci	r21, 0xFF	; 255
 9f2:	84 0f       	add	r24, r20
 9f4:	95 1f       	adc	r25, r21
 9f6:	84 96       	adiw	r24, 0x24	; 36
 9f8:	fc 01       	movw	r30, r24
 9fa:	80 81       	ld	r24, Z
 9fc:	91 81       	ldd	r25, Z+1	; 0x01
 9fe:	fc 01       	movw	r30, r24
 a00:	80 81       	ld	r24, Z
 a02:	08 2e       	mov	r0, r24
 a04:	00 0c       	add	r0, r0
 a06:	99 0b       	sbc	r25, r25
 a08:	f9 01       	movw	r30, r18
 a0a:	09 95       	icall
 a0c:	f8 01       	movw	r30, r16
 a0e:	80 83       	st	Z, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	9a 81       	ldd	r25, Y+2	; 0x02
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	9e 01       	movw	r18, r28
 a1a:	2f 5f       	subi	r18, 0xFF	; 255
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	82 0f       	add	r24, r18
 a20:	93 1f       	adc	r25, r19
 a22:	84 96       	adiw	r24, 0x24	; 36
 a24:	fc 01       	movw	r30, r24
 a26:	80 81       	ld	r24, Z
 a28:	91 81       	ldd	r25, Z+1	; 0x01
 a2a:	fc 01       	movw	r30, r24
 a2c:	15 82       	std	Z+5, r1	; 0x05
 a2e:	16 82       	std	Z+6, r1	; 0x06
 a30:	17 82       	std	Z+7, r1	; 0x07
 a32:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	9a 81       	ldd	r25, Y+2	; 0x02
 a38:	88 0f       	add	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	9e 01       	movw	r18, r28
 a3e:	2f 5f       	subi	r18, 0xFF	; 255
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	82 0f       	add	r24, r18
 a44:	93 1f       	adc	r25, r19
 a46:	84 96       	adiw	r24, 0x24	; 36
 a48:	fc 01       	movw	r30, r24
 a4a:	20 81       	ld	r18, Z
 a4c:	31 81       	ldd	r19, Z+1	; 0x01
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	9a 81       	ldd	r25, Y+2	; 0x02
 a52:	88 0f       	add	r24, r24
 a54:	99 1f       	adc	r25, r25
 a56:	ae 01       	movw	r20, r28
 a58:	4f 5f       	subi	r20, 0xFF	; 255
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255
 a5c:	84 0f       	add	r24, r20
 a5e:	95 1f       	adc	r25, r21
 a60:	84 96       	adiw	r24, 0x24	; 36
 a62:	fc 01       	movw	r30, r24
 a64:	80 81       	ld	r24, Z
 a66:	91 81       	ldd	r25, Z+1	; 0x01
 a68:	fc 01       	movw	r30, r24
 a6a:	85 81       	ldd	r24, Z+5	; 0x05
 a6c:	96 81       	ldd	r25, Z+6	; 0x06
 a6e:	a7 81       	ldd	r26, Z+7	; 0x07
 a70:	b0 85       	ldd	r27, Z+8	; 0x08
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	a1 1d       	adc	r26, r1
 a76:	b1 1d       	adc	r27, r1
 a78:	f9 01       	movw	r30, r18
 a7a:	85 83       	std	Z+5, r24	; 0x05
 a7c:	96 83       	std	Z+6, r25	; 0x06
 a7e:	a7 83       	std	Z+7, r26	; 0x07
 a80:	b0 87       	std	Z+8, r27	; 0x08

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		tmpA = ~PINA & 0x07;
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	9a 81       	ldd	r25, Y+2	; 0x02
 a86:	01 96       	adiw	r24, 0x01	; 1
 a88:	9a 83       	std	Y+2, r25	; 0x02
 a8a:	89 83       	std	Y+1, r24	; 0x01
 a8c:	29 81       	ldd	r18, Y+1	; 0x01
 a8e:	3a 81       	ldd	r19, Y+2	; 0x02
 a90:	8b a1       	ldd	r24, Y+35	; 0x23
 a92:	9c a1       	ldd	r25, Y+36	; 0x24
 a94:	28 17       	cp	r18, r24
 a96:	39 07       	cpc	r19, r25
 a98:	08 f4       	brcc	.+2      	; 0xa9c <main+0x3a0>
 a9a:	5d cf       	rjmp	.-326    	; 0x956 <main+0x25a>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 a9c:	00 00       	nop
 a9e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 aa2:	88 23       	and	r24, r24
 aa4:	e1 f3       	breq	.-8      	; 0xa9e <main+0x3a2>
		TimerFlag = 0;
 aa6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
 aaa:	4a cf       	rjmp	.-364    	; 0x940 <main+0x244>

00000aac <__udivmodsi4>:
 aac:	a1 e2       	ldi	r26, 0x21	; 33
 aae:	1a 2e       	mov	r1, r26
 ab0:	aa 1b       	sub	r26, r26
 ab2:	bb 1b       	sub	r27, r27
 ab4:	fd 01       	movw	r30, r26
 ab6:	0d c0       	rjmp	.+26     	; 0xad2 <__udivmodsi4_ep>

00000ab8 <__udivmodsi4_loop>:
 ab8:	aa 1f       	adc	r26, r26
 aba:	bb 1f       	adc	r27, r27
 abc:	ee 1f       	adc	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	a2 17       	cp	r26, r18
 ac2:	b3 07       	cpc	r27, r19
 ac4:	e4 07       	cpc	r30, r20
 ac6:	f5 07       	cpc	r31, r21
 ac8:	20 f0       	brcs	.+8      	; 0xad2 <__udivmodsi4_ep>
 aca:	a2 1b       	sub	r26, r18
 acc:	b3 0b       	sbc	r27, r19
 ace:	e4 0b       	sbc	r30, r20
 ad0:	f5 0b       	sbc	r31, r21

00000ad2 <__udivmodsi4_ep>:
 ad2:	66 1f       	adc	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	1a 94       	dec	r1
 adc:	69 f7       	brne	.-38     	; 0xab8 <__udivmodsi4_loop>
 ade:	60 95       	com	r22
 ae0:	70 95       	com	r23
 ae2:	80 95       	com	r24
 ae4:	90 95       	com	r25
 ae6:	9b 01       	movw	r18, r22
 ae8:	ac 01       	movw	r20, r24
 aea:	bd 01       	movw	r22, r26
 aec:	cf 01       	movw	r24, r30
 aee:	08 95       	ret

00000af0 <_exit>:
 af0:	f8 94       	cli

00000af2 <__stop_program>:
 af2:	ff cf       	rjmp	.-2      	; 0xaf2 <__stop_program>
