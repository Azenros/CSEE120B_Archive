
atorr048_stran050_lab11_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800128  00800128  00000e98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e71  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad9  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  000031f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000708  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000620  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c1       	rjmp	.+844    	; 0x382 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 36       	cpi	r26, 0x63	; 99
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1a d4       	rcall	.+2100   	; 0x8f8 <main>
  c4:	89 c6       	rjmp	.+3346   	; 0xdd8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac d0       	rcall	.+344    	; 0x242 <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a1 d0       	rcall	.+322    	; 0x242 <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	73 d0       	rcall	.+230    	; 0x242 <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	44 d0       	rcall	.+136    	; 0x242 <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_DisplayString>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_DisplayString+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <LCD_DisplayString+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
 1d6:	78 df       	rcall	.-272    	; 0xc8 <LCD_ClearScreen>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <LCD_DisplayString+0x38>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	18 d0       	rcall	.+48     	; 0x218 <LCD_Cursor>
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	9c 01       	movw	r18, r24
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	3c 83       	std	Y+4, r19	; 0x04
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	b5 df       	rcall	.-150    	; 0x166 <LCD_WriteData>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f7       	brne	.-42     	; 0x1de <LCD_DisplayString+0x1a>
 208:	00 00       	nop
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_Cursor>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	20 f4       	brcc	.+8      	; 0x232 <LCD_Cursor+0x1a>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 58       	subi	r24, 0x81	; 129
 22e:	6c df       	rcall	.-296    	; 0x108 <LCD_WriteCommand>
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCD_Cursor+0x20>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 55       	subi	r24, 0x51	; 81
 236:	68 df       	rcall	.-304    	; 0x108 <LCD_WriteCommand>
 238:	00 00       	nop
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <delay_ms>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <delay_ms+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <delay_ms+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	13 c0       	rjmp	.+38     	; 0x280 <delay_ms+0x3e>
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	06 c0       	rjmp	.+12     	; 0x26c <delay_ms+0x2a>
 260:	00 00       	nop
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	87 30       	cpi	r24, 0x07	; 7
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	ac f3       	brlt	.-22     	; 0x260 <delay_ms+0x1e>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	34 f3       	brlt	.-52     	; 0x25a <delay_ms+0x18>
 28e:	00 00       	nop
 290:	26 96       	adiw	r28, 0x06	; 6
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <TimerSet>:
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <TimerSet+0x6>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <TimerSet+0x8>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	69 83       	std	Y+1, r22	; 0x01
 2b0:	7a 83       	std	Y+2, r23	; 0x02
 2b2:	8b 83       	std	Y+3, r24	; 0x03
 2b4:	9c 83       	std	Y+4, r25	; 0x04
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	ab 81       	ldd	r26, Y+3	; 0x03
 2bc:	bc 81       	ldd	r27, Y+4	; 0x04
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2c6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2ca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2de:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 2e2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 2e6:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 2ea:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
 2ee:	00 00       	nop
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <TimerOn>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	81 e8       	ldi	r24, 0x81	; 129
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2b e0       	ldi	r18, 0x0B	; 11
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
 310:	88 e8       	ldi	r24, 0x88	; 136
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2d e7       	ldi	r18, 0x7D	; 125
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	31 83       	std	Z+1, r19	; 0x01
 31c:	20 83       	st	Z, r18
 31e:	8f e6       	ldi	r24, 0x6F	; 111
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	22 e0       	ldi	r18, 0x02	; 2
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	11 82       	std	Z+1, r1	; 0x01
 330:	10 82       	st	Z, r1
 332:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 336:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 33a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 33e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 342:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 346:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 34a:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 34e:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
 352:	8f e5       	ldi	r24, 0x5F	; 95
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2f e5       	ldi	r18, 0x5F	; 95
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	20 68       	ori	r18, 0x80	; 128
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
 364:	00 00       	nop
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <TimerISR>:

void TimerISR() {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
}
 37a:	00 00       	nop
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 392:	0f 92       	push	r0
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	4f 93       	push	r20
 39a:	5f 93       	push	r21
 39c:	6f 93       	push	r22
 39e:	7f 93       	push	r23
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 3b4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avr_timer_cntcurr>
 3b8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x1>
 3bc:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <_avr_timer_cntcurr+0x2>
 3c0:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x3>
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	a1 09       	sbc	r26, r1
 3c8:	b1 09       	sbc	r27, r1
 3ca:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 3ce:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 3d2:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 3d6:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 3da:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avr_timer_cntcurr>
 3de:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x1>
 3e2:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <_avr_timer_cntcurr+0x2>
 3e6:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x3>
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	89 f4       	brne	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		TimerISR(); 				// Call the ISR that the user uses
 3f2:	bc df       	rcall	.-136    	; 0x36c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 3f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 400:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 404:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avr_timer_cntcurr>
 408:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <_avr_timer_cntcurr+0x1>
 40c:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <_avr_timer_cntcurr+0x2>
 410:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <_avr_timer_cntcurr+0x3>
	}
}
 414:	00 00       	nop
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 438:	0f 90       	pop	r0
 43a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <findGCD>:
#include <stdio.h>
#include "io.c"
#include "bit.h"
#include "timer.h"

unsigned long int findGCD(unsigned long int a, unsigned long int b) { 
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	2c 97       	sbiw	r28, 0x0c	; 12
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	f8 94       	cli
 452:	de bf       	out	0x3e, r29	; 62
 454:	0f be       	out	0x3f, r0	; 63
 456:	cd bf       	out	0x3d, r28	; 61
 458:	6d 83       	std	Y+5, r22	; 0x05
 45a:	7e 83       	std	Y+6, r23	; 0x06
 45c:	8f 83       	std	Y+7, r24	; 0x07
 45e:	98 87       	std	Y+8, r25	; 0x08
 460:	29 87       	std	Y+9, r18	; 0x09
 462:	3a 87       	std	Y+10, r19	; 0x0a
 464:	4b 87       	std	Y+11, r20	; 0x0b
 466:	5c 87       	std	Y+12, r21	; 0x0c
	//--------Find GCD function --------------------------------------------------
	unsigned long int c;
	while(1){
		c = a%b;
 468:	8d 81       	ldd	r24, Y+5	; 0x05
 46a:	9e 81       	ldd	r25, Y+6	; 0x06
 46c:	af 81       	ldd	r26, Y+7	; 0x07
 46e:	b8 85       	ldd	r27, Y+8	; 0x08
 470:	29 85       	ldd	r18, Y+9	; 0x09
 472:	3a 85       	ldd	r19, Y+10	; 0x0a
 474:	4b 85       	ldd	r20, Y+11	; 0x0b
 476:	5c 85       	ldd	r21, Y+12	; 0x0c
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	8b d4       	rcall	.+2326   	; 0xd94 <__udivmodsi4>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04
		if(c==0){return b;}
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	9a 81       	ldd	r25, Y+2	; 0x02
 48e:	ab 81       	ldd	r26, Y+3	; 0x03
 490:	bc 81       	ldd	r27, Y+4	; 0x04
 492:	89 2b       	or	r24, r25
 494:	8a 2b       	or	r24, r26
 496:	8b 2b       	or	r24, r27
 498:	29 f4       	brne	.+10     	; 0x4a4 <findGCD+0x60>
 49a:	89 85       	ldd	r24, Y+9	; 0x09
 49c:	9a 85       	ldd	r25, Y+10	; 0x0a
 49e:	ab 85       	ldd	r26, Y+11	; 0x0b
 4a0:	bc 85       	ldd	r27, Y+12	; 0x0c
 4a2:	11 c0       	rjmp	.+34     	; 0x4c6 <findGCD+0x82>
		a = b;
 4a4:	89 85       	ldd	r24, Y+9	; 0x09
 4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 4a8:	ab 85       	ldd	r26, Y+11	; 0x0b
 4aa:	bc 85       	ldd	r27, Y+12	; 0x0c
 4ac:	8d 83       	std	Y+5, r24	; 0x05
 4ae:	9e 83       	std	Y+6, r25	; 0x06
 4b0:	af 83       	std	Y+7, r26	; 0x07
 4b2:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	ab 81       	ldd	r26, Y+3	; 0x03
 4ba:	bc 81       	ldd	r27, Y+4	; 0x04
 4bc:	89 87       	std	Y+9, r24	; 0x09
 4be:	9a 87       	std	Y+10, r25	; 0x0a
 4c0:	ab 87       	std	Y+11, r26	; 0x0b
 4c2:	bc 87       	std	Y+12, r27	; 0x0c
	}
 4c4:	d1 cf       	rjmp	.-94     	; 0x468 <findGCD+0x24>
	return 0;
	//--------End find GCD function ----------------------------------------------
	
}
 4c6:	bc 01       	movw	r22, r24
 4c8:	cd 01       	movw	r24, r26
 4ca:	2c 96       	adiw	r28, 0x0c	; 12
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <SMTick1>:
enum SM1_States {SM1_Start, SM1_Wait, SM1_Press, SM1_Hold};  //pause or start the game
enum SM2_States {SM2_Start, SM2_Wait, SM2_Up, SM2_Down, SM2_Hold};  //move the player up or down
enum SM3_States {SM3_Start, SM3_Move};  // if not paused, move the obstacles to the left
enum SM4_States {SM4_Start, SM4_Check, SM4_Display, SM4_Wait4Reset}; // checks for collision; if collision, pause and display message

int SMTick1(int state) {
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <SMTick1+0x6>
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	9a 83       	std	Y+2, r25	; 0x02
 4e8:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	91 05       	cpc	r25, r1
 4f2:	89 f0       	breq	.+34     	; 0x516 <SMTick1+0x3a>
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	91 05       	cpc	r25, r1
 4f8:	1c f4       	brge	.+6      	; 0x500 <SMTick1+0x24>
 4fa:	89 2b       	or	r24, r25
 4fc:	39 f0       	breq	.+14     	; 0x50c <SMTick1+0x30>
 4fe:	2f c0       	rjmp	.+94     	; 0x55e <SMTick1+0x82>
 500:	82 30       	cpi	r24, 0x02	; 2
 502:	91 05       	cpc	r25, r1
 504:	a1 f0       	breq	.+40     	; 0x52e <SMTick1+0x52>
 506:	03 97       	sbiw	r24, 0x03	; 3
 508:	f1 f0       	breq	.+60     	; 0x546 <SMTick1+0x6a>
 50a:	29 c0       	rjmp	.+82     	; 0x55e <SMTick1+0x82>
		case SM1_Start: state = SM1_Wait; break;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	27 c0       	rjmp	.+78     	; 0x564 <SMTick1+0x88>
		case SM1_Wait: state = (tmpA == 0x01) ? SM1_Press : SM1_Wait; break;
 516:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	19 f4       	brne	.+6      	; 0x524 <SMTick1+0x48>
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <SMTick1+0x4c>
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	9a 83       	std	Y+2, r25	; 0x02
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	1b c0       	rjmp	.+54     	; 0x564 <SMTick1+0x88>
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
 52e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 532:	81 30       	cpi	r24, 0x01	; 1
 534:	19 f4       	brne	.+6      	; 0x53c <SMTick1+0x60>
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <SMTick1+0x64>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	0f c0       	rjmp	.+30     	; 0x564 <SMTick1+0x88>
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
 546:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 54a:	88 23       	and	r24, r24
 54c:	19 f4       	brne	.+6      	; 0x554 <SMTick1+0x78>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <SMTick1+0x7c>
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9a 83       	std	Y+2, r25	; 0x02
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	03 c0       	rjmp	.+6      	; 0x564 <SMTick1+0x88>
		default: state = SM1_Start; break;
 55e:	1a 82       	std	Y+2, r1	; 0x02
 560:	19 82       	std	Y+1, r1	; 0x01
 562:	00 00       	nop
	}
	switch (state) {
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	91 05       	cpc	r25, r1
 56c:	a9 f0       	breq	.+42     	; 0x598 <SMTick1+0xbc>
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	1c f4       	brge	.+6      	; 0x57a <SMTick1+0x9e>
 574:	89 2b       	or	r24, r25
 576:	91 f0       	breq	.+36     	; 0x59c <SMTick1+0xc0>
		case SM1_Wait: break;
		case SM1_Press: 
			pause = (pause) ? 0 : 1; 
			break;
		case SM1_Hold: break;
		default: break;
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <SMTick1+0xc6>
		case SM1_Wait: state = (tmpA == 0x01) ? SM1_Press : SM1_Wait; break;
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
		default: state = SM1_Start; break;
	}
	switch (state) {
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	91 05       	cpc	r25, r1
 57e:	19 f0       	breq	.+6      	; 0x586 <SMTick1+0xaa>
 580:	03 97       	sbiw	r24, 0x03	; 3
 582:	71 f0       	breq	.+28     	; 0x5a0 <SMTick1+0xc4>
		case SM1_Wait: break;
		case SM1_Press: 
			pause = (pause) ? 0 : 1; 
			break;
		case SM1_Hold: break;
		default: break;
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <SMTick1+0xc6>
	}
	switch (state) {
		case SM1_Start: break;
		case SM1_Wait: break;
		case SM1_Press: 
			pause = (pause) ? 0 : 1; 
 586:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pause>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	99 23       	and	r25, r25
 58e:	09 f0       	breq	.+2      	; 0x592 <SMTick1+0xb6>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pause>
			break;
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <SMTick1+0xc6>
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
		default: state = SM1_Start; break;
	}
	switch (state) {
		case SM1_Start: break;
		case SM1_Wait: break;
 598:	00 00       	nop
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <SMTick1+0xc6>
		case SM1_Press: state = (tmpA == 0x01) ? SM1_Hold : SM1_Wait; break;
		case SM1_Hold: state = (tmpA == 0x00) ? SM1_Wait : SM1_Hold; break;
		default: state = SM1_Start; break;
	}
	switch (state) {
		case SM1_Start: break;
 59c:	00 00       	nop
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <SMTick1+0xc6>
		case SM1_Wait: break;
		case SM1_Press: 
			pause = (pause) ? 0 : 1; 
			break;
		case SM1_Hold: break;
 5a0:	00 00       	nop
		default: break;
	}
	return state;
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <SMTick2>:
int SMTick2(int state) {
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <SMTick2+0x6>
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	9a 83       	std	Y+2, r25	; 0x02
 5bc:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	91 05       	cpc	r25, r1
 5c6:	a9 f1       	breq	.+106    	; 0x632 <SMTick2+0x82>
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	91 05       	cpc	r25, r1
 5cc:	2c f4       	brge	.+10     	; 0x5d8 <SMTick2+0x28>
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	51 f0       	breq	.+20     	; 0x5e6 <SMTick2+0x36>
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <SMTick2+0x40>
 5d6:	51 c0       	rjmp	.+162    	; 0x67a <SMTick2+0xca>
 5d8:	83 30       	cpi	r24, 0x03	; 3
 5da:	91 05       	cpc	r25, r1
 5dc:	b1 f1       	breq	.+108    	; 0x64a <SMTick2+0x9a>
 5de:	04 97       	sbiw	r24, 0x04	; 4
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <SMTick2+0x34>
 5e2:	3f c0       	rjmp	.+126    	; 0x662 <SMTick2+0xb2>
 5e4:	4a c0       	rjmp	.+148    	; 0x67a <SMTick2+0xca>
		case SM2_Start: state = SM2_Wait; break;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	49 c0       	rjmp	.+146    	; 0x682 <SMTick2+0xd2>
		case SM2_Wait:
			if (!endGame && !pause) {
 5f0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <endGame>
 5f4:	88 23       	and	r24, r24
 5f6:	09 f0       	breq	.+2      	; 0x5fa <SMTick2+0x4a>
 5f8:	43 c0       	rjmp	.+134    	; 0x680 <SMTick2+0xd0>
 5fa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <pause>
 5fe:	88 23       	and	r24, r24
 600:	09 f0       	breq	.+2      	; 0x604 <SMTick2+0x54>
 602:	3e c0       	rjmp	.+124    	; 0x680 <SMTick2+0xd0>
				if (tmpA == 0x02) {
 604:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	29 f4       	brne	.+10     	; 0x616 <SMTick2+0x66>
					state = SM2_Up;
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	9a 83       	std	Y+2, r25	; 0x02
 612:	89 83       	std	Y+1, r24	; 0x01
				}
				else {
					state = SM2_Wait;
				}
			}
			break;
 614:	35 c0       	rjmp	.+106    	; 0x680 <SMTick2+0xd0>
		case SM2_Wait:
			if (!endGame && !pause) {
				if (tmpA == 0x02) {
					state = SM2_Up;
				}
				else if (tmpA == 0x04) {
 616:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	29 f4       	brne	.+10     	; 0x628 <SMTick2+0x78>
					state = SM2_Down;
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9a 83       	std	Y+2, r25	; 0x02
 624:	89 83       	std	Y+1, r24	; 0x01
				}
				else {
					state = SM2_Wait;
				}
			}
			break;
 626:	2c c0       	rjmp	.+88     	; 0x680 <SMTick2+0xd0>
				}
				else if (tmpA == 0x04) {
					state = SM2_Down;
				}
				else {
					state = SM2_Wait;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	9a 83       	std	Y+2, r25	; 0x02
 62e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			break;
 630:	27 c0       	rjmp	.+78     	; 0x680 <SMTick2+0xd0>
		case SM2_Up:
			state = (tmpA == 0x02) ? SM2_Hold : SM2_Wait;
 632:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	19 f4       	brne	.+6      	; 0x640 <SMTick2+0x90>
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <SMTick2+0x94>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9a 83       	std	Y+2, r25	; 0x02
 646:	89 83       	std	Y+1, r24	; 0x01
			break;
 648:	1c c0       	rjmp	.+56     	; 0x682 <SMTick2+0xd2>
		case SM2_Down:
			state = (tmpA == 0x04) ? SM2_Hold : SM2_Wait;
 64a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 64e:	84 30       	cpi	r24, 0x04	; 4
 650:	19 f4       	brne	.+6      	; 0x658 <SMTick2+0xa8>
 652:	84 e0       	ldi	r24, 0x04	; 4
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <SMTick2+0xac>
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9a 83       	std	Y+2, r25	; 0x02
 65e:	89 83       	std	Y+1, r24	; 0x01
			break;
 660:	10 c0       	rjmp	.+32     	; 0x682 <SMTick2+0xd2>
		case SM2_Hold:
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
 662:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 666:	88 23       	and	r24, r24
 668:	19 f4       	brne	.+6      	; 0x670 <SMTick2+0xc0>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <SMTick2+0xc4>
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	9a 83       	std	Y+2, r25	; 0x02
 676:	89 83       	std	Y+1, r24	; 0x01
			break;
 678:	04 c0       	rjmp	.+8      	; 0x682 <SMTick2+0xd2>
		default: state = SM2_Start; break;
 67a:	1a 82       	std	Y+2, r1	; 0x02
 67c:	19 82       	std	Y+1, r1	; 0x01
 67e:	01 c0       	rjmp	.+2      	; 0x682 <SMTick2+0xd2>
				}
				else {
					state = SM2_Wait;
				}
			}
			break;
 680:	00 00       	nop
		case SM2_Hold:
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	9a 81       	ldd	r25, Y+2	; 0x02
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	91 05       	cpc	r25, r1
 68a:	b9 f0       	breq	.+46     	; 0x6ba <SMTick2+0x10a>
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	91 05       	cpc	r25, r1
 690:	1c f4       	brge	.+6      	; 0x698 <SMTick2+0xe8>
 692:	89 2b       	or	r24, r25
 694:	a1 f0       	breq	.+40     	; 0x6be <SMTick2+0x10e>
			break;
		case SM2_Down: 
			upDown = 0; 
			LCD_Cursor(18); 
			break;
		default: break;
 696:	14 c0       	rjmp	.+40     	; 0x6c0 <SMTick2+0x110>
		case SM2_Hold:
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	91 05       	cpc	r25, r1
 69c:	19 f0       	breq	.+6      	; 0x6a4 <SMTick2+0xf4>
 69e:	03 97       	sbiw	r24, 0x03	; 3
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <SMTick2+0x100>
			break;
		case SM2_Down: 
			upDown = 0; 
			LCD_Cursor(18); 
			break;
		default: break;
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <SMTick2+0x110>
	}
	switch (state) {
		case SM2_Start: break;
		case SM2_Wait: break;
		case SM2_Up: 
			upDown = 1; 
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <upDown>
			LCD_Cursor(2); 
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	b5 dd       	rcall	.-1174   	; 0x218 <LCD_Cursor>
			break;
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <SMTick2+0x110>
		case SM2_Down: 
			upDown = 0; 
 6b0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <upDown>
			LCD_Cursor(18); 
 6b4:	82 e1       	ldi	r24, 0x12	; 18
 6b6:	b0 dd       	rcall	.-1184   	; 0x218 <LCD_Cursor>
			break;
 6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <SMTick2+0x110>
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
		case SM2_Wait: break;
 6ba:	00 00       	nop
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <SMTick2+0x110>
			state = (tmpA == 0x00) ? SM2_Wait : SM2_Hold;
			break;
		default: state = SM2_Start; break;
	}
	switch (state) {
		case SM2_Start: break;
 6be:	00 00       	nop
			upDown = 0; 
			LCD_Cursor(18); 
			break;
		default: break;
	}
	return state;
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <SMTick3>:
int SMTick3(int state) {
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <SMTick3+0x6>
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	9a 83       	std	Y+2, r25	; 0x02
 6da:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	9a 81       	ldd	r25, Y+2	; 0x02
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <SMTick3+0x1c>
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	49 f0       	breq	.+18     	; 0x6fa <SMTick3+0x2c>
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <SMTick3+0x26>
		case SM3_Start: state = SM3_Move; break;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	9a 83       	std	Y+2, r25	; 0x02
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <SMTick3+0x2e>
		case SM3_Move: break;
		default: state = SM3_Start; break;
 6f4:	1a 82       	std	Y+2, r1	; 0x02
 6f6:	19 82       	std	Y+1, r1	; 0x01
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <SMTick3+0x2e>
	return state;
}
int SMTick3(int state) {
	switch (state) {
		case SM3_Start: state = SM3_Move; break;
		case SM3_Move: break;
 6fa:	00 00       	nop
		default: state = SM3_Start; break;
	}
	switch (state) {
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	9a 81       	ldd	r25, Y+2	; 0x02
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	09 f4       	brne	.+2      	; 0x706 <SMTick3+0x38>
 704:	5f c0       	rjmp	.+190    	; 0x7c4 <SMTick3+0xf6>
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	09 f0       	breq	.+2      	; 0x70c <SMTick3+0x3e>
				}
				
			}
			
			break;
		default: break;
 70a:	5f c0       	rjmp	.+190    	; 0x7ca <SMTick3+0xfc>
		default: state = SM3_Start; break;
	}
	switch (state) {
		case SM3_Start: break;
		case SM3_Move:
			if (!pause) {
 70c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <pause>
 710:	88 23       	and	r24, r24
 712:	09 f0       	breq	.+2      	; 0x716 <SMTick3+0x48>
 714:	59 c0       	rjmp	.+178    	; 0x7c8 <SMTick3+0xfa>
				if (ob1Loc == 1) {
 716:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ob1Loc>
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	21 f4       	brne	.+8      	; 0x726 <SMTick3+0x58>
					ob1Loc = 16;
 71e:	80 e1       	ldi	r24, 0x10	; 16
 720:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ob1Loc>
 724:	05 c0       	rjmp	.+10     	; 0x730 <SMTick3+0x62>
				}
				else {
					ob1Loc--;
 726:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ob1Loc>
 72a:	81 50       	subi	r24, 0x01	; 1
 72c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ob1Loc>
				}
				if (ob2Loc == 17) {
 730:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ob2Loc>
 734:	81 31       	cpi	r24, 0x11	; 17
 736:	21 f4       	brne	.+8      	; 0x740 <SMTick3+0x72>
					ob2Loc = 32;
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ob2Loc>
 73e:	05 c0       	rjmp	.+10     	; 0x74a <SMTick3+0x7c>
				}
				else {
					ob2Loc--;
 740:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ob2Loc>
 744:	81 50       	subi	r24, 0x01	; 1
 746:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ob2Loc>
				}
				if (ob3Loc == 1) {
 74a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ob3Loc>
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	21 f4       	brne	.+8      	; 0x75a <SMTick3+0x8c>
					ob3Loc = 16;
 752:	80 e1       	ldi	r24, 0x10	; 16
 754:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ob3Loc>
 758:	05 c0       	rjmp	.+10     	; 0x764 <SMTick3+0x96>
				}
				else {
					ob3Loc--;
 75a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ob3Loc>
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ob3Loc>
				}
				if (ob4Loc == 17) {
 764:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ob4Loc>
 768:	81 31       	cpi	r24, 0x11	; 17
 76a:	21 f4       	brne	.+8      	; 0x774 <SMTick3+0xa6>
					ob4Loc = 32;
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ob4Loc>
 772:	05 c0       	rjmp	.+10     	; 0x77e <SMTick3+0xb0>
				}
				else {
					ob4Loc--;
 774:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ob4Loc>
 778:	81 50       	subi	r24, 0x01	; 1
 77a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ob4Loc>
				}
				
				
				LCD_ClearScreen();
 77e:	a4 dc       	rcall	.-1720   	; 0xc8 <LCD_ClearScreen>
				
				LCD_Cursor(ob1Loc);
 780:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ob1Loc>
 784:	49 dd       	rcall	.-1390   	; 0x218 <LCD_Cursor>
				LCD_WriteData(obstacle);
 786:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 78a:	ed dc       	rcall	.-1574   	; 0x166 <LCD_WriteData>
				
				LCD_Cursor(ob2Loc);
 78c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ob2Loc>
 790:	43 dd       	rcall	.-1402   	; 0x218 <LCD_Cursor>
				LCD_WriteData(obstacle);
 792:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 796:	e7 dc       	rcall	.-1586   	; 0x166 <LCD_WriteData>
				
				LCD_Cursor(ob3Loc);
 798:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ob3Loc>
 79c:	3d dd       	rcall	.-1414   	; 0x218 <LCD_Cursor>
				LCD_WriteData(obstacle);
 79e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 7a2:	e1 dc       	rcall	.-1598   	; 0x166 <LCD_WriteData>
				
				LCD_Cursor(ob4Loc);
 7a4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ob4Loc>
 7a8:	37 dd       	rcall	.-1426   	; 0x218 <LCD_Cursor>
 7aa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
				LCD_WriteData(obstacle);
 7ae:	db dc       	rcall	.-1610   	; 0x166 <LCD_WriteData>
 7b0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <upDown>
				
				if (upDown) {
 7b4:	88 23       	and	r24, r24
 7b6:	19 f0       	breq	.+6      	; 0x7be <SMTick3+0xf0>
 7b8:	82 e0       	ldi	r24, 0x02	; 2
					LCD_Cursor(2);
 7ba:	2e dd       	rcall	.-1444   	; 0x218 <LCD_Cursor>
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <SMTick3+0xfa>
 7be:	82 e1       	ldi	r24, 0x12	; 18
					LCD_Cursor(18);
				}
				
			}
			
			break;
 7c0:	2b dd       	rcall	.-1450   	; 0x218 <LCD_Cursor>
				
				if (upDown) {
					LCD_Cursor(2);
				}
				else {
					LCD_Cursor(18);
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <SMTick3+0xfa>
 7c4:	00 00       	nop
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <SMTick3+0xfc>
				}
				
			}
			
			break;
 7c8:	00 00       	nop
		case SM3_Start: state = SM3_Move; break;
		case SM3_Move: break;
		default: state = SM3_Start; break;
	}
	switch (state) {
		case SM3_Start: break;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	9a 81       	ldd	r25, Y+2	; 0x02
					LCD_Cursor(18);
				}
				
			}
			
			break;
 7ce:	0f 90       	pop	r0
		default: break;
	}
	return state;
 7d0:	0f 90       	pop	r0
 7d2:	df 91       	pop	r29
}
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <SMTick4>:
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	00 d0       	rcall	.+0      	; 0x7de <SMTick4+0x6>
int SMTick4(int state) {
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	9a 83       	std	Y+2, r25	; 0x02
 7e4:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	91 05       	cpc	r25, r1
 7ee:	81 f0       	breq	.+32     	; 0x810 <SMTick4+0x38>
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	91 05       	cpc	r25, r1
 7f4:	1c f4       	brge	.+6      	; 0x7fc <SMTick4+0x24>
 7f6:	89 2b       	or	r24, r25
 7f8:	39 f0       	breq	.+14     	; 0x808 <SMTick4+0x30>
 7fa:	3f c0       	rjmp	.+126    	; 0x87a <SMTick4+0xa2>
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	91 05       	cpc	r25, r1
 800:	61 f1       	breq	.+88     	; 0x85a <SMTick4+0x82>
 802:	03 97       	sbiw	r24, 0x03	; 3
 804:	79 f1       	breq	.+94     	; 0x864 <SMTick4+0x8c>
 806:	39 c0       	rjmp	.+114    	; 0x87a <SMTick4+0xa2>
		case SM4_Start: state = SM4_Check;
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	9a 83       	std	Y+2, r25	; 0x02
 80e:	89 83       	std	Y+1, r24	; 0x01
		case SM4_Check:
			if ((upDown && (ob1Loc == 2)) 
 810:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <upDown>
 814:	88 23       	and	r24, r24
 816:	21 f0       	breq	.+8      	; 0x820 <SMTick4+0x48>
 818:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ob1Loc>
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	c1 f0       	breq	.+48     	; 0x850 <SMTick4+0x78>
			|| (!upDown && (ob2Loc == 18))
 820:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <upDown>
 824:	88 23       	and	r24, r24
 826:	21 f4       	brne	.+8      	; 0x830 <SMTick4+0x58>
 828:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ob2Loc>
 82c:	82 31       	cpi	r24, 0x12	; 18
 82e:	81 f0       	breq	.+32     	; 0x850 <SMTick4+0x78>
			|| (upDown && (ob3Loc == 2))
 830:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <upDown>
 834:	88 23       	and	r24, r24
 836:	21 f0       	breq	.+8      	; 0x840 <SMTick4+0x68>
 838:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ob3Loc>
 83c:	82 30       	cpi	r24, 0x02	; 2
 83e:	41 f0       	breq	.+16     	; 0x850 <SMTick4+0x78>
			|| (!upDown && (ob4Loc == 18))) {
 840:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <upDown>
 844:	88 23       	and	r24, r24
 846:	e1 f4       	brne	.+56     	; 0x880 <SMTick4+0xa8>
 848:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ob4Loc>
 84c:	82 31       	cpi	r24, 0x12	; 18
 84e:	c1 f4       	brne	.+48     	; 0x880 <SMTick4+0xa8>
				state = SM4_Display;
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	9a 83       	std	Y+2, r25	; 0x02
 856:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 858:	13 c0       	rjmp	.+38     	; 0x880 <SMTick4+0xa8>
		case SM4_Display: state = SM4_Wait4Reset; break;
 85a:	83 e0       	ldi	r24, 0x03	; 3
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	9a 83       	std	Y+2, r25	; 0x02
 860:	89 83       	std	Y+1, r24	; 0x01
 862:	11 c0       	rjmp	.+34     	; 0x886 <SMTick4+0xae>
		case SM4_Wait4Reset:
			if (tmpA == 0x01) {
 864:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tmpA>
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	61 f4       	brne	.+24     	; 0x884 <SMTick4+0xac>
				state = SM4_Check;
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	9a 83       	std	Y+2, r25	; 0x02
 872:	89 83       	std	Y+1, r24	; 0x01
				endGame = 0;
 874:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <endGame>
			}
			break;
 878:	05 c0       	rjmp	.+10     	; 0x884 <SMTick4+0xac>
		default: state = SM4_Start; break;
 87a:	1a 82       	std	Y+2, r1	; 0x02
 87c:	19 82       	std	Y+1, r1	; 0x01
 87e:	03 c0       	rjmp	.+6      	; 0x886 <SMTick4+0xae>
			|| (!upDown && (ob2Loc == 18))
			|| (upDown && (ob3Loc == 2))
			|| (!upDown && (ob4Loc == 18))) {
				state = SM4_Display;
			}
			break;
 880:	00 00       	nop
 882:	01 c0       	rjmp	.+2      	; 0x886 <SMTick4+0xae>
		case SM4_Wait4Reset:
			if (tmpA == 0x01) {
				state = SM4_Check;
				endGame = 0;
			}
			break;
 884:	00 00       	nop
		default: state = SM4_Start; break;
	}
	switch (state) {
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	9a 81       	ldd	r25, Y+2	; 0x02
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	91 05       	cpc	r25, r1
 88e:	51 f1       	breq	.+84     	; 0x8e4 <SMTick4+0x10c>
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	91 05       	cpc	r25, r1
 894:	1c f4       	brge	.+6      	; 0x89c <SMTick4+0xc4>
 896:	89 2b       	or	r24, r25
 898:	39 f1       	breq	.+78     	; 0x8e8 <SMTick4+0x110>
			ob2Loc = 27;
			ob3Loc = 7;
			ob4Loc = 19;
			upDown = 1;
			break;
		default: break;
 89a:	27 c0       	rjmp	.+78     	; 0x8ea <SMTick4+0x112>
				endGame = 0;
			}
			break;
		default: state = SM4_Start; break;
	}
	switch (state) {
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	91 05       	cpc	r25, r1
 8a0:	19 f0       	breq	.+6      	; 0x8a8 <SMTick4+0xd0>
 8a2:	03 97       	sbiw	r24, 0x03	; 3
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <SMTick4+0xec>
			ob2Loc = 27;
			ob3Loc = 7;
			ob4Loc = 19;
			upDown = 1;
			break;
		default: break;
 8a6:	21 c0       	rjmp	.+66     	; 0x8ea <SMTick4+0x112>
	}
	switch (state) {
		case SM4_Start: break;
		case SM4_Check: break;
		case SM4_Display: 
			pause = 1; endGame = 1;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pause>
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <endGame>
			LCD_ClearScreen();
 8b4:	09 dc       	rcall	.-2030   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(2, "TRY AGAIN?      > YES   NO");
 8b6:	64 e0       	ldi	r22, 0x04	; 4
 8b8:	71 e0       	ldi	r23, 0x01	; 1
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	83 dc       	rcall	.-1786   	; 0x1c4 <LCD_DisplayString>
			LCD_Cursor(18);
 8be:	82 e1       	ldi	r24, 0x12	; 18
 8c0:	ab dc       	rcall	.-1706   	; 0x218 <LCD_Cursor>
 8c2:	13 c0       	rjmp	.+38     	; 0x8ea <SMTick4+0x112>
			break;
 8c4:	8f e0       	ldi	r24, 0x0F	; 15
		case SM4_Wait4Reset: 
			ob1Loc = 15;
 8c6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ob1Loc>
 8ca:	8b e1       	ldi	r24, 0x1B	; 27
			ob2Loc = 27;
 8cc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ob2Loc>
 8d0:	87 e0       	ldi	r24, 0x07	; 7
			ob3Loc = 7;
 8d2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ob3Loc>
 8d6:	83 e1       	ldi	r24, 0x13	; 19
			ob4Loc = 19;
 8d8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ob4Loc>
 8dc:	81 e0       	ldi	r24, 0x01	; 1
			upDown = 1;
 8de:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <upDown>
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <SMTick4+0x112>
			break;
 8e4:	00 00       	nop
			break;
		default: state = SM4_Start; break;
	}
	switch (state) {
		case SM4_Start: break;
		case SM4_Check: break;
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <SMTick4+0x112>
 8e8:	00 00       	nop
			}
			break;
		default: state = SM4_Start; break;
	}
	switch (state) {
		case SM4_Start: break;
 8ea:	89 81       	ldd	r24, Y+1	; 0x01
			ob4Loc = 19;
			upDown = 1;
			break;
		default: break;
	}
	return state;
 8ec:	9a 81       	ldd	r25, Y+2	; 0x02
 8ee:	0f 90       	pop	r0
}
 8f0:	0f 90       	pop	r0
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <main>:
 8f8:	0f 93       	push	r16

int main() {
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	e4 97       	sbiw	r28, 0x34	; 52
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;// Button inputs
 910:	81 e2       	ldi	r24, 0x21	; 33
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	fc 01       	movw	r30, r24
 916:	10 82       	st	Z, r1
 918:	82 e2       	ldi	r24, 0x22	; 34
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	2f ef       	ldi	r18, 0xFF	; 255
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;// LCD output
 922:	87 e2       	ldi	r24, 0x27	; 39
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
 92c:	88 e2       	ldi	r24, 0x28	; 40
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	fc 01       	movw	r30, r24
 932:	10 82       	st	Z, r1
	DDRD = 0xFF, PORTD = 0x00; //LCD output (PD6-7)
 934:	8a e2       	ldi	r24, 0x2A	; 42
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	2f ef       	ldi	r18, 0xFF	; 255
 93a:	fc 01       	movw	r30, r24
 93c:	20 83       	st	Z, r18
 93e:	8b e2       	ldi	r24, 0x2B	; 43
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	fc 01       	movw	r30, r24
 944:	10 82       	st	Z, r1
	// . . . etc

	// Period for the tasks
	unsigned long int SMTick1_calc = 100;
 946:	84 e6       	ldi	r24, 0x64	; 100
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a0 e0       	ldi	r26, 0x00	; 0
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	8b 83       	std	Y+3, r24	; 0x03
 950:	9c 83       	std	Y+4, r25	; 0x04
 952:	ad 83       	std	Y+5, r26	; 0x05
 954:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 100;
 956:	84 e6       	ldi	r24, 0x64	; 100
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	8f 83       	std	Y+7, r24	; 0x07
 960:	98 87       	std	Y+8, r25	; 0x08
 962:	a9 87       	std	Y+9, r26	; 0x09
 964:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 300;
 966:	8c e2       	ldi	r24, 0x2C	; 44
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	a0 e0       	ldi	r26, 0x00	; 0
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	8b 87       	std	Y+11, r24	; 0x0b
 970:	9c 87       	std	Y+12, r25	; 0x0c
 972:	ad 87       	std	Y+13, r26	; 0x0d
 974:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int SMTick4_calc = 100;
 976:	84 e6       	ldi	r24, 0x64	; 100
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	a0 e0       	ldi	r26, 0x00	; 0
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	8f 87       	std	Y+15, r24	; 0x0f
 980:	98 8b       	std	Y+16, r25	; 0x10
 982:	a9 8b       	std	Y+17, r26	; 0x11
 984:	ba 8b       	std	Y+18, r27	; 0x12

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	a0 e0       	ldi	r26, 0x00	; 0
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	8b 8b       	std	Y+19, r24	; 0x13
 990:	9c 8b       	std	Y+20, r25	; 0x14
 992:	ad 8b       	std	Y+21, r26	; 0x15
 994:	be 8b       	std	Y+22, r27	; 0x16
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
 996:	2f 81       	ldd	r18, Y+7	; 0x07
 998:	38 85       	ldd	r19, Y+8	; 0x08
 99a:	49 85       	ldd	r20, Y+9	; 0x09
 99c:	5a 85       	ldd	r21, Y+10	; 0x0a
 99e:	8b 81       	ldd	r24, Y+3	; 0x03
 9a0:	9c 81       	ldd	r25, Y+4	; 0x04
 9a2:	ad 81       	ldd	r26, Y+5	; 0x05
 9a4:	be 81       	ldd	r27, Y+6	; 0x06
 9a6:	bc 01       	movw	r22, r24
 9a8:	cd 01       	movw	r24, r26
 9aa:	4c dd       	rcall	.-1384   	; 0x444 <findGCD>
 9ac:	dc 01       	movw	r26, r24
 9ae:	cb 01       	movw	r24, r22
 9b0:	8b 8b       	std	Y+19, r24	; 0x13
 9b2:	9c 8b       	std	Y+20, r25	; 0x14
 9b4:	ad 8b       	std	Y+21, r26	; 0x15
 9b6:	be 8b       	std	Y+22, r27	; 0x16
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
 9b8:	2b 85       	ldd	r18, Y+11	; 0x0b
 9ba:	3c 85       	ldd	r19, Y+12	; 0x0c
 9bc:	4d 85       	ldd	r20, Y+13	; 0x0d
 9be:	5e 85       	ldd	r21, Y+14	; 0x0e
 9c0:	8b 89       	ldd	r24, Y+19	; 0x13
 9c2:	9c 89       	ldd	r25, Y+20	; 0x14
 9c4:	ad 89       	ldd	r26, Y+21	; 0x15
 9c6:	be 89       	ldd	r27, Y+22	; 0x16
 9c8:	bc 01       	movw	r22, r24
 9ca:	cd 01       	movw	r24, r26
 9cc:	3b dd       	rcall	.-1418   	; 0x444 <findGCD>
 9ce:	dc 01       	movw	r26, r24
 9d0:	cb 01       	movw	r24, r22
 9d2:	8b 8b       	std	Y+19, r24	; 0x13
 9d4:	9c 8b       	std	Y+20, r25	; 0x14
 9d6:	ad 8b       	std	Y+21, r26	; 0x15
 9d8:	be 8b       	std	Y+22, r27	; 0x16
	tmpGCD = findGCD(tmpGCD, SMTick4_calc);
 9da:	2f 85       	ldd	r18, Y+15	; 0x0f
 9dc:	38 89       	ldd	r19, Y+16	; 0x10
 9de:	49 89       	ldd	r20, Y+17	; 0x11
 9e0:	5a 89       	ldd	r21, Y+18	; 0x12
 9e2:	8b 89       	ldd	r24, Y+19	; 0x13
 9e4:	9c 89       	ldd	r25, Y+20	; 0x14
 9e6:	ad 89       	ldd	r26, Y+21	; 0x15
 9e8:	be 89       	ldd	r27, Y+22	; 0x16
 9ea:	bc 01       	movw	r22, r24
 9ec:	cd 01       	movw	r24, r26
 9ee:	2a dd       	rcall	.-1452   	; 0x444 <findGCD>
 9f0:	dc 01       	movw	r26, r24
 9f2:	cb 01       	movw	r24, r22
 9f4:	8b 8b       	std	Y+19, r24	; 0x13
 9f6:	9c 8b       	std	Y+20, r25	; 0x14
 9f8:	ad 8b       	std	Y+21, r26	; 0x15
 9fa:	be 8b       	std	Y+22, r27	; 0x16

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 9fc:	8b 89       	ldd	r24, Y+19	; 0x13
 9fe:	9c 89       	ldd	r25, Y+20	; 0x14
 a00:	ad 89       	ldd	r26, Y+21	; 0x15
 a02:	be 89       	ldd	r27, Y+22	; 0x16
 a04:	8f 8b       	std	Y+23, r24	; 0x17
 a06:	98 8f       	std	Y+24, r25	; 0x18
 a08:	a9 8f       	std	Y+25, r26	; 0x19
 a0a:	ba 8f       	std	Y+26, r27	; 0x1a

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	9c 81       	ldd	r25, Y+4	; 0x04
 a10:	ad 81       	ldd	r26, Y+5	; 0x05
 a12:	be 81       	ldd	r27, Y+6	; 0x06
 a14:	2f 89       	ldd	r18, Y+23	; 0x17
 a16:	38 8d       	ldd	r19, Y+24	; 0x18
 a18:	49 8d       	ldd	r20, Y+25	; 0x19
 a1a:	5a 8d       	ldd	r21, Y+26	; 0x1a
 a1c:	bc 01       	movw	r22, r24
 a1e:	cd 01       	movw	r24, r26
 a20:	b9 d1       	rcall	.+882    	; 0xd94 <__udivmodsi4>
 a22:	da 01       	movw	r26, r20
 a24:	c9 01       	movw	r24, r18
 a26:	8b 8f       	std	Y+27, r24	; 0x1b
 a28:	9c 8f       	std	Y+28, r25	; 0x1c
 a2a:	ad 8f       	std	Y+29, r26	; 0x1d
 a2c:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 a2e:	8f 81       	ldd	r24, Y+7	; 0x07
 a30:	98 85       	ldd	r25, Y+8	; 0x08
 a32:	a9 85       	ldd	r26, Y+9	; 0x09
 a34:	ba 85       	ldd	r27, Y+10	; 0x0a
 a36:	2f 89       	ldd	r18, Y+23	; 0x17
 a38:	38 8d       	ldd	r19, Y+24	; 0x18
 a3a:	49 8d       	ldd	r20, Y+25	; 0x19
 a3c:	5a 8d       	ldd	r21, Y+26	; 0x1a
 a3e:	bc 01       	movw	r22, r24
 a40:	cd 01       	movw	r24, r26
 a42:	a8 d1       	rcall	.+848    	; 0xd94 <__udivmodsi4>
 a44:	da 01       	movw	r26, r20
 a46:	c9 01       	movw	r24, r18
 a48:	8f 8f       	std	Y+31, r24	; 0x1f
 a4a:	98 a3       	std	Y+32, r25	; 0x20
 a4c:	a9 a3       	std	Y+33, r26	; 0x21
 a4e:	ba a3       	std	Y+34, r27	; 0x22
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 a50:	8b 85       	ldd	r24, Y+11	; 0x0b
 a52:	9c 85       	ldd	r25, Y+12	; 0x0c
 a54:	ad 85       	ldd	r26, Y+13	; 0x0d
 a56:	be 85       	ldd	r27, Y+14	; 0x0e
 a58:	2f 89       	ldd	r18, Y+23	; 0x17
 a5a:	38 8d       	ldd	r19, Y+24	; 0x18
 a5c:	49 8d       	ldd	r20, Y+25	; 0x19
 a5e:	5a 8d       	ldd	r21, Y+26	; 0x1a
 a60:	bc 01       	movw	r22, r24
 a62:	cd 01       	movw	r24, r26
 a64:	97 d1       	rcall	.+814    	; 0xd94 <__udivmodsi4>
 a66:	da 01       	movw	r26, r20
 a68:	c9 01       	movw	r24, r18
 a6a:	8b a3       	std	Y+35, r24	; 0x23
 a6c:	9c a3       	std	Y+36, r25	; 0x24
 a6e:	ad a3       	std	Y+37, r26	; 0x25
 a70:	be a3       	std	Y+38, r27	; 0x26
	unsigned long int SMTick4_period = SMTick4_calc/GCD;
 a72:	8f 85       	ldd	r24, Y+15	; 0x0f
 a74:	98 89       	ldd	r25, Y+16	; 0x10
 a76:	a9 89       	ldd	r26, Y+17	; 0x11
 a78:	ba 89       	ldd	r27, Y+18	; 0x12
 a7a:	2f 89       	ldd	r18, Y+23	; 0x17
 a7c:	38 8d       	ldd	r19, Y+24	; 0x18
 a7e:	49 8d       	ldd	r20, Y+25	; 0x19
 a80:	5a 8d       	ldd	r21, Y+26	; 0x1a
 a82:	bc 01       	movw	r22, r24
 a84:	cd 01       	movw	r24, r26
 a86:	86 d1       	rcall	.+780    	; 0xd94 <__udivmodsi4>
 a88:	da 01       	movw	r26, r20
 a8a:	c9 01       	movw	r24, r18
 a8c:	8f a3       	std	Y+39, r24	; 0x27
 a8e:	98 a7       	std	Y+40, r25	; 0x28
 a90:	a9 a7       	std	Y+41, r26	; 0x29
 a92:	ba a7       	std	Y+42, r27	; 0x2a


	//Declare an array of tasks
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2 , &task3, &task4};
 a94:	88 e0       	ldi	r24, 0x08	; 8
 a96:	ef e1       	ldi	r30, 0x1F	; 31
 a98:	f1 e0       	ldi	r31, 0x01	; 1
 a9a:	de 01       	movw	r26, r28
 a9c:	9d 96       	adiw	r26, 0x2d	; 45
 a9e:	01 90       	ld	r0, Z+
 aa0:	0d 92       	st	X+, r0
 aa2:	8a 95       	dec	r24
 aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0x1a6>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 aa6:	84 e0       	ldi	r24, 0x04	; 4
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	9c a7       	std	Y+44, r25	; 0x2c
 aac:	8b a7       	std	Y+43, r24	; 0x2b

	// Task 1
	task1.state = -1;//Task initial state.
 aae:	8f ef       	ldi	r24, 0xFF	; 255
 ab0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <task1.1987>
	task1.period = SMTick1_period;//Task Period.
 ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 ab8:	ad 8d       	ldd	r26, Y+29	; 0x1d
 aba:	be 8d       	ldd	r27, Y+30	; 0x1e
 abc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <task1.1987+0x1>
 ac0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <task1.1987+0x2>
 ac4:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <task1.1987+0x3>
 ac8:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <task1.1987+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
 ad0:	ad 8d       	ldd	r26, Y+29	; 0x1d
 ad2:	be 8d       	ldd	r27, Y+30	; 0x1e
 ad4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <task1.1987+0x5>
 ad8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <task1.1987+0x6>
 adc:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <task1.1987+0x7>
 ae0:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <task1.1987+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 ae4:	8e e6       	ldi	r24, 0x6E	; 110
 ae6:	92 e0       	ldi	r25, 0x02	; 2
 ae8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <task1.1987+0xa>
 aec:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <task1.1987+0x9>

	// Task 2
	task2.state = -1;//Task initial state.
 af0:	8f ef       	ldi	r24, 0xFF	; 255
 af2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <task2.1988>
	task2.period = SMTick2_period;//Task Period.
 af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 af8:	98 a1       	ldd	r25, Y+32	; 0x20
 afa:	a9 a1       	ldd	r26, Y+33	; 0x21
 afc:	ba a1       	ldd	r27, Y+34	; 0x22
 afe:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <task2.1988+0x1>
 b02:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <task2.1988+0x2>
 b06:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <task2.1988+0x3>
 b0a:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <task2.1988+0x4>
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 b0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 b10:	98 a1       	ldd	r25, Y+32	; 0x20
 b12:	a9 a1       	ldd	r26, Y+33	; 0x21
 b14:	ba a1       	ldd	r27, Y+34	; 0x22
 b16:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <task2.1988+0x5>
 b1a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <task2.1988+0x6>
 b1e:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <task2.1988+0x7>
 b22:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <task2.1988+0x8>
	task2.TickFct = &SMTick2;//Function pointer for the tick
 b26:	88 ed       	ldi	r24, 0xD8	; 216
 b28:	92 e0       	ldi	r25, 0x02	; 2
 b2a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <task2.1988+0xa>
 b2e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <task2.1988+0x9>

	// Task 3
	task3.state = -1;//Task initial state.
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <task3.1989>
	task3.period = SMTick3_period;//Task Period.
 b38:	8b a1       	ldd	r24, Y+35	; 0x23
 b3a:	9c a1       	ldd	r25, Y+36	; 0x24
 b3c:	ad a1       	ldd	r26, Y+37	; 0x25
 b3e:	be a1       	ldd	r27, Y+38	; 0x26
 b40:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <task3.1989+0x1>
 b44:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <task3.1989+0x2>
 b48:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <task3.1989+0x3>
 b4c:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <task3.1989+0x4>
	task3.elapsedTime = SMTick3_period;//Task current elapsed time.
 b50:	8b a1       	ldd	r24, Y+35	; 0x23
 b52:	9c a1       	ldd	r25, Y+36	; 0x24
 b54:	ad a1       	ldd	r26, Y+37	; 0x25
 b56:	be a1       	ldd	r27, Y+38	; 0x26
 b58:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <task3.1989+0x5>
 b5c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <task3.1989+0x6>
 b60:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <task3.1989+0x7>
 b64:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <task3.1989+0x8>
	task3.TickFct = &SMTick3;//Function pointer for the tick
 b68:	87 e6       	ldi	r24, 0x67	; 103
 b6a:	93 e0       	ldi	r25, 0x03	; 3
 b6c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <task3.1989+0xa>
 b70:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <task3.1989+0x9>
	
	// Task 4
	task4.state = -1;//Task initial state.
 b74:	8f ef       	ldi	r24, 0xFF	; 255
 b76:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <task4.1990>
	task4.period = SMTick4_period;//Task Period.
 b7a:	8f a1       	ldd	r24, Y+39	; 0x27
 b7c:	98 a5       	ldd	r25, Y+40	; 0x28
 b7e:	a9 a5       	ldd	r26, Y+41	; 0x29
 b80:	ba a5       	ldd	r27, Y+42	; 0x2a
 b82:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <task4.1990+0x1>
 b86:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <task4.1990+0x2>
 b8a:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <task4.1990+0x3>
 b8e:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <task4.1990+0x4>
	task4.elapsedTime = SMTick4_period;//Task current elapsed time.
 b92:	8f a1       	ldd	r24, Y+39	; 0x27
 b94:	98 a5       	ldd	r25, Y+40	; 0x28
 b96:	a9 a5       	ldd	r26, Y+41	; 0x29
 b98:	ba a5       	ldd	r27, Y+42	; 0x2a
 b9a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <task4.1990+0x5>
 b9e:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <task4.1990+0x6>
 ba2:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <task4.1990+0x7>
 ba6:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <task4.1990+0x8>
	task4.TickFct = &SMTick4;//Function pointer for the tick
 baa:	8c ee       	ldi	r24, 0xEC	; 236
 bac:	93 e0       	ldi	r25, 0x03	; 3
 bae:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <task4.1990+0xa>
 bb2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <task4.1990+0x9>

	// Set the timer and turn it on
	TimerSet(GCD);
 bb6:	8f 89       	ldd	r24, Y+23	; 0x17
 bb8:	98 8d       	ldd	r25, Y+24	; 0x18
 bba:	a9 8d       	ldd	r26, Y+25	; 0x19
 bbc:	ba 8d       	ldd	r27, Y+26	; 0x1a
	TimerOn();
 bbe:	bc 01       	movw	r22, r24
 bc0:	cd 01       	movw	r24, r26
	
	// Start or reset the LCD screen
	LCD_init();
 bc2:	6f db       	rcall	.-2338   	; 0x2a2 <TimerSet>
 bc4:	9c db       	rcall	.-2248   	; 0x2fe <TimerOn>
	LCD_ClearScreen();
 bc6:	8a da       	rcall	.-2796   	; 0xdc <LCD_init>
 bc8:	7f da       	rcall	.-2818   	; 0xc8 <LCD_ClearScreen>
	
	obstacle = '#';
 bca:	83 e2       	ldi	r24, 0x23	; 35
 bcc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <obstacle>
	pause = 1;
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <pause>
	ob1Loc = 15;
 bd6:	8f e0       	ldi	r24, 0x0F	; 15
 bd8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ob1Loc>
	ob2Loc = 27;
 bdc:	8b e1       	ldi	r24, 0x1B	; 27
 bde:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ob2Loc>
	ob3Loc = 7;
 be2:	87 e0       	ldi	r24, 0x07	; 7
	ob4Loc = 19;
 be4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ob3Loc>
	
	LCD_Cursor(ob1Loc); LCD_WriteData(obstacle);
 be8:	83 e1       	ldi	r24, 0x13	; 19
 bea:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ob4Loc>
 bee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ob1Loc>
 bf2:	12 db       	rcall	.-2524   	; 0x218 <LCD_Cursor>
	LCD_Cursor(ob2Loc); LCD_WriteData(obstacle);
 bf4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 bf8:	b6 da       	rcall	.-2708   	; 0x166 <LCD_WriteData>
 bfa:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ob2Loc>
 bfe:	0c db       	rcall	.-2536   	; 0x218 <LCD_Cursor>
	LCD_Cursor(ob3Loc); LCD_WriteData(obstacle);
 c00:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 c04:	b0 da       	rcall	.-2720   	; 0x166 <LCD_WriteData>
 c06:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ob3Loc>
 c0a:	06 db       	rcall	.-2548   	; 0x218 <LCD_Cursor>
 c0c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
	LCD_Cursor(ob4Loc); LCD_WriteData(obstacle);
 c10:	aa da       	rcall	.-2732   	; 0x166 <LCD_WriteData>
 c12:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ob4Loc>
 c16:	00 db       	rcall	.-2560   	; 0x218 <LCD_Cursor>
 c18:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <obstacle>
 c1c:	a4 da       	rcall	.-2744   	; 0x166 <LCD_WriteData>
 c1e:	82 e0       	ldi	r24, 0x02	; 2
 	LCD_Cursor(2);
 c20:	fb da       	rcall	.-2570   	; 0x218 <LCD_Cursor>
 c22:	81 e0       	ldi	r24, 0x01	; 1
 c24:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <upDown>
	upDown = 1;
 c28:	80 e2       	ldi	r24, 0x20	; 32
 c2a:	90 e0       	ldi	r25, 0x00	; 0

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		tmpA = ~PINA & 0x07;
 c2c:	fc 01       	movw	r30, r24
 c2e:	80 81       	ld	r24, Z
 c30:	80 95       	com	r24
 c32:	87 70       	andi	r24, 0x07	; 7
 c34:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <tmpA>
 c38:	1a 82       	std	Y+2, r1	; 0x02
 c3a:	19 82       	std	Y+1, r1	; 0x01
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 c3c:	9b c0       	rjmp	.+310    	; 0xd74 <main+0x47c>
 c3e:	89 81       	ldd	r24, Y+1	; 0x01
 c40:	9a 81       	ldd	r25, Y+2	; 0x02
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 c42:	88 0f       	add	r24, r24
 c44:	99 1f       	adc	r25, r25
 c46:	9e 01       	movw	r18, r28
 c48:	2f 5f       	subi	r18, 0xFF	; 255
 c4a:	3f 4f       	sbci	r19, 0xFF	; 255
 c4c:	82 0f       	add	r24, r18
 c4e:	93 1f       	adc	r25, r19
 c50:	8c 96       	adiw	r24, 0x2c	; 44
 c52:	fc 01       	movw	r30, r24
 c54:	80 81       	ld	r24, Z
 c56:	91 81       	ldd	r25, Z+1	; 0x01
 c58:	fc 01       	movw	r30, r24
 c5a:	25 81       	ldd	r18, Z+5	; 0x05
 c5c:	36 81       	ldd	r19, Z+6	; 0x06
 c5e:	47 81       	ldd	r20, Z+7	; 0x07
 c60:	50 85       	ldd	r21, Z+8	; 0x08
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	9a 81       	ldd	r25, Y+2	; 0x02
 c66:	88 0f       	add	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	be 01       	movw	r22, r28
 c6c:	6f 5f       	subi	r22, 0xFF	; 255
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	86 0f       	add	r24, r22
 c72:	97 1f       	adc	r25, r23
 c74:	8c 96       	adiw	r24, 0x2c	; 44
 c76:	fc 01       	movw	r30, r24
 c78:	80 81       	ld	r24, Z
 c7a:	91 81       	ldd	r25, Z+1	; 0x01
 c7c:	fc 01       	movw	r30, r24
 c7e:	81 81       	ldd	r24, Z+1	; 0x01
 c80:	92 81       	ldd	r25, Z+2	; 0x02
 c82:	a3 81       	ldd	r26, Z+3	; 0x03
 c84:	b4 81       	ldd	r27, Z+4	; 0x04
 c86:	28 17       	cp	r18, r24
 c88:	39 07       	cpc	r19, r25
 c8a:	4a 07       	cpc	r20, r26
 c8c:	5b 07       	cpc	r21, r27
 c8e:	09 f0       	breq	.+2      	; 0xc92 <main+0x39a>
 c90:	45 c0       	rjmp	.+138    	; 0xd1c <main+0x424>
 c92:	89 81       	ldd	r24, Y+1	; 0x01
 c94:	9a 81       	ldd	r25, Y+2	; 0x02
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 c96:	88 0f       	add	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	9e 01       	movw	r18, r28
 c9c:	2f 5f       	subi	r18, 0xFF	; 255
 c9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ca0:	82 0f       	add	r24, r18
 ca2:	93 1f       	adc	r25, r19
 ca4:	8c 96       	adiw	r24, 0x2c	; 44
 ca6:	fc 01       	movw	r30, r24
 ca8:	00 81       	ld	r16, Z
 caa:	11 81       	ldd	r17, Z+1	; 0x01
 cac:	89 81       	ldd	r24, Y+1	; 0x01
 cae:	9a 81       	ldd	r25, Y+2	; 0x02
 cb0:	88 0f       	add	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	9e 01       	movw	r18, r28
 cb6:	2f 5f       	subi	r18, 0xFF	; 255
 cb8:	3f 4f       	sbci	r19, 0xFF	; 255
 cba:	82 0f       	add	r24, r18
 cbc:	93 1f       	adc	r25, r19
 cbe:	8c 96       	adiw	r24, 0x2c	; 44
 cc0:	fc 01       	movw	r30, r24
 cc2:	80 81       	ld	r24, Z
 cc4:	91 81       	ldd	r25, Z+1	; 0x01
 cc6:	fc 01       	movw	r30, r24
 cc8:	21 85       	ldd	r18, Z+9	; 0x09
 cca:	32 85       	ldd	r19, Z+10	; 0x0a
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	9a 81       	ldd	r25, Y+2	; 0x02
 cd0:	88 0f       	add	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	ae 01       	movw	r20, r28
 cd6:	4f 5f       	subi	r20, 0xFF	; 255
 cd8:	5f 4f       	sbci	r21, 0xFF	; 255
 cda:	84 0f       	add	r24, r20
 cdc:	95 1f       	adc	r25, r21
 cde:	8c 96       	adiw	r24, 0x2c	; 44
 ce0:	fc 01       	movw	r30, r24
 ce2:	80 81       	ld	r24, Z
 ce4:	91 81       	ldd	r25, Z+1	; 0x01
 ce6:	fc 01       	movw	r30, r24
 ce8:	80 81       	ld	r24, Z
 cea:	08 2e       	mov	r0, r24
 cec:	00 0c       	add	r0, r0
 cee:	99 0b       	sbc	r25, r25
 cf0:	f9 01       	movw	r30, r18
 cf2:	09 95       	icall
 cf4:	f8 01       	movw	r30, r16
 cf6:	80 83       	st	Z, r24
 cf8:	89 81       	ldd	r24, Y+1	; 0x01
 cfa:	9a 81       	ldd	r25, Y+2	; 0x02
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 cfc:	88 0f       	add	r24, r24
 cfe:	99 1f       	adc	r25, r25
 d00:	9e 01       	movw	r18, r28
 d02:	2f 5f       	subi	r18, 0xFF	; 255
 d04:	3f 4f       	sbci	r19, 0xFF	; 255
 d06:	82 0f       	add	r24, r18
 d08:	93 1f       	adc	r25, r19
 d0a:	8c 96       	adiw	r24, 0x2c	; 44
 d0c:	fc 01       	movw	r30, r24
 d0e:	80 81       	ld	r24, Z
 d10:	91 81       	ldd	r25, Z+1	; 0x01
 d12:	fc 01       	movw	r30, r24
 d14:	15 82       	std	Z+5, r1	; 0x05
 d16:	16 82       	std	Z+6, r1	; 0x06
 d18:	17 82       	std	Z+7, r1	; 0x07
 d1a:	10 86       	std	Z+8, r1	; 0x08
 d1c:	89 81       	ldd	r24, Y+1	; 0x01
 d1e:	9a 81       	ldd	r25, Y+2	; 0x02
			}
			tasks[i]->elapsedTime += 1;
 d20:	88 0f       	add	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	9e 01       	movw	r18, r28
 d26:	2f 5f       	subi	r18, 0xFF	; 255
 d28:	3f 4f       	sbci	r19, 0xFF	; 255
 d2a:	82 0f       	add	r24, r18
 d2c:	93 1f       	adc	r25, r19
 d2e:	8c 96       	adiw	r24, 0x2c	; 44
 d30:	fc 01       	movw	r30, r24
 d32:	20 81       	ld	r18, Z
 d34:	31 81       	ldd	r19, Z+1	; 0x01
 d36:	89 81       	ldd	r24, Y+1	; 0x01
 d38:	9a 81       	ldd	r25, Y+2	; 0x02
 d3a:	88 0f       	add	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	ae 01       	movw	r20, r28
 d40:	4f 5f       	subi	r20, 0xFF	; 255
 d42:	5f 4f       	sbci	r21, 0xFF	; 255
 d44:	84 0f       	add	r24, r20
 d46:	95 1f       	adc	r25, r21
 d48:	8c 96       	adiw	r24, 0x2c	; 44
 d4a:	fc 01       	movw	r30, r24
 d4c:	80 81       	ld	r24, Z
 d4e:	91 81       	ldd	r25, Z+1	; 0x01
 d50:	fc 01       	movw	r30, r24
 d52:	85 81       	ldd	r24, Z+5	; 0x05
 d54:	96 81       	ldd	r25, Z+6	; 0x06
 d56:	a7 81       	ldd	r26, Z+7	; 0x07
 d58:	b0 85       	ldd	r27, Z+8	; 0x08
 d5a:	01 96       	adiw	r24, 0x01	; 1
 d5c:	a1 1d       	adc	r26, r1
 d5e:	b1 1d       	adc	r27, r1
 d60:	f9 01       	movw	r30, r18
 d62:	85 83       	std	Z+5, r24	; 0x05
 d64:	96 83       	std	Z+6, r25	; 0x06
 d66:	a7 83       	std	Z+7, r26	; 0x07
 d68:	b0 87       	std	Z+8, r27	; 0x08
 d6a:	89 81       	ldd	r24, Y+1	; 0x01
 d6c:	9a 81       	ldd	r25, Y+2	; 0x02

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		tmpA = ~PINA & 0x07;
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	9a 83       	std	Y+2, r25	; 0x02
 d72:	89 83       	std	Y+1, r24	; 0x01
 d74:	29 81       	ldd	r18, Y+1	; 0x01
 d76:	3a 81       	ldd	r19, Y+2	; 0x02
 d78:	8b a5       	ldd	r24, Y+43	; 0x2b
 d7a:	9c a5       	ldd	r25, Y+44	; 0x2c
 d7c:	28 17       	cp	r18, r24
 d7e:	39 07       	cpc	r19, r25
 d80:	08 f4       	brcc	.+2      	; 0xd84 <main+0x48c>
 d82:	5d cf       	rjmp	.-326    	; 0xc3e <main+0x346>
 d84:	00 00       	nop
 d86:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 d8a:	88 23       	and	r24, r24
 d8c:	e1 f3       	breq	.-8      	; 0xd86 <main+0x48e>
 d8e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
		TimerFlag = 0;
 d92:	4a cf       	rjmp	.-364    	; 0xc28 <main+0x330>

00000d94 <__udivmodsi4>:
 d94:	a1 e2       	ldi	r26, 0x21	; 33
	}
 d96:	1a 2e       	mov	r1, r26
 d98:	aa 1b       	sub	r26, r26
 d9a:	bb 1b       	sub	r27, r27
 d9c:	fd 01       	movw	r30, r26
 d9e:	0d c0       	rjmp	.+26     	; 0xdba <__udivmodsi4_ep>

00000da0 <__udivmodsi4_loop>:
 da0:	aa 1f       	adc	r26, r26
 da2:	bb 1f       	adc	r27, r27
 da4:	ee 1f       	adc	r30, r30
 da6:	ff 1f       	adc	r31, r31
 da8:	a2 17       	cp	r26, r18
 daa:	b3 07       	cpc	r27, r19
 dac:	e4 07       	cpc	r30, r20
 dae:	f5 07       	cpc	r31, r21
 db0:	20 f0       	brcs	.+8      	; 0xdba <__udivmodsi4_ep>
 db2:	a2 1b       	sub	r26, r18
 db4:	b3 0b       	sbc	r27, r19
 db6:	e4 0b       	sbc	r30, r20
 db8:	f5 0b       	sbc	r31, r21

00000dba <__udivmodsi4_ep>:
 dba:	66 1f       	adc	r22, r22
 dbc:	77 1f       	adc	r23, r23
 dbe:	88 1f       	adc	r24, r24
 dc0:	99 1f       	adc	r25, r25
 dc2:	1a 94       	dec	r1
 dc4:	69 f7       	brne	.-38     	; 0xda0 <__udivmodsi4_loop>
 dc6:	60 95       	com	r22
 dc8:	70 95       	com	r23
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	9b 01       	movw	r18, r22
 dd0:	ac 01       	movw	r20, r24
 dd2:	bd 01       	movw	r22, r26
 dd4:	cf 01       	movw	r24, r30
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
